{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TitleCardMaker","text":""},{"location":"#welcome-to-titlecardmaker","title":"Welcome to TitleCardMaker","text":"<p>TitleCardMaker (TCM) is a program and Docker container written in Python that automates the creation of customized Title Cards for use in personal media server services like Plex, Jellyfin, or Emby. This is a self-hosted tool -  meaning that it is installed and run on your computer.</p>"},{"location":"#what-is-a-title-card","title":"What is a Title Card?","text":"<p>A Title Card is a thumbnail image for an Episode of television that can be used to add a unique look within a personal media server like Plex, Emby, or Jellyfin. Some Series have \"official\" Title Cards featured in the Episode itself, but TCM specializes in creating and customizing \"unofficial\" Title Cards. The following Cards have all been designed by me, and were created with TitleCardMaker:</p>"},{"location":"#download-the-code","title":"Download the Code","text":"<p>While the TCM Web UI is under active development, it is only accessible to project Sponsors. If you are interested, sponsor on GitHub for access.</p> <p>Installation and startup instructions are here.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Detailed Tutorial</p> <p>For more detailed tutorials that take you step-by-step through the installation and setup of TitleCardMaker, continue to the Getting Started tutorial.</p> <p>TitleCardMaker is designed to for an easy \"out of the box\" setup. The basic steps are as follows:</p> <ol> <li> <p>Install TitleCardMaker (via Docker or locally).</p> </li> <li> <p>Set up your Connections to your other services - such as Sonarr, TMDb, TVDB, Plex, Emby, Jellyfin, or Tautulli.</p> </li> <li> <p>Start adding Series to TitleCardMaker - this can be done manually, or with Syncs.</p> </li> <li> <p>Customize the look and style of Title Cards to your liking.</p> </li> </ol>"},{"location":"#updating","title":"Updating","text":"<p>After the initial install, if you would like to update to the latest version of TCM, then you need to do the following:</p>  Docker Compose Docker Non-Docker <ol> <li> <p>Navigate to your original install directory - like so:</p> <pre><code>cd ~/My/Install/Diretory/TitleCardMaker-WebUI\n</code></pre> </li> <li> <p>Pull and relaunch the container:</p> <pre><code>docker compose up --pull always -d\n</code></pre> </li> </ol> <ol> <li> <p>Navigate to your original install directory - like so:</p> <pre><code>cd ~/My/Install/Diretory/TitleCardMaker-WebUI\n</code></pre> </li> <li> <p>Remove the old container.</p> <pre><code>docker container rm TitleCardMaker\n</code></pre> </li> <li> <p>Pull the latest image (change <code>latest</code> to <code>develop</code> if desired).</p> <pre><code>docker pull \"ghcr.io/titlecardmaker/titlecardmaker-webui:latest\"\n</code></pre> </li> <li> <p>Recreate the container by running your original <code>docker run</code> command (see here).</p> </li> </ol> <ol> <li> <p>Navigate to your original install directory - like so:</p> <pre><code>cd ~/My/Install/Diretory/TitleCardMaker-WebUI\n</code></pre> </li> <li> <p>Switch to the branch you would like to be on - this is <code>main</code> or <code>develop</code>:</p> <pre><code>git checkout main\n</code></pre> </li> <li> <p>Pull in the newest changes:</p> <pre><code>git pull\n</code></pre> </li> <li> <p>Re-launch TitleCardMaker.</p> <pre><code>uv run uvicorn app-main:app --host \"0.0.0.0\" --port 4242\n</code></pre> </li> </ol>"},{"location":"blueprints/","title":"Blueprints","text":"","tags":["Series","Blueprints"]},{"location":"blueprints/#blueprints","title":"Blueprints","text":"<p>Blueprints can be viewed as amped-up Templates. These are ready-made collections of cards configurations that apply to a single Series. Blueprints allow for importing a pre-made customization for a Series, and can include any of the following:</p> <ul> <li>Named Fonts - e.g. Fonts with files</li> <li>Templates</li> <li>Series customizations</li> <li>Episode customizations</li> <li>Source Files - e.g. logos, masks, Source Images, etc.</li> </ul> <p>Example</p> <p>Don't want to spend an hour of your life combing through the Pok\u00e9mon Wikipedia in order to determine which specific Episodes apply to which specific seasons? Blueprints allow you to just take the hour of my work and apply everything with the click of a button.</p> <p>All Blueprints are hosted on the companion repository and anyone can (and is encouraged to!) submit a Blueprint for availability across all of TCM. This process is described below.</p>","tags":["Series","Blueprints"]},{"location":"blueprints/#viewing-blueprints","title":"Viewing Blueprints","text":"<p>There are two main ways of browsing Blueprints.</p> <ol> <li> <p>Searching for the available Blueprints for a specific Series. This is done by going to the Blueprints tab on a Series' page.</p> </li> <li> <p>Viewing all available Blueprints for all Series. These are accessed by going to the new/add Series page.</p> </li> </ol> <p>Some Blueprints will also have multiple preview images. This will be indicated by a slight animation when the preview is hovered over. Clicking on the image will then cycle through the available previews.</p>","tags":["Series","Blueprints"]},{"location":"blueprints/#importing-blueprints","title":"Importing Blueprints","text":"Note about Font Files <p>If the Blueprint has any Named Fonts that include custom font files, you might be prompted to download the Font file from a 3rd party website. This is sometimes required as a Font's license might not allow it to be redistributed by TitleCardMaker.</p> <p>TCM will import the rest of the Font customizations for you, so just be sure to upload the Font files before you start Title Card creation.</p>","tags":["Series","Blueprints"]},{"location":"blueprints/#by-series","title":"By Series","text":"<p>To import a Blueprint for a Series, simply open the Series' page and then open the Blueprints tab. Click <code>Search</code>, and TCM will look for any available Blueprints for this Series. If any are available, a preview will show the details.</p> <p>On this card will be a preview of the Blueprint, as well as what customizations will be imported. This can be any number of Fonts, Templates, or Episode overrides.</p> <p>After picking the Blueprint you like, simply click  Import and TCM will download and apply the Blueprint for you. Once it is completed, the page will refresh.</p> <p>After a Blueprint has been imported, you are free to make any edits to the Series, Templates, or Fonts as you see fit. TitleCardMaker will not override your changes with the Blueprint settings unless you prompt it to do so by re-importing the Blueprint.</p> <p> </p>","tags":["Series","Blueprints"]},{"location":"blueprints/#browsing","title":"Browsing","text":"<p>If you'd like to browse all available Blueprints, go to the new Series page (the <code>/add</code> URL) and scroll down to the Blueprints section. After clicking Browse Blueprints, preview cards for each Blueprint will be shown.</p> <p>This is covered in greater detail here.</p> <p> </p>","tags":["Series","Blueprints"]},{"location":"blueprints/#sharing-your-own-blueprint","title":"Sharing your own Blueprint","text":"<p>In order to help other TitleCardMaker users, it is encouraged to share any Blueprints you think would be valuable to others. This process is designed to be as easy as possible.</p> <p>Submission Checklist</p> <p>If you just want a quick checklist of what to do for your Blueprint submission, see below:</p> <ul> <li> Export your Blueprint within the TCM UI.</li> <li> Choose an effective preview image.</li> <li> Create an issue on the Blueprints repository (this should be started for you).</li> <li> Fill out the issue form's required data:<ul> <li> Series name, year, your username, and the description</li> <li> Copy/paste the contents of the exported <code>blueprint.json</code> file in the Blueprint File field.</li> <li> Upload and verify any Font files' licenses permit the files to be shared - if not, see below.</li> <li> Include any Source Images in a <code>.zip</code> and make  mention of them in the description.</li> </ul> </li> </ul>","tags":["Series","Blueprints"]},{"location":"blueprints/#exporting-the-data","title":"Exporting the Data","text":"<p>Once you've customized a Series' Cards to  perfection, open it's page in TitleCardMaker, and then go to the Blueprints tab. Click the  Export button, and TCM will do a few things:</p> <ol> <li> <p>If the Series (or any linked Templates or Episodes) have a Named Font it will copy any Font files</p> </li> <li> <p>Search for and copy a random available<sup>1</sup> Title Card for the Series</p> </li> <li> <p>Convert the Series, Templates, Fonts, and Episode customizations into a Blueprint \"object\" written as JSON</p> </li> <li> <p>All of the above data is bundled (and sub-bundled) into a <code>.zip</code> file and downloaded through your browser</p> </li> <li> <p>Finally, TCM will open a new tab to GitHub and begin filling out the Blueprint submission form (if you are logged in).</p> </li> </ol> <p>It is important to note that TCM cannot automatically detect when a Source Image should be included in a Blueprint export. Because of this you will need to manually copy and zip the files you would like included.</p>","tags":["Series","Blueprints"]},{"location":"blueprints/#editing-the-blueprint","title":"Editing the Blueprint","text":"<p>Before submitting the Blueprint to the repository, it's best to double-check the data in the Blueprint submission.</p> <ol> <li> <p>Review that the preview images are appropriate, and representative of the Blueprint. You may also include multiple previews if the Blueprint has various different styles. If you are submitting multiple Blueprints for the same Series, I recommend selecting different preview Cards so there is variation.</p> No Preview Image Present? <p>If TCM did not include a <code>preview</code> file in the zip, then there were no valid Cards for it to export. You can use an existing Card in its place, but make sure it is of high quality and is not blurred or grayscale.</p> Changing the Preview <p>TCM only automatically chooses a Card for you in order to be helpful. You can pick any Card you'd like for the preview.</p> </li> <li> <p>Verify the actual contents of the Blueprint. Any customizations can be edited, removed, or adjusted. But to prevent any errors, it's best to edit these values within TCM itself and then just re-export the Blueprint.</p> </li> <li> <p>Verify the Licenses for any exported Font files. Please only upload the file if the author's license is listed as open and/or free for public (non-commercial) use and distribution.</p>  Font is Public Font is Not Public Cannot Find License <p>If the Font is public, then you are free to include the Font file itself inside the Blueprint. Please take note (either the URL or a screenshot) of the License to be included in the Issue if needed.</p> <p>If the Font is not public, do not include the Font file in the Blueprint. Remove reference to this file from the <code>blueprint.json</code> file, and you can include a URL where TCM users can find the Font themselves under the <code>file_download_url</code> field. For example:</p> blueprint.json<pre><code>{\n    \"series\": {},\n    \"episodes\": {},\n    \"templates\": [],\n    \"fonts\": [\n        {\n            \"name\": \"Better Call Saul\",\n            \"file\": \"script-casual-normal.ttf\", // (1)!\n            \"file_download_url\": \"https://www.google.com/\" // (2)!\n        }\n    ]\n}\n</code></pre> <ol> <li>Delete this line.</li> <li>Add this line with the URL for your specific Font.</li> </ol> <p>If you cannot find the applicable license for a Font, assume the Font is not public and follow those instructions.</p> </li> <li> <p>Grab any Source Images that are instrumental to the Blueprint (this is most often a logo file) and zip them into a <code>.zip</code> file.</p> </li> </ol>","tags":["Series","Blueprints"]},{"location":"blueprints/#submitting-the-blueprint","title":"Submitting the Blueprint","text":"<p>With this Blueprint, the next (and final) step is to submit it to the Blueprints repository.</p> <ol> <li> <p>Open a new issue on the Blueprints GitHub repository (this might have been started for you).</p> </li> <li> <p>Fill out the form with the relevant information.</p> </li> <li> <p>Paste the contents of the exported <code>blueprint.json</code> file into the Blueprint File field.</p> </li> <li> <p>If your Blueprints includes any custom Font files:</p> No Font FilesFont Files <p>If your Blueprint does not have any custom Font files, you can skip this step.</p> <p>If you have at least one Font file - then you need to drag/drop or attach that zipped file into the Zip of Font Files field.</p> Why is this necessary? <p>This is required because GitHub only allows directly uploading files of specific extensions, and Font extensions are not on that list.</p> </li> <li> <p>Upload the preview Title Card(s) into the Preview Title Cards section of the form.</p> </li> <li> <p>Click the  Submit new issue button.</p> </li> </ol> <p>Success</p> <p>After the issue is created, there is an automated action that will validate your submission (check for syntax errors, bad file uploads, missing preview, etc.). If this passes, then your work is done and the Blueprint will be available within TCM shortly.</p>","tags":["Series","Blueprints"]},{"location":"blueprints/#sets","title":"Sets","text":"<p>Blueprints can also be part of Blueprint Sets. These are simply groups of Blueprints which are all associated with each other. For example:</p> <p> </p>","tags":["Series","Blueprints"]},{"location":"blueprints/#viewing-sets","title":"Viewing Sets","text":"<p>When a Series is associated with a Set, it will be noted on the Blueprint on either the Series page, or the main Blueprint browser.</p>","tags":["Series","Blueprints"]},{"location":"blueprints/#creating-a-set","title":"Creating a Set","text":"<p>If you would like to create a Set with some of your existing Blueprints, this can be done through the repository, just like creating a new Blueprint.</p> <ol> <li> <p>Create a new issue.</p> </li> <li> <p>Give the set some title - e.g. \"Marvel Cinematic Universe\".</p> </li> <li> <p>Identify which Series and Blueprints you want to add to this Set, and navigate to them in the main repository folder structure.</p> <ol> <li> <p>After you've found the Series, go to the numbered subfolder for the Blueprint - you should now see a <code>blueprint.json</code> file (along with some other files). </p> </li> <li> <p>Click Ctrl+Shift+. (Cmd+Shift+. on MacOS) to copy the path of this folder.</p> </li> </ol> </li> <li> <p>Paste the path you just copied into the Blueprints section of the form.</p> <p>Example</p> <p>The path should start with <code>blueprints/</code> and end with some number. For example:</p> <pre><code>blueprints/M/Marvel's Agents of S.H.I.E.L.D. (2013)/0\n</code></pre> </li> <li> <p>Repeat steps 3-4 for each Blueprint you want to add, making sure to put each Blueprint on a new line. You must specify at least two Blueprints.</p> <p>Got them all?</p> <p>Double check you have added all the Blueprints you want in the Set. Currently there is no \"automated\" way to add existing Blueprints to a Set after it's been created - meaning I will need to manually edit the database.</p> </li> <li> <p>Click the  Submit new issue button.</p> </li> </ol> <p>Success</p> <p>After the issue is created, there is an automated action that will validate your submission. If this passes, then your work is done and the Set will be available within TCM shortly.</p>","tags":["Series","Blueprints"]},{"location":"blueprints/#adding-to-a-set","title":"Adding to a Set","text":"<p>If you are submitting a new Blueprint and would like to add this to an existing Set, then find the Set ID from the table at the bottom of the main repository README. Specify this ID in the Blueprint submission form when you are filling it out.</p> <ol> <li> <p>TCM will only grab Title Cards that are not blurred or grayscale, and not any Cards from Specials (season 0).\u00a0\u21a9</p> </li> </ol>","tags":["Series","Blueprints"]},{"location":"help_and_support/","title":"Help &amp; Support","text":"<p>Encountered an issue, found a typo, or have a feature suggestion? The best way to get help or support for any of these is to reach out on Discord or create an issue on GitHub:</p> <ul> <li> Discord</li> <li> GitHub</li> </ul>"},{"location":"card_types/","title":"Custom Card Types","text":"<p>Under Construction</p> <p>This documentation is actively being developed.</p>"},{"location":"card_types/#background","title":"Background","text":"<p>In addition to customizing individual parts of a Title Card like the text, styling, and font, TitleCardMaker is designed to support multiple different types of Title Cards. These different types vary in more fundamental ways such as layout, text placement, and additional features.</p> <p>There are three different categories of card types:</p> Built-in <p>Card types developed by yours truly and shipped as part of TitleCardMaker. These types are typically the most thoroughly tested and support all the features of TitleCardMaker.</p> User-made <p>Cards developed by users of TCM who have taken the effort to make these available for others. These cards are not officially maintained, and so are not guaranteed to support all features. These are downloaded while TCM is running from the card types repository.</p> Local <p>Cards as Python files that exist on your local machine and are only available to yourself. These are read and loaded dynamically when TCM launches (and periodically after that). These can be used to test cards as they are being developed, but do require a little but of Python knowledge.</p>"},{"location":"card_types/#built-in-cards","title":"Built-in Cards","text":"<p>TitleCardMaker currently has the following built-in card types:</p> Card Type Preview Anime Banner Calligraphy Comic Book Cutout Divider Fade Formula 1 Frame Graph Inset Landscape Logo Marvel Music Negative Space Notification Olivier Overline Poster Roman Numeral Shape Star Wars Standard Striped Tinted Frame Tinted Glass White Border"},{"location":"card_types/#user-made-cards","title":"User-made Cards","text":"<p>...</p>"},{"location":"card_types/#local-cards","title":"Local Cards","text":"<p>The details of developing local card types is described here.</p>"},{"location":"card_types/anime/","title":"Anime Card Type","text":"<p>Under Construction</p> <p>This documentation is actively being developed.</p> <p>This card design was created by CollinHeist, and designed by Reddit User /u/Recker_Man. Because this is the only card which explicitly supports adding kanji, this is the de-facto card type used for most Anime series by most users.</p> <p>These cards feature relatively unobtrusive text in the lower left-hand corner of the image. The kanji, title, and season/episode text can all be adjusted.</p> Labeled Card Elements <p></p>"},{"location":"card_types/anime/#adding-kanji","title":"Adding Kanji","text":"<p>This card supports the addition of Kanji (Japanese text) to the Card through TCM's built-in translation feature.</p> <p>For the specified Series (or within a Template), add a translation which reads as \"Translate <code>Japanese</code> titles into <code>kanji</code>\".</p> <p>Recommendation</p> <p>Rather than specifying this translation for each Series, it is recommended to use a Template containing the correct card type and translation(s), and then add that Template to your Series.</p> <p>To go one step further, you can auto-assign this Template to a subset of your Series when Syncing; or add the Template with some filters (i.e. by library name) to your Global Templates.</p>"},{"location":"card_types/local/","title":"Local Card Types","text":"<p>Programming Knowledge</p> <p>The development of local card types is not very difficult, but it does require a basic understanding of the Python programming language and ImageMagick. I can provide some support for the TCM-specific requirements, but I do not have time to teach these concepts in addition to developing TCM.</p> <p>If you have an idea for a card type, but are not interested in (or cannot dedicate the time to) developing it yourself, I offer card design as a Sponsor reward on GitHub.</p>"},{"location":"card_types/local/#file-location","title":"File Location","text":"<p>Any local card type files should be placed inside the <code>card_types</code> directory in your main <code>config</code> directory. On Docker, this is <code>/config/card_types/</code>, and on non-Docker this is <code>./config/card_types/</code>.</p> <p>TCM will automatically parse all Python (<code>.py</code>) files in this directory.</p>"},{"location":"card_types/local/#syntax-requirements","title":"Syntax Requirements","text":"<p>There are specific requirements for how these Python files and classes must be structured in order to integrate into TCM. These are outlined below.</p> <ol> <li> <p>The file must be named the same as the card class.</p> Example <p>If I were making a card class called \"Fancy\", and the Python class were named <code>FancyTitleCard</code></p> FancyTitleCard.py<pre><code>class FancyTitleCard(BaseCardType):\n    ...\n</code></pre> <p>Then the filename must be <code>FancyTitleCard.py</code> - e.g. the class name and <code>.py</code>.</p> </li> <li> <p>The Python class must be a sub-class of <code>modules.BaseCardType.BaseCardType</code>.</p> Example FancyTitleCard.py<pre><code>from modules.BaseCardType import BaseCardType\n\nclass FancyTitleCard(BaseCardType):\n    ...\n</code></pre> </li> <li> <p>The class must define <code>TITLE_CHARACTERISTICS</code>, which is a dictionary which matches the type definition of <code>modules.Title.SplitCharacteristics</code>, which is:</p> <pre><code>class SplitCharacteristics(TypedDict):\n    # Character count to begin splitting titles into multiple lines\n    max_line_width: int\n    # Maximum number of lines a title can take up\n    max_line_count: int\n    # How to split titles into multiple lines\n    style: Literal['top', 'bottom', 'even', 'forced even']\n</code></pre> Example FancyTitleCard.py<pre><code>from modules.BaseCardType import BaseCardType\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n</code></pre> <p>This would make TCM auto-split titles after 20 characters into at most 2 lines, and the titles would be top-heavy (i.e. more text on the first line than the second).</p> </li> <li> <p>The class must define <code>TITLE_FONT</code> as the string representation of the path to the default Font file. It can be useful to use the path of the Python file itself - accessed with <code>Path(__file__)</code> - or the path of the reference directory used by TCM itself - accessed at <code>BaseCardType.BASE_REF_DIRECTORY</code>.</p> Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom modules.BaseCardType import BaseCardType\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n</code></pre> <p>This sets the default Font to a <code>DefaultFont.ttf</code> file in a folder <code>fancy_files</code> next to the <code>FancyTitleCard.py</code> file.</p> </li> <li> <p>The class must define <code>TITLE_COLOR</code> as a string of the default Font color. Any format of ImageMagick color name is accepted.</p> Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom modules.BaseCardType import BaseCardType\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n    TITLE_COLOR = 'white'\n</code></pre> </li> <li> <p>The class must define <code>DEFAULT_FONT_CASE</code> as the name of the case function to apply to the title text - e.g. <code>blank</code>, <code>lower</code>, <code>source</code>, <code>title</code>, or <code>upper</code>. Each is described below:</p> Font Case Description <code>blank</code> Remove all text <code>lower</code> Make all text lowercase <code>source</code> Leave the text as-is <code>title</code> Apply title texting to - e.g. \"Title Text\" <code>upper</code> Make all text uppercase Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom modules.BaseCardType import BaseCardType\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n    TITLE_COLOR = 'white'\n    DEFAULT_FONT_CASE = 'source'\n</code></pre> </li> <li> <p>The class must define <code>FONT_REPLACEMENTS</code> as a dictionary of text replacements to apply whose keys are the input text to replace with the values as output text. This is typically used for correcting characters missing from the default Font.</p> Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom modules.BaseCardType import BaseCardType\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n    TITLE_COLOR = 'white'\n    DEFAULT_FONT_CASE = 'source'\n    FONT_REPLACEMENTS = {\n        '\u00e9': 'e',\n        '\u00fc': 'u',\n    }\n</code></pre> <p>This would make TCM replace all instances of <code>\u00e9</code> with <code>e</code> and <code>\u00fc</code> with <code>u</code>.</p> </li> <li> <p>The class must define the class initialization method (<code>__init__</code>) as a function which accepts only keyword arguments (and <code>**</code>). It must have the <code>blur</code>, <code>grayscale</code>, and <code>preferences</code> arguments and pass these into the <code>super()</code> method. All arguments must be stored as attributes where needed.</p> Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom modules.BaseCardType import BaseCardType\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n    TITLE_COLOR = 'white'\n    DEFAULT_FONT_CASE = 'source'\n    FONT_REPLACEMENTS = {\n        '\u00e9': 'e',\n        '\u00fc': 'u',\n    }\n\n    def __init__(self,\n        source_file: Path,\n        card_file: Path,\n        title_text: str,\n        blur: bool = False,\n        grayscale: bool = False,\n        preferences: 'Preferences' = None,\n        **unused,\n    ) -&gt; None:\n\n        super().__init__(blur, grayscale, preferences=preferences)\n\n        self.source_file = source_file\n        self.card_file = card_file\n        self.title_text = title_text\n</code></pre> </li> <li> <p>The class must define <code>__slots__</code> as a tuple of all the attribute names as strings.</p> Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom modules.BaseCardType import BaseCardType\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n    TITLE_COLOR = 'white'\n    DEFAULT_FONT_CASE = 'source'\n    FONT_REPLACEMENTS = {\n        '\u00e9': 'e',\n        '\u00fc': 'u',\n    }\n\n    __slots__ = ('source_file', 'card_file', 'title_text')\n\n    def __init__(self,\n        source_file: Path,\n        card_file: Path,\n        title_text: str,\n        blur: bool = False,\n        grayscale: bool = False,\n        preferences: 'Preferences' = None,\n        **unused,\n    ) -&gt; None:\n\n        super().__init__(blur, grayscale, preferences=preferences)\n\n        self.source_file = source_file\n        self.card_file = card_file\n        self.title_text = title_text\n</code></pre> </li> <li> <p>The class must define a <code>create</code> method which accepts no arguments, implements the actual Card creation, and must delete all intermediate files created by the Card.</p> Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom modules.BaseCardType import BaseCardType\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n    TITLE_COLOR = 'white'\n    DEFAULT_FONT_CASE = 'source'\n    FONT_REPLACEMENTS = {\n        '\u00e9': 'e',\n        '\u00fc': 'u',\n    }\n\n    __slots__ = ('source_file', 'card_file', 'title_text')\n\n    def __init__(self,\n        source_file: Path,\n        card_file: Path,\n        title_text: str,\n        blur: bool = False,\n        grayscale: bool = False,\n        preferences: 'Preferences' = None,\n        **unused,\n    ) -&gt; None:\n\n        super().__init__(blur, grayscale, preferences=preferences)\n\n        self.source_file = source_file\n        self.card_file = card_file\n        self.title_text = title_text\n\n\n    def create(self) -&gt; None:\n\n        command = ' '.join([\n            f'convert \"{self.source_file.resolve()}\"',\n            # Resize and apply styles to source image\n            *self.resize_and_style,\n            f'-pointsize 500',\n            f'-gravity center',\n            f'-fill skyblue',\n            f'-annotate +0+0 \"{self.title_text}\"',\n            # Create card\n            *self.resize_output,\n            f'\"{self.output_file.resolve()}\"',\n        ])\n\n        self.image_magick.run(command)\n</code></pre> </li> <li> <p>The class must define <code>API_DETAILS</code> as a <code>CardDescription</code> object with all attributes defined. This information is what is displayed in the UI.</p> Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom modules.BaseCardType import BaseCardType, Extra, CardDescription\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n\n    API_DETAILS = CardDescription(\n        name='Test',\n        identifier='fancy',\n        example='/path/to/some/preview/image.jpg',\n        creators=['CollinHeist'],\n        source='local',\n        supports_custom_fonts=False,\n        supports_custom_seasons=False,\n        supported_extras=[\n            Extra(\n                name='Extra Value',\n                identifier='extra_val',\n                description='Some extra value!',\n            ),\n        ], description=[\n            'A very Fancy title card.'\n        ]\n    )\n\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n    TITLE_COLOR = 'white'\n    DEFAULT_FONT_CASE = 'source'\n    FONT_REPLACEMENTS = {\n        '\u00e9': 'e',\n        '\u00fc': 'u',\n    }\n\n    __slots__ = ('source_file', 'card_file', 'title_text', 'extra_val')\n\n    def __init__(self,\n        source_file: Path,\n        card_file: Path,\n        title_text: str,\n        extra_val: str,\n        blur: bool = False,\n        grayscale: bool = False,\n        preferences: 'Preferences' = None,\n        **unused,\n    ) -&gt; None:\n\n        super().__init__(blur, grayscale, preferences=preferences)\n\n        self.source_file = source_file\n        self.card_file = card_file\n        self.title_text = title_text\n        self.extra_val = extra_val\n\n\n    def create(self) -&gt; None:\n\n        command = ' '.join([\n            f'convert \"{self.source_file.resolve()}\"',\n            # Resize and apply styles to source image\n            *self.resize_and_style,\n            f'-pointsize 500',\n            f'-gravity center',\n            f'-fill skyblue',\n            f'-annotate +0+0 \"{self.title_text}\"',\n            # Create card\n            *self.resize_output,\n            f'\"{self.output_file.resolve()}\"',\n        ])\n\n        self.image_magick.run(command)\n</code></pre> </li> <li> <p>And finally, the class must define an attribute <code>CardModel</code> class which is a subclass of either the <code>pydantic.BaseModel</code> or any of the <code>app.schemas.card_type.BaseCardModel</code> subclasses - and performs any field validation.</p> Example FancyTitleCard.py<pre><code>from pathlib import Path\nfrom app.schemas.card_type import BaseCardModel\nfrom modules.BaseCardType import BaseCardType, Extra, CardDescription\nfrom modules.Title import SplitCharacteristics\n\nclass FancyTitleCard(BaseCardType):\n\n    API_DETAILS = CardDescription(\n        name='Test',\n        identifier='fancy',\n        example='/path/to/some/preview/image.jpg',\n        creators=['CollinHeist'],\n        source='local',\n        supports_custom_fonts=False,\n        supports_custom_seasons=False,\n        supported_extras=[\n            Extra(\n                name='Extra Value',\n                identifier='extra_val',\n                description='Some extra value!',\n            ),\n        ], description=[\n            'A very Fancy title card.'\n        ]\n    )\n\n    class CardModel(BaseCardModel):\n        extra_val: str # (1)! This is an __example__. More fields will be required.\n\n    REF_DIRECTORY = Path(__file__).parent / 'fancy_files'\n\n    TITLE_CHARACTERISTICS: SplitCharacteristics = {\n        'max_line_width': 20,\n        'max_line_count': 2,\n        'style': 'top',\n    }\n\n    TITLE_FONT = str((REF_DIRECTORY / 'DefaultFont.ttf').resolve())\n    TITLE_COLOR = 'white'\n    DEFAULT_FONT_CASE = 'source'\n    FONT_REPLACEMENTS = {\n        '\u00e9': 'e',\n        '\u00fc': 'u',\n    }\n\n    __slots__ = ('source_file', 'card_file', 'title_text', 'extra_val')\n\n    def __init__(self,\n        source_file: Path,\n        card_file: Path,\n        title_text: str,\n        extra_val: str,\n        blur: bool = False,\n        grayscale: bool = False,\n        preferences: 'Preferences' = None,\n        **unused,\n    ) -&gt; None:\n\n        super().__init__(blur, grayscale, preferences=preferences)\n\n        self.source_file = source_file\n        self.card_file = card_file\n        self.title_text = title_text\n        self.extra_val = extra_val\n\n\n    def create(self) -&gt; None:\n\n        command = ' '.join([\n            f'convert \"{self.source_file.resolve()}\"',\n            # Resize and apply styles to source image\n            *self.resize_and_style,\n            f'-pointsize 500',\n            f'-gravity center',\n            f'-fill skyblue',\n            f'-annotate +0+0 \"{self.title_text}\"',\n            # Create card\n            *self.resize_output,\n            f'\"{self.output_file.resolve()}\"',\n        ])\n\n        self.image_magick.run(command)\n</code></pre> </li> </ol>"},{"location":"card_types/music/","title":"Music Card Type","text":""},{"location":"card_types/music/#music-card-type","title":"Music Card Type","text":"<p>This card design was created by CollinHeist, and is inspired by a music player (Spotify in particular).</p> <p>These cards feature a fully adjustable music timeline, media control buttons, and artwork. This is one of the more complex card types, featuring more than  twenty available extra customizations.</p> Labeled Card Elements <p></p>"},{"location":"card_types/music/#adjusting-the-player-style","title":"Adjusting the Player Style","text":"<p>Above the title text, various kinds of \"album art\" can be added to the Card by adjusting the Player Style extra. This can be <code>basic</code>, <code>artwork</code>, <code>logo</code>, or <code>poster</code>.</p> <p>Automatically Downloading Artwork</p> <p>If the style is set to <code>artwork</code>, backdrops will not be automatically downloaded. You will need to download these manually for the Series.</p> Example <p> </p> <p> </p>"},{"location":"card_types/music/#controls","title":"Controls","text":""},{"location":"card_types/music/#enabling","title":"Enabling","text":"<p>Stylized music control icons / buttons can be added to the Card, if desired, by setting the Control Toggle extra as <code>True</code>.</p> Examples <p> </p>"},{"location":"card_types/music/#coloring","title":"Coloring","text":"<p>If the music controls are enabled, then each individual control icon can be recolored (or omitted completely) with the Control Colors extra.</p> <p>This must be a set of five space-separated colors, where each color will be used on the controls in order.</p> <p>Colors with Spaces</p> <p>All specified colors cannot have spaces. For example, write <code>rgb(1, 1, 1)</code> as <code>rgb(1,1,1)</code>.</p> <p>If a color is given as <code>transparent</code> or <code>none</code>, that control icon will be removed.</p> Examples <p> </p> <p> </p>"},{"location":"card_types/music/#pause-or-play-icon","title":"Pause or Play Icon","text":"<p>The middle icon on the controls can be toggled between a pause and play icon with the Pause or Play Icon extra. If set to <code>watched</code>, then the icon (and Card) will update any time the watched status of the Episode changes.</p> Example <p> </p>"},{"location":"card_types/music/#heart-icon","title":"Heart Icon","text":"<p>A small heart / like icon can also be added to the top right of the player. This icon can be toggled and recolored with extras.</p> <p>Icon Overlap</p> <p>TCM does not implement any logic to prevent the heart icon from overlapping album artwork or title text.</p>"},{"location":"card_types/music/#enabling_1","title":"Enabling","text":"<p>The heart icon is disabled by default, but can be enabled by setting the Heart Toggle extra as <code>True</code>.</p> Example <p> </p>"},{"location":"card_types/music/#coloring_1","title":"Coloring","text":"<p>The heart icon can be recolored in two ways. The edge / stroke of the icon with the Heart Stroke Color extra, and the inside / fill of the icon with the Heart Fill Color extra. These are separated so that the heart can be visible while not appearing \"selected.\"</p> Examples <p>The following shows an adjustment to the Heart Stroke Color.</p> <p> </p> <p>The following shows an adjustment to the Heart Stroke Color and Heart Fill Color extras.</p> <p> </p>"},{"location":"card_types/music/#timeline","title":"Timeline","text":""},{"location":"card_types/music/#coloring_2","title":"Coloring","text":"<p>The color of the filled portion of the timeline can be adjusted with the Timeline Color extra. This only applies to the filled portion - e.g. the percentage - and the \"bubble\".</p> Example <p> </p>"},{"location":"card_types/music/#filled-percentage","title":"Filled Percentage","text":"<p>The filled logic for the timeline is customizable with the Timeline Fill Percentage extra.</p> <p>If this is set to an explicit number - such as <code>0.3</code> - then the timeline will always be that percent filled. The number will be interpreted as a percentage.</p> <p>If this is specified as <code>random</code> (or left as the default) then each Card will utilize a random fill percentage.</p> <p>Finally, this can also be given as a Format String in which case TCM will calculate the percentage for each Card. For example, by setting this extra to <code>{episode_number / season_episode_max}</code>, the timeline percentage will be \"filled\" from 0% to 100% for each season.</p> <p>Common Uses</p> <p>Some common specifications for this percentage are:</p> <ul> <li><code>{episode_number / season_episode_max}</code> - progress the timeline for each season. Meaning the first Episode of the season would start near 0%  filled, and the last Episode would be 100%.</li> <li><code>{absolute_number / series_absolute_max}</code> - progress the timeline for the entire Series. Meaning the first Episode of the Series would start near 0% filled, and the last Episode of the Series would be 100%. This will only work for Series with absolute numbering from Sonarr.</li> </ul> <p>Warning About Format Strings</p> <p>Be careful when specifying a self-calculating format string for the filled percentage for currently airing Series/seasons. If the format specified changes every time a new Episode aires, then all Cards affected by this change will be remade and reloaded for each new Episode.</p>"},{"location":"card_types/music/#player-positioning","title":"Player Positioning","text":""},{"location":"card_types/music/#overall-position","title":"Overall Position","text":"<p>The position of the player can be adjusted by setting Player Position to either <code>left</code>, <code>middle</code> or <code>right</code>.</p> Example <p> </p>"},{"location":"card_types/music/#player-inset","title":"Player Inset","text":"<p>The Player Inset extra allows more fine-tuned control of how far from the  edge of the image to place the player. This is applied to both the horizontal and vertical spacing.</p> Example <p> </p>"},{"location":"card_types/music/#player-width","title":"Player Width","text":"<p>The width of the player can also be adjusted with the Player Width extra. All elements within the player - notably the timeline and any album artwork - are dynamically resized with the specified width.</p> Example <p> </p>"},{"location":"card_types/music/#player-color","title":"Player Color","text":"<p>The background color of the player can be adjusted with the Player Background Color extra.</p> Example <p> </p>"},{"location":"card_types/music/#subtitle-text","title":"Subtitle Text","text":"<p>The text below the title is referred to as the subtitle. This text can be edited via the Album Subtitle extra.</p> <p>This can be set to a Format String to dynamically adjust the text to your liking. Setting it to <code>{\"\"}</code> will remove the subtitle completely. See the full list of available variables here.</p> <p>Common Uses</p> <p>Some common specifications for this are:</p> <ul> <li><code>{series_name}</code> to put the Series name (the default)</li> <li><code>{series_full_name}</code> to put the Series name and year</li> <li><code>{series_name}, Season {season_number}</code> to put the Series name and the season number</li> </ul> Example <p> </p>"},{"location":"card_types/music/#album-image-corner-rounding","title":"Album Image Corner Rounding","text":"<p>To add to the \"album art\" aesthetic, the corners of images are rounded when the Player Style is set to <code>artwork</code> or <code>poster</code>.</p> <p>This can be disabled by setting the Round Album Corners Toggle extra to <code>False</code>.</p> Example <p> </p>"},{"location":"card_types/music/#title-line-truncation","title":"Title Line Truncation","text":"<p>Because the player design does not lend itself very well to extremely long titles, this card automatically truncates titles (with <code>...</code>) which are longer than a set number of lines. This behavior can be modified (or disabled) with the Long Line Truncation extra.</p> <p>Setting this to some number will cut off text after that many lines; and setting this to <code>False</code> will stop truncation altogether.</p> Example <p> </p>"},{"location":"card_types/music/#mask-images","title":"Mask Images","text":"<p>This card also natively supports mask images. Like all mask images, TCM will automatically search for alongside the input Source Image in the Series' source directory, and apply this atop all other Card effects.</p> <p>Example</p> <p> </p>"},{"location":"card_types/negative_space/","title":"Negative Space Card Type","text":""},{"location":"card_types/negative_space/#negative-space-card-type","title":"Negative Space Card Type","text":"<p>This card design was created by CollinHeist, and is based the video transitions in this video by Not David.</p> Labeled Card Elements <p></p>"},{"location":"card_types/negative_space/#text-positioning","title":"Text Positioning","text":"<p>The overall position of both the episode/numeral and title text can be set to the left or right side of the image. This is controlled with the Text Side extra. This can be set to <code>left</code>, <code>right</code>, or <code>random</code>. If set to <code>random</code>, then TCM will randomly select a side when the Card is generated.</p> Examples <p> </p>"},{"location":"card_types/negative_space/#episode-text-adjustments","title":"Episode Text Adjustments","text":"<p>In the Negative Space card, the episode text is the large numeral which is positioned on the side of the image.</p>"},{"location":"card_types/negative_space/#color","title":"Color","text":"<p>The color of the episode text can be adjusted with the Episode Text Color extra. If unspecified, it defaults to matching the font color.</p> Examples <p> </p>"},{"location":"card_types/negative_space/#size","title":"Size","text":"<p>The size of the episode text can be adjusted with the Episode Text Font Size extra. Values above <code>1.0</code> increase the size of the text, and values below <code>1.0</code> decrease it.</p> Examples <p> </p>"},{"location":"card_types/negative_space/#position","title":"Position","text":""},{"location":"card_types/negative_space/#horizontal-shift","title":"Horizontal Shift","text":"<p>The horizontal position of the episode/numeral text can be adjusted with the Episode Text Horizontal Shift extra. Positive values shift the episode text towards the opposite side of the card, and negative ones shift it out.</p> <p>TCM uses a different base horizontal offset for the number based on the first number of the episode text. For example - the number <code>14</code> (starting with <code>1</code>) will be positioned slightly differently than <code>61</code> (starting with <code>6</code>).</p> Examples <p> </p>"},{"location":"card_types/negative_space/#vertical-shift","title":"Vertical Shift","text":"<p>The vertical position of the episode/numeral text can be adjusted with the Episode Text Vertical Shift extra. Positive values shift the episode text down, and negative values shift it up.</p> Examples <p> </p>"},{"location":"card_types/negative_space/#title-text-horizontal-shift","title":"Title Text Horizontal Shift","text":"<p>The horizontal position of the title text can be adjusted with the Title Text Horizontal Shift extra. The</p> Examples <p> </p>"},{"location":"card_types/negative_space/#mask-images","title":"Mask Images","text":"<p>This card also natively supports mask images. Like all mask images, TCM will automatically search for alongside the input Source Image in the Series' source directory, and apply this atop all other Card effects.</p> <p>Example</p> <p> </p>"},{"location":"card_types/notification/","title":"Notification Card Type","text":""},{"location":"card_types/notification/#notification-card-type","title":"Notification Card Type","text":"<p>This card design was created by CollinHeist, and is a relatively simple card which borrows a lot of the design elements of the Tinted Glass card, but was directly inspired by the UI notifications from Palworld.</p> <p>These cards feature two compact rectangular frames which contain the title, season, and episode text. These frames, as well as the text, can be re-positioned, colored, and sized with extras.</p> Labeled Card Elements <p></p>"},{"location":"card_types/notification/#edge-adjustments","title":"Edge Adjustments","text":"<p>The edge element refers to the small colored rectangle on the inner side of the frames.</p>"},{"location":"card_types/notification/#coloring","title":"Coloring","text":"<p>The color of the edge can be adjusted with the Edge Color extra. If the color is set to <code>transparent</code>, then the edge will be removed completely.</p> Examples <p> </p>"},{"location":"card_types/notification/#width","title":"Width","text":"<p>The width of the edge can be adjusted with the Edge Width extra. TCM does not perform any validation to ensure the edge does not overlap the title text.</p> Examples <p> </p>"},{"location":"card_types/notification/#episode-text-adjustments","title":"Episode Text Adjustments","text":"<p>For adjustments, the \"episode text\" refers to the combined season and episode text.</p>"},{"location":"card_types/notification/#color","title":"Color","text":"<p>The color of the episode text can be adjusted with the Episode Text Color extra. If unspecified, this matches the Font color.</p> Examples <p> </p>"},{"location":"card_types/notification/#size","title":"Size","text":"<p>The size of the episode text can be adjusted with the Episode Text Font Size extra. The background notification rectangle size will be dynamically resized to fit the episode text. TCM does not perform any validation to ensure the episode text does not overlap the title text.</p> Examples <p> </p>"},{"location":"card_types/notification/#vertical-position","title":"Vertical Position","text":"<p>The vertical position of the episod text can be adjusted with the Episode Text Vertical Shift extra. Positive values will move the text up, negative values will move the text down. The background rectangle will be moved with the episode text.</p> Examples <p> </p>"},{"location":"card_types/notification/#background-color","title":"Background Color","text":"<p>The background color of the player can be adjusted with the Notification Background Color extra.</p> Examples <p> </p>"},{"location":"card_types/notification/#notification-position","title":"Notification Position","text":"<p>The position of the text can be adjusted by setting Notification Position to either <code>left</code>, or <code>right</code>. This affects the position of both boxes (title and episode text).</p> Example <p> </p>"},{"location":"card_types/notification/#separator-character","title":"Separator Character","text":"<p>If both the season and episode text are displayed on the Card, then a separator character is added between them. This character can be adjusted with the Separator Character extra.</p> Example <p> </p>"},{"location":"card_types/notification/#mask-images","title":"Mask Images","text":"<p>This card also natively supports mask images. Like all mask images, TCM will automatically search for alongside the input Source Image in the Series' source directory, and apply this atop all other Card effects.</p> <p>Example</p> <p> </p>"},{"location":"card_types/shape/","title":"Shape Card Type","text":""},{"location":"card_types/shape/#striped-card-type","title":"Striped Card Type","text":"<p>This card design was created by CollinHeist. These cards feature a shape (of various kinds) which surrounds the title text. The default shape is a diamond, but circles, squares, and two orientations of triangles are also implemented. </p> Labeled Card Elements <p></p>"},{"location":"card_types/shape/#episode-text","title":"Episode Text","text":"<p>The Shape card is different from most other card types in that the episode text is added to the title text. This also applies to custom episode text from the Episode Text Format Card option.</p> <p>By default, the format used for the episode text is <code>{episode_number}.</code> which is then added to the beginning of the title text (unless episode text is hidden).</p>"},{"location":"card_types/shape/#shape-adjustments","title":"Shape Adjustments","text":"<p>The focal point of this card is the \"shape\" element which can be colored, positioned, resized, and changed with various extras.</p>"},{"location":"card_types/shape/#color","title":"Color","text":"<p>The fill color of the shape can abe adjusted with the Shape Color extra. This color does support transparency.</p> <p>Affect on Season Text Color</p> <p>Changing this will also change the color of the season text, unless that color is manually specified - see here.</p> Examples <p> </p>"},{"location":"card_types/shape/#inset","title":"Inset","text":"<p>How far from the edge of the image the shape is drawn can be adjusted with the Shape Inset Extra. This affects the vertical and horizontal spacing if the Text Position is set to anything other than <code>left</code> or <code>right</code>, in which case this only affects the horizontal spacing.</p> Examples <p> </p>"},{"location":"card_types/shape/#shape","title":"Shape","text":"<p>What kind of shape that's displayed can be adjusted with the Shape Extra. This setting allows for \"hard coding\" the shape - e.g. a fixed value of <code>circle</code> will always produce a circle shape; or for some randomization between shapes.</p> <p>If this is specified as <code>random</code>, then a shape will be all available options (<code>circle</code>, <code>diamond</code>, <code>square</code>, <code>down triangle</code>, and <code>up triangle</code>).</p> <p>If specified like <code>random[shape1, shape2, ...]</code>, then a shape will be selected from any of the specified shapes. These must be comma-separated lowercase shapes from the available shape options. Repition is allowed, in which case the given shape will have a proportional probability of being selected.</p> <p>Randomized Shapes</p> <p>If this Extra were specified as <code>random[square, square, square, diamond]</code>, then a square shape would be selected 75% of the time (3/4) while a diamond would be the other 25%.</p> <p>Randomized shape selection is per-card, meaning regenerating the same Card may result in a different shape.</p> Examples <p> </p> <p> </p> <p> </p>"},{"location":"card_types/shape/#size","title":"Size","text":"<p>How large the shape is can be adjusted with the Shape Size Extra. This is a scalar applied to the default size for each shape.</p> <p>For titles which take up multiple lines of text, TCM automatically scales the size of the shape by an additional 30% per line of text. This is in addition to the scalar specified here. Meaning a shape with a specified size of 110% and a two-line title would be effectively 143% (1.30 * 1.10).</p> <p>Potential Sources of Error</p> <p>Setting this to values which are very far from <code>1.0</code> (especially smaller than) can result in odd text placement or the Shape not being drawn at all. This is due to the drawing algorithm in which TCM attempts to check that the shape lines do not overlap the text.</p> Examples <p> </p>"},{"location":"card_types/shape/#stroke","title":"Stroke","text":""},{"location":"card_types/shape/#color_1","title":"Color","text":"<p>Once enabled, the color of the shape stroke can be adjusted with the Shape Stroke Color Extra.</p> Examples <p> </p>"},{"location":"card_types/shape/#width","title":"Width","text":"<p>By default, there is no stroke added to the displayed shape. By setting the Shape Stroke Width to some value greater than 0, a stroke will be added.</p> Examples <p>The stroke is hard to see on the following image (due to the darker coloring). The effect is most prominent on light images.</p> <p> </p>"},{"location":"card_types/shape/#toggle","title":"Toggle","text":"<p>The shape can be completely removed with the Hide Shape Extra. This does not change the text positioning.</p> Examples <p> </p>"},{"location":"card_types/shape/#width_1","title":"Width","text":"<p>How wide (or thick) the shape appears can be adjusted with the Shape Width extra.</p> Examples <p> </p>"},{"location":"card_types/shape/#season-text","title":"Season Text","text":"<p>Unlike most other card types, on the Shape card, the season text is completely separated from the episode text. However, a majority of the Extras found on other card types - e.g. the Episode Text Color, Episode Text Font Size, etc. - are available on this card, they are just for only the season text.</p>"},{"location":"card_types/shape/#color_2","title":"Color","text":"<p>The color of the season text can be adjusted with the Season Text Color extra. By default, this matches the Shape Color extra, but a manually specified color will override that behavior.</p> Examples <p> </p>"},{"location":"card_types/shape/#italics","title":"Italics","text":"<p>The season text can be displayed in two variations (\"standard\" and \"italic\") by adjusting the Italize Season Text Extra.</p> Examples <p> </p>"},{"location":"card_types/shape/#position","title":"Position","text":"<p>The position of the season text relative to the title text can be adjusted with the Season Text Position Extra.</p> Examples <p> </p>"},{"location":"card_types/shape/#size_1","title":"Size","text":"<p>The size of the season text can be adjusted with the Season Text Font Size Extra. This functions identically to the normal font size adjustment.</p> Examples <p> </p>"},{"location":"card_types/shape/#mask-images","title":"Mask Images","text":"<p>This card also natively supports mask images. Like all mask images, TCM will automatically search for alongside the input Source Image in the Series' source directory, and apply this atop all other Card effects.</p> <p>Example</p> <p> </p>"},{"location":"card_types/striped/","title":"Striped Card Type","text":""},{"location":"card_types/striped/#striped-card-type","title":"Striped Card Type","text":"<p>This card design was created by CollinHeist, and was inspired by some of the official artwork for The Rookie.</p> <p>These cards feature a solid color overlay with stripes of rectangles \"cut\" out to expose the underlying Source Image. By default the stripes are randomly placed and sized, but this can be adjusted with an extra. The position of the text can also be adjusted to any of the four corners.</p> Labeled Card Elements <p></p>"},{"location":"card_types/striped/#stripe-adjustments","title":"Stripe Adjustments","text":""},{"location":"card_types/striped/#angle","title":"Angle","text":"<p>The angle of the stripes can also be adjusted with the Stripe Angle extra. A value of 90 degrees will result in the stripes being perfectly vertical, and the \"orientation\" of the stripes can be reversed by specifying angles larger than 90.</p> Examples <p> </p>"},{"location":"card_types/striped/#definition","title":"Definition","text":"<p>Advanced Setting</p> <p>This setting is fairly complicated relative to the other available extras.</p> <p>The specific order, width, and level of randomization of the stripes can be fine-tuned with the Stripe Definition extra.</p> <p>By default, this card selects a random size and then a random width of that size - repeating the process until the card is \"full\" (i.e. no more horizontal space). These pre-defined sizes are \"small\", \"medium\", and \"large\" and have been abbreviated as <code>s</code>, <code>m</code>, and <code>l</code>.</p> <p>This extra supports six different \"kinds\" of unique patterns to control how the stripes are drawn.</p>"},{"location":"card_types/striped/#random-order-random-sizes","title":"Random Order, Random Sizes","text":"<p>Specifying a definition like <code>random[sml]</code> will instruct TCM to randomly select a stripe of the listed sizes in the specified ratio. This means that repeating sizes - e.g. <code>random[sssssml]</code> - will result in those appearing with increased frequency. For example <code>sml</code> will mean all sizes are equally likely, while <code>ssml</code> will mean small stripes are twice as likely as medium or large. The width of each stripe will use the builtin size ranges.</p> Examples <p>Notice how the right-image has a much higher frequency of large (<code>l</code>) stripes.</p> <p> </p> <p>This pattern will always fill the width of the card.</p>"},{"location":"card_types/striped/#random-order-fixed-sizes","title":"Random Order, Fixed Sizes","text":"<p>Specifying a definition like <code>random[100,200]</code> will instruct TCM to randomly select stripes of the listed width in the specified ratio. For example, <code>random[100,200]</code> will result in random stripes of either 100 or 200 pixels wide. Repition is allowed. These must be comma-separated positive values.</p> Examples <p> </p> <p>This pattern will always fill the width of the card.</p>"},{"location":"card_types/striped/#random-order-random-size-ranges","title":"Random Order, Random Size Ranges","text":"<p>Specifying a definition like <code>random[10-20,200-250]</code> will instruct TCM to randomly select stripes of random widths from the specified ranges in the specified ratios. For example: <code>random[10-20,200-250]</code> will result in random stripes of widths between 10 and 20 pixels or 200 and 250 pixels (in equal likelihood). Repition is allowed. These must be comma-separated positive values in which the second value is equal to or greater than the first.</p> Examples <p> </p> <p>This pattern will always fill the width of the card.</p>"},{"location":"card_types/striped/#fixed-order-random-sizes","title":"Fixed Order, Random Sizes","text":"<p>Specifying a definition like <code>sml</code> will instruct TCM to generate stripes in the specified order of random widths. For example: <code>sml</code> will always generate a small, medium, and large stripe (repeated if a <code>+</code> is specified). The width of each stripe will use the builtin size ranges.</p> Examples <p> </p> <p>This pattern will not repeat unless it ends with <code>+</code> - e.g. <code>sml+</code>.</p>"},{"location":"card_types/striped/#fixed-order-fixed-sizes","title":"Fixed Order, Fixed Sizes","text":"<p>Specifying a definition like <code>10,100,400</code> will instruct TCM to generate stripes in the specified order of the specified widths. For example: <code>10,100,400</code> will generate stripes that are 10, 100, and 400 pixels wide (repeated if a <code>+</code> is specified). These must be comma-separated positive values.</p> Examples <p> </p> <p>This pattern will not repeat unless it ends with <code>+</code> - e.g. <code>10,100,400+</code>.</p>"},{"location":"card_types/striped/#fixed-order-random-size-ranges","title":"Fixed Order, Random Size Ranges","text":"<p>Specifying a pattern like <code>10-50,400-800</code> will instruct TCM to generate stripes in the specified order of random widths from the specified ranges. For example: <code>10-50,400-800</code> will result in a stripe between 10 and 50 pixels wide, and another between 400 and 800 pixels wide (repeated if a <code>+</code> is specified). These must be comma-separated positive values.</p> Examples <p> </p> <p>This pattern will not repeat unless it ends with <code>+</code> - e.g. <code>10-50,400-800+</code>.</p>"},{"location":"card_types/striped/#inter-stripe-spacing","title":"Inter-Stripe Spacing","text":"<p>The spacing between sequential stripes can be adjusted with the Inter-stripe Spacing extra.</p> Examples <p> </p>"},{"location":"card_types/striped/#episode-text-adjustments","title":"Episode Text Adjustments","text":"<p>For adjustments, the \"episode text\" refers to the combined season and episode text.</p>"},{"location":"card_types/striped/#color","title":"Color","text":"<p>The color of the episode text can be adjusted with the Episode Text Color extra.</p> Examples <p> </p>"},{"location":"card_types/striped/#size","title":"Size","text":"<p>The size of the episode text can be adjusted with the Episode Text Font Size extra. The boundaries for the stripe height are dynamically adjusted to prevent the stripes from overlapping the episode text.</p> Examples <p> </p>"},{"location":"card_types/striped/#overlay-color","title":"Overlay Color","text":"<p>The color of the solid overlay can be adjusted with the Overlay Color extra. This extra does support transparency.</p> Examples <p> </p>"},{"location":"card_types/striped/#separator-character","title":"Separator Character","text":"<p>If both the season and episode text are displayed on the Card, then a separator character is added between them. This character can be adjusted with the Separator Character extra.</p>"},{"location":"card_types/striped/#mask-images","title":"Mask Images","text":"<p>This card also natively supports mask images. Like all mask images, TCM will automatically search for alongside the input Source Image in the Series' source directory, and apply this atop all other Card effects.</p> <p>Example</p> <p> </p>"},{"location":"development/api/","title":"The API","text":"<p>The TitleCardMaker API is auto-generated, documented, and fully interactable via the <code>/docs</code> and <code>/redoc</code> URLs. These are OpenAPI and ReDoc API documentations. An example of each is shown below:</p> <p> </p> <p>These API endpoints are utilized by the TCM UI to perform all actions, so examples of how these endpoints are utilized can be found by exploring the TCM front-end source code.</p> <p>Contributions to annotate the API and/or the documentation is welcome.</p> <p>Behind the Scenes</p> <p>This documentation is generated by Swagger UI, and ReDoc via the FastAPI module.</p>"},{"location":"development/contributing/","title":"Contributing to TitleCardMaker","text":"<p>This project was created, developed, and is maintained by a solo non-professional-developer, meaning contributions for all parts of the project are welcome and encouraged. If you have any experience with Python, JavaScript, HTML, CSS, Docker, writing good documentation, or are just full of good ideas, please contribute!</p> <p>To contribute, create a fork of the GitHub repository, add your changes, and then submit a Pull Request to the <code>web-ui</code> branch (not <code>master</code>). For documentation, it might be easier to just ping me on Discord.</p> <p>Thanks!</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#accessing-the-code","title":"Accessing the Code","text":"<p>Sponsors of the project will be invited to a private GitHub repository. These steps will walk you through getting the code from that repository.</p> <p>After being invited, you will recieve an email at your GitHub's associated email address, open it and accept the invitation while signed into your GitHub account.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>There are three primary ways to install TitleCardMaker - Docker, Docker Compose, and non-Docker. Docker Compose is generally recommended because it comes with all the requirements (Python, ImageMagick, etc.), and does not require copying any long commands.</p> <p>Unraid users can directly add the container as a \"template\" within the UI.</p>  Docker Compose Docker Non-Docker Unraid <ol> <li> <p>Open a terminal<sup>1</sup> of your choice, and go to your desired install location.</p> Example  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <pre><code>cd \"~/Your/Install/Directory/TitleCardMaker\"\n</code></pre> <pre><code>cd \"~/Your/Install/Directory/TitleCardMaker\"\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory\\TitleCardMaker'\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory\\TitleCardMaker'\n</code></pre> </li> <li> <p>Follow these instructions to get a classic personal access token (PAT). Check the <code>read:packages</code> checkbox in the third section from the top.</p> Why is this necessary? <p>Because the repository is private, accessing the Docker container requires authentication.</p> Security Warning <p>Keep this access code private, as it can be used to access your GitHub account.</p> </li> <li> <p>Store these login credentials in Docker with the following command. Type your GitHub username, and enter the PAT from Step 2 as the password.</p> <pre><code>docker login ghcr.io\n</code></pre> Use a Docker Manager like Portainer, or Watchtower? <p>Some non-standard Docker managers require a different way of authenticating with private registries.</p> <p>See here for Portainer, and here for Watchtower. You will need to follow the instructions specific to your system.</p> </li> <li> <p>Determine your timezone, a full list is available here. You will want to take note of the text in the TZ Identifer column - e.g. <code>America/Los_Angeles</code> - for the next step.</p> </li> <li> <p>Write the following contents to a file named <code>docker-compose.yml</code> in your desired install directory (from Step 1):</p> docker-compose.yml<pre><code>name: titlecardmaker\nservices:\n  tcm:\n    image: \"ghcr.io/titlecardmaker/titlecardmaker-webui:latest\"\n    container_name: titlecardmaker\n    restart: unless-stopped\n    network_mode: bridge\n    ports:\n      - 4242:4242\n    environment:\n      - TZ=America/Los_Angeles # (1)!\n    # (3)\n    volumes:\n      - ~/Your/Install/Directory/TitleCardMaker/config:/config # (2)!\n</code></pre> <ol> <li>Replace this with your timezone.</li> <li>Replace this with your install directory.</li> <li>You may also add add <code>PGID</code>, <code>PUID</code>, and <code>UMASK</code> here as environment variables if you want to control the permissions of TCM.</li> </ol> </li> <li> <p>Create (and launch) the Docker container by executing the following command.</p> <pre><code>docker compose up -d\n</code></pre> Permission Denied? <p>If you get an error saying any variation of permission denied - then you should check the PAT you genered in Step 2 has <code>read:packages</code> permission; and that you typed <code>docker login ghcr.io</code> exactly.</p> </li> </ol> <ol> <li> <p>Open a terminal<sup>1</sup> of your choice, and go to your desired install location.</p> Example  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <pre><code>cd \"~/Your/Install/Directory/TitleCardMaker\"\n</code></pre> <pre><code>cd \"~/Your/Install/Directory/TitleCardMaker\"\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory\\TitleCardMaker'\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory\\TitleCardMaker'\n</code></pre> </li> <li> <p>Follow these instructions to get a classic personal access token (PAT). Check the <code>read:packages</code> checkbox in the third section from the top.</p> Why is this necessary? <p>Because the repository is private, accessing the Docker container requires authentication.</p> Security Warning <p>Keep this access code private, as it can be used to access your GitHub account.</p> </li> <li> <p>Store these login credentials in Docker with the following command. Type your GitHub username, and enter the PAT from Step 2 as the password.</p> <pre><code>docker login ghcr.io\n</code></pre> Use a Docker Manager like Portainer, or Watchtower? <p>Some non-standard Docker managers require a different way of authenticating with private registries.</p> <p>See here for Portainer, and here for Watchtower. You will need to follow the instructions specific to your system.</p> </li> <li> <p>Determine your timezone, a full list is available here. You will want to take note of the text in the TZ Identifer column - e.g. <code>America/Los_Angeles</code> - for the next step.</p> </li> <li> <p>Create (and launch) the Docker container by executing the following command<sup>2</sup> - make sure to replace the install directory and timezone with your directory (from Step 2) and timezone (from Step 6).</p>  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <pre><code>docker run -itd --net=\"bridge\" -v \"~/Your/Install/Directory/TitleCardMaker/config/\":\"/config/\" -e TZ=\"America/Los_Angeles\" -p 4242:4242 --name \"TitleCardMaker\" \"ghcr.io/titlecardmaker/titlecardmaker-webui:latest\"\n</code></pre> <pre><code>docker run -itd --net=\"bridge\" -v \"~/Your/Install/Directory/TitleCardMaker/config/\":\"/config/\" -e TZ=\"America/Los_Angeles\" -p 4242:4242 --name \"TitleCardMaker\" \"ghcr.io/titlecardmaker/titlecardmaker-webui:latest\"\n</code></pre> <pre><code>docker run -itd --net=\"bridge\" -v \"C:/Your/Install/Directory/TitleCardMaker/config\":\"/config/\" -e TZ=\"America/Los_Angeles\" -p 4242:4242 --name \"TitleCardMaker\" \"ghcr.io/titlecardmaker/titlecardmaker-webui:latest\"\n</code></pre> <pre><code>docker run -itd --net=\"bridge\" -v \"C:/Your/Install/Directory/TitleCardMaker/config\":\"/config/\" -e TZ=\"America/Los_Angeles\" -p 4242:4242 --name \"TitleCardMaker\" \"ghcr.io/titlecardmaker/titlecardmaker-webui:latest\"\n</code></pre> User ID, Group ID, and UMASK <p>If you want to set the user and group which TCM is running under, then you may define the <code>PUID</code>, <code>PGID</code>, and <code>UMASK</code> environment variables as needed.</p> Permission Denied? <p>If you get an error saying any variation of permission denied - then you should check the PAT you genered in Step 2 has <code>read:packages</code> permission; and that you typed <code>docker login ghcr.io</code> exactly.</p> </li> </ol> <ol> <li> <p>Follow steps 1-4 of the Docker instructions.</p> </li> <li> <p>At the bottom of the Docker tab of the Unraid interface, click <code>Add Container</code>.</p> </li> <li> <p>Make sure Advanced View is toggled in the top-right corner.</p> </li> <li> <p>Enter the following information - leaving all other options blank or default.</p> Option Value Name <code>TitleCardMaker</code> Repository <code>ghcr.io/titlecardmaker/titlecardmaker-webui:latest</code> Icon URL <code>https://raw.githubusercontent.com/CollinHeist/TitleCardMaker/web-ui/.github/logo.png</code> WebUI <code>http://[IP]:[PORT:4242]/</code> </li> <li> <p>At the bottom of the page, click <code>Add another Path, Port, Variable, Label or Device</code> and enter each of the following (hitting <code>Add</code> after each one):</p> Option Value Config Type <code>Path</code> Name <code>Config</code> Container Path <code>/config</code> Host Path The directory from Step 1 Option Value Config Type <code>Port</code> Name <code>UI</code> Container Port <code>4242</code> Host Port <code>4242</code> Option Value Config Type <code>Variable</code> Name <code>Timezone</code> Key <code>TZ</code> Value The timezone from Step 1 </li> <li> <p>Hit <code>Apply</code>.</p> </li> </ol> <p>Success</p> <p>TitleCardMaker is now accessible at the <code>http://0.0.0.0:4242</code> or <code>http://localhost:4242/</code> URL. It may also be at your LAN IP.</p>"},{"location":"getting_started/#downloading-imagemagick","title":"Downloading ImageMagick","text":"Linux MacOS Windows (Powershell) Windows (Non-Powershell) <p>Depending on your Linux distro, you might be able to use whatever package manager comes installed. Some of the common installations are detailed here. For example, the following command works on Debian and Ubuntu:</p> <pre><code>sudo apt-get install imagemagick\n</code></pre> <p>If this is not available, then you must use Docker.</p> <p>Follow the ImageMagick installation and setup instructions listed here.</p> <p>Download the Windows Binary Release from the ImageMagick website.</p> <p>During the installation, be sure to check the Add application directory to your system path and Install legacy utilities (e.g. convert) boxes. The other options are optional.</p> <p>Download the Windows Binary Release from the ImageMagick website.</p> <p>During the installation, be sure to check the Add application directory to your system path and Install legacy utilities (e.g. convert) boxes. The other options are optional.</p>"},{"location":"getting_started/#downloading-the-code","title":"Downloading the Code","text":"<ol> <li> <p>Open a terminal<sup>1</sup> of your choice, and go to your desired install location.</p> Example  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <pre><code>cd \"~/Your/Install/Directory/\"\n</code></pre> <pre><code>cd \"~/Your/Install/Directory/\"\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory\\'\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory\\'\n</code></pre> </li> <li> <p>Follow these instructions to get a classic personal access token (PAT) so that you can retrieve the TCM code from git. Check the <code>repo</code> scope section. Copy this code.</p> Why is this necessary? <p>Because the repository is private, the <code>git clone</code> command requires authentication. You can download the zipped code from the website, but this makes getting updates difficult.</p> <p>A PAT is required instead of a password because GitHub does not allow passwords to be used from the command line.</p> Security Warning <p>Keep this access code private, as it can be used to access your GitHub account.</p> </li> <li> <p>In your install directory from Step 1, clone the repository with:</p> <pre><code>git clone https://github.com/TitleCardMaker/TitleCardMaker-WebUI.git\n</code></pre> </li> <li> <p>Enter your account Username and the PAT from Step 2. The TCM code will now be downloaded into a subdirectory named <code>TitleCardMaker-WebUI</code>.</p> </li> </ol>"},{"location":"getting_started/#running-titlecardmaker","title":"Running TitleCardMaker","text":"<ol> <li> <p>Enter the TCM installation directory that was just created.</p> Example  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <pre><code>cd \"~/Your/Install/Directory/TitleCardMaker-WebUI\"\n</code></pre> <pre><code>cd \"~/Your/Install/Directory/TitleCardMaker-WebUI\"\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory\\TitleCardMaker-WebUI'\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory\\TitleCardMaker-WebUI'\n</code></pre> </li> <li> <p>Create a subfolder named <code>config</code>.</p> <pre><code>mkdir config\n</code></pre> </li> <li> <p>Run the following commands to install the required Python packages and launch the TCM interface.</p>  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <pre><code>python3 -m pip install uv\n</code></pre> <pre><code>uv run uvicorn app-main:app --host \"0.0.0.0\" --port 4242\n</code></pre> <pre><code>python3 -m pip install uv\n</code></pre> <pre><code>uv run uvicorn app-main:app --host \"0.0.0.0\" --port 4242\n</code></pre> <pre><code>python3 -m pip install uv\n</code></pre> <pre><code>uv run uvicorn app-main:app --host \"0.0.0.0\" --port 4242\n</code></pre> <pre><code>python3 -m pip install uv\n</code></pre> <pre><code>uv run uvicorn app-main:app --host \"0.0.0.0\" --port 4242\n</code></pre> </li> <li> <p>You should see an output like this:</p> <pre><code>INFO:     Started server process [17385]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://0.0.0.0:4242 (Press CTRL+C to quit)\n</code></pre> </li> </ol> Interface not accessible? <p>If your log shows</p> <pre><code>INFO:     Application startup complete.\n</code></pre> <p>And neither the <code>http://0.0.0.0:4242</code>, <code>http://localhost:4242</code>, or your local IP address URL load into the TCM UI, then replace the <code>0.0.0.0</code> part of the previous command with your local IP address - e.g. <code>192.168.0.10</code>. If you still have issues, reach out on the Discord.</p>"},{"location":"getting_started/#getting-started_1","title":"Getting Started","text":"<p>The following pages of the tutorial are designed to walk you through all of the basics of using TitleCardMaker. It covers each step between installing TCM up through creating example Title Cards. You can skip directly to Configuring Connections.</p> <p>It is designed for completely new users of TCM, but is still helpful for those migrating from TCM v1.0 (the command line tool). For more detailed information about specific aspects of TitleCardMaker, look at the User Guide.</p> <ol> <li> <ul> <li>For Linux, I will assume you know what a Terminal is </li> <li>For Mac users, this is <code>Terminal</code> and can be found via the Spotlight</li> <li>For Windows users, this is <code>Command Prompt</code> or <code>PowerShell</code>. Both can be accessed from the search menu</li> </ul> <p>\u21a9\u21a9\u21a9</p> </li> <li> <p>The exact purpose of this command breaks down as follow: <pre><code>docker run -itd ^ # (1)!\n    --net=\"bridge\" ^ # (2)!\n    -v \".../config\":\"/config/\" ^ # (3)!\n    -e TZ=\"America/Los_Angeles\" ^ # (4)!\n    -p 4242:4242 ^ # (5)!\n    --name \"TitleCardMaker\" ^ # (6)!\n    \"ghcr.io/collinheist/titlecardmaker-webui:latest\"\n</code></pre></p> <ol> <li>Launch the container in the background.</li> <li>Ensure that TCM has access to the ports of your other Docker containers.</li> <li>Make the specified directory available inside the container.</li> <li>Set the internal timezone equal to your local timezone.</li> <li>Make the TCM WebUI accessible at port 4242 on your machine.</li> <li>Name the container TitleCardMaker.</li> </ol> <p>\u21a9</p> </li> </ol>"},{"location":"getting_started/add_series/","title":"Adding a Series","text":"<p>Example Series</p> <p>I'll be referring to Better Call Saul as example Series. If you do not have this Series in your server, you can add it (and remove it later if needed), or just pick an entirely different Series.</p> <p>Now that TitleCardMaker has established connections to all of your servers, it is time to begin the actual Title Card creation. TCM will only create Cards for Series that have been added - this step is to showcase how to do this manually.</p> <p>Automatically Adding Series</p> <p>Manually adding Series is not the typical use-case for TCM, as adding an entire server's worth of Series would be extremely tedious. Automatically adding Series is covered in the next step.</p> <ol> <li> <p>Navigate back to the TitleCardMaker homepage - this can be done by clicking  <code>Series</code> from the side navigation bar, or hitting Shift + H (when a text box is not selected).</p> </li> <li> <p>On the left-hand side bar, a navigation menu labeled  <code>Add</code> should appear. Click this to go to the \"Add Series\" page where you can add both Series and Blueprints.</p> </li> <li> <p>For this tutorial, we'll be adding and customizing Better Call Saul. Under <code>Browse Series</code>, type Better Call Saul in the search bar and click Search.</p> <p>Search Source</p> <p>If your default search connection is Emby, Jellyfin, or Plex and you don't have Better Call Saul in your server, you can choose a different connection, or just search TMDb.</p> Sonarr Posters Not Loading <p>If the posters in your search results are not loading (all black), this is a result of Sonarr rejecting TCM's API request to view the poster. You can either disable authentication for local addresses within Sonarr (if using TCM locally), or just ignore this.</p> </li> <li> <p>TCM will now query your selected connection for all Series which match that name. Better Call Saul should be the first result. Before you click anything, you may select any media server libraries you want associated with this Series.</p> <p>Example Libraries</p> <p>If I had Better Call Saul in a server under two libraries, then I could select either or both libraries in the dropdown so that TCM knows to load Cards into those libraries.</p> <p>If I did not have Better Call Saul in any of my servers, then I can leave this blank. This can always be changed later.</p> </li> <li> <p>Click the search result and TCM will begin processing it. While you are on this page, scroll down to <code>Browse Blueprints</code> section at the bottom of the page.</p> </li> <li> <p>Type Better Call Saul in the Blueprint search field and click Browse Blueprints. TCM will display all available Blueprints for this Series - at the time of writing, there are 3. For the purposes of this tutorial we will not be importing these, instead we'll be customizing the Cards ourselves. But keep in mind this is one way to find Blueprints.</p> What are Blueprints? <p>Blueprints are described in greater detail here, but in-short: they are pre-made Title Card configurations that include everything needed to made Cards in a given style. This includes Fonts, Templates, Series customizations, etc.</p> </li> <li> <p>Once TCM has finished processing the Series, go to the Better Call Saul Series page in one of a few ways:</p> <ol> <li> <p>Click the Search box in the top left corner, then search for and select Better Call Saul.</p> <p>Keyboard Shortcut</p> <p>You can enter the Search box by typing F or S (for <code>f</code>ind and <code>s</code>earch) anywhere in TCM (when a textbox is not selected).</p> </li> <li> <p>Return to the home page by clicking the  <code>Series</code> button on the left navigation bar, find Better Call Saul and click either the View button or the Series name.</p> </li> </ol> </li> <li> <p>Click the <code>Card Configuration</code> tab. In the <code>Font</code> dropdown, select the <code>Better Call Saul</code> font we created earlier. This assigns this custom font (and all of it's associated settings) to Better Call Saul. Scroll down and click Save.</p> </li> </ol> <p>Success</p> <p>You've now manually added a Series to TCM, as well as assigned a custom font. After the tutorial is completed you can review the cards created for BCS and see how this font is applied.</p>","tags":["Tutorial","Series"]},{"location":"getting_started/creating_cards/","title":"Creating Title Cards","text":"<p>Under Construction</p> <p>This documentation is actively being developed.</p> <p>There has been a lot of preamble, but the core of TitleCardMaker is making Title Cards. We'll be creating Title Cards in order to showcase the effects of our Template, as well as show how these Cards can be further customized.</p> <p>Example Series</p> <p>This part of the tutorial will refer to Breaking Bad as the example Series.  Those who decided to Sync a Series other than Breaking Bad can still follow these steps, just apply them to whatever Series you chose.</p>","tags":["Tutorial","Title Cards"]},{"location":"getting_started/creating_cards/#episode-data","title":"Episode Data","text":"<ol> <li> <p>Go to the Breaking Bad Series configuration page - you can quickly access it by searching for the title in the top left search bar (next to the TCM logo).</p> </li> <li> <p>At the top of the page is a set of buttons where many global actions can be performed. However, in this case, open the <code>Episode Data</code> tab in the middle of the page and click the Refresh button. TCM will now query your global Episode Data Source for any new Episodes (although this is also done when you first add a Series to TCM).</p> <p>Scheduled Task</p> <p>Refreshing Episode data happens automatically as a scheduled task, unless the Series is marked as Unmonitored.</p> </li> </ol>","tags":["Tutorial","Title Cards"]},{"location":"getting_started/creating_cards/#source-images","title":"Source Images","text":"<ol> <li> <p>Open the \"Files\" tab. This tab shows image information for all Source Images for each Episode of the Series. Since we just added Breaking Bad, all images should show as missing.</p> </li> <li> <p>Under Source Images, for Season 1 Episode 1, click the browse  icon. This will launch a browser for all Source Images on TMDb. Clicking any image will request TCM download it and store it inside the Source Image directory. Download any image.</p> Image Resolution <p>In the corner of each image is a small ribbon that indicates the resolution of the image.</p> <p>When manually browsing the images on TMDb, your global minimum resolution is ignored.</p> <p></p> </li> <li> <p>Close the image browser. The file for that Episode should now be filled in with Source Image information.</p> <p>Scheduled Task</p> <p>Downloading Source Images happens automatically as a scheduled task, unless the Series is marked as Unmonitored.</p> </li> </ol>","tags":["Tutorial","Title Cards"]},{"location":"getting_started/creating_cards/#title-cards","title":"Title Cards","text":"<ol> <li> <p>At the top of the page, click Create Title Cards.</p> </li> <li> <p>After waiting a small while for TCM to have created a few Cards, go to the Title Cards section on the Files tab and expand the View Images accordion.</p> </li> <li> <p>You should see that Title Cards have been created using the Tinted Frame card type.</p> </li> <li> <p>Back in the Episode Data tab, click the  icon under the Extras &amp; Translations column for Season 2 Episode 1. In that window, change the Bottom Element input to <code>omit</code>, hit Save and close out the window.</p> </li> <li> <p>Close Click Create Title Cards again. This Card should be remade with no logo in the bottom position, overriding what was placed in the Template.</p> Why did the Template not apply? <p>Any Episode-level customizations override Series-level customizations.</p> <p>Because we entered this extra for the Episode, the extra from the Series' Template is completely ignored.</p> </li> </ol>","tags":["Tutorial","Title Cards"]},{"location":"getting_started/creating_cards/#cleanup","title":"Cleanup","text":"<p>The substantive part of the tutorial is over, and I recommend removing cleaning up the artifacts from the tutorial. These are:</p> <ul> <li>Delete the Template</li> <li>Delete (or edit) the Sync</li> <li>Set the scheduler task interval to something sensible</li> <li>If you want to use different Cards, then the Series and Fonts can also be deleted.</li> </ul> <p>Tutorial Completed</p> <p>With that finished, you have successfully grabbed Episode data, downloaded Source Images (manually and automatically), created Title Cards, seen how Template Filters apply, as well as observed the effects of overriding card creation on an Episode-level.</p> <p>These are all the major components of TCM, and mark the end of the tutorial. If you have any other questions, you can browse this documentation or reach out for help on the Discord.</p> <p>What's Next?</p> <p>For most users, the next step is to create a Sync that doesn't just Sync the example Series, but instead all (or large portions) of your Series. Review Creating the First Sync for a reminder on how to create Syncs.</p> <p>See the User Guide for detailed guides on each part of TCM.</p>","tags":["Tutorial","Title Cards"]},{"location":"getting_started/creating_templates/","title":"Creating Templates","text":"<p>Templates are a critical component of quickly customizing your TitleCardMaker setup. A Template contains a set of customized settings, and any number of Templates can be assigned to a Sync, Series, or Episode.</p> <p>For this tutorial we'll be creating a Template, and in a later step we'll apply this automatically with a Sync.</p> <p>Setting Priority</p> <p>Template settings always take priority over any global settings, unless the Template value is unset - i.e. left blank.</p> <ol> <li> <p>Navigate to the Template page by clicking  <code>Templates</code> from the side navigation bar.</p> </li> <li> <p>Create a new Template by clicking the Create New Template button.</p> </li> <li> <p>Expand the created Template by clicking the accordion called \"Blank Template\".</p> </li> <li> <p>Rename the Template \"Tinted Frame\"</p> </li> <li> <p>Under \"Card Settings\" change the card type to \"Tinted Frame\". </p> Don't see Tinted Frame? <p>If you added this card type to your global list of excluded card types then it will not appear. I recommend removing it and continuining with the tutorial.</p> </li> <li> <p>Scroll down to \"Translations and Extras\" and find the tab labeled \"Tinted Frame\".</p> </li> <li> <p>Find the input labeled \"Bottom Element\" enter the value as <code>logo</code>.</p> What are Extras? <p>Extras are a way of overriding or customizing specific components of a Title Card. Extras are typically card type specific - and in this case the Tinted Frame card allows changing the bottom element to a Logo (from the season and episode text).</p> <p>Below most extras is a tooltip which often describes the available options and default value for that extra. If you want more detail, or a specific example, refer to the card's documentation.</p> </li> <li> <p>Hit <code>Save Changes</code>.</p> </li> </ol> <p>Template Created</p> <p>You have now successfully created a Template. When applied, this will set the card type to the Tinted Frame card, and use a logo in the bottom element.</p> <p>We'll use this later in the tutorial.</p>","tags":["Tutorial","Templates"]},{"location":"getting_started/custom_font/","title":"Creating a Font","text":"<p>One main feature of TitleCardMaker is the ability to customize the fonts used on title cards. This can provide an extra level of style and cohesion to your server, but is also completely optional if you like the default fonts used on all the cards.</p> <p>There are two classifications of fonts in TCM - named and un-named. Named fonts are created in the  <code>Font</code> page within TCM; while un-named fonts can be added directly to a Series or Episode. Aside from that, the only differences between these two are that named fonts can use custom font files and character replacements in addition to metrics like font size, spacing, etc.; while unnamed fonts can only adjust metrics.</p> <p>For this tutorial we'll create be creating a named font for Better Call Saul that look like this (in particular the font used for the title text <code>Nacho</code>):</p> <p></p> <ol> <li> <p>Navigate to the font page by clicking  <code>Fonts</code> from the side navigation bar.</p> </li> <li> <p>Create a new font by clicking the Create New Font button.</p> </li> <li> <p>Expand the created font by clicking the accordion called \"Custom Font\".</p> </li> <li> <p>Rename the font \"Better Call Saul\"</p> </li> <li> <p>In the \"Title Color\" field, put <code>#FFFF61</code>.</p> <p>Colors</p> <p>TitleCardMaker (through ImageMagick) supports multiple styles of colors. The above color is an RGB Hexcode, but is equivalent to the following:</p> <ul> <li><code>rgb(255, 255, 97)</code> - meaning Red Green Blue</li> <li><code>rgba(255, 255, 97, 0%)</code> - meaning Red Green Blue Alpha</li> <li><code>hsl(60, 100%, 69%)</code> - meaning Hue Saturation Lightness</li> </ul> <p>And if this color had a \"name\" - like <code>yellow</code> - we could use that as well.</p> <p>You can use an online tool like this to switch between the color types.</p>  MacOS Color Picker <p>If you are on MacOS, there is a very useful built-in color \"picker\". You can access this by opening <code>Digital Color Meter</code> from Spotlight. It will show you the RGB values of any pixel on screen, and these can be directly entered into an <code>rgb()</code> color code.</p> </li> <li> <p>In the \"Text Case\" dropdown, select <code>Source</code>.</p> What does this mean? <p>The text case is what case to apply to the title text. E.g. uppercase, lowercase, etc. The source case tells TCM to take the title directly as it comes from the episode data source (the actual title) and to not modify it.</p> </li> <li> <p>Download this font.</p> </li> <li> <p>In the \"Font\" file input, click <code>Browse</code> (or your Browser equivalent) and then select the file you just downloaded.</p> </li> <li> <p>Click Save Changes to save your changes and upload the file.</p> <p>The Font File</p> <p>Behind the scenes, TCM will download the font file you just uploaded, and store it internally (in your asset directory) - so you can now delete it from your downloads folder without breaking its link to TCM.</p> </li> </ol> <p>Custom Font Created</p> <p>You have successfully created a custom named font for use later in the tutorial.</p> <p>Although we did not use a majority of these font customizations, this is largely due to the specific font file we're using. Some fonts require a lot more tinkering to get the perfect look. All of the available options are described here.</p>","tags":["Tutorial","Fonts"]},{"location":"getting_started/import_settings/","title":"Import TitleCardMaker YAML Settings","text":"<p>Applicability</p> <p>This page is only applicable to users who have old YAML preferences files from previous TitleCardMaker installations. New users should skip this.</p> <p>Recommendation</p> <p>Unless you are really against filling out text boxes, I strongly recommend skipping any YAML importing. It is generally more error-prone, and sometimes even slower than entering the info manually.</p> <p>For users migrating to the Web UI from TCM v1 (the command-line interface), some of the following configuration steps can be skipped by importing your Preferences YAML file.</p> <ol> <li> <p>In the TitleCardMaker Web Interface, open the <code>Importer</code> from the left-hand side navigation bar.</p> </li> <li> <p>Scroll down to the YAML section of this page. You can now copy and paste your entire Preferences YAML file in the text box.</p> </li> <li> <p>There are three checkboxes that toggle which settings TCM should parse while importing YAML. A summary of what each box enables is below:</p> Global OptionsConnectionsSyncs <pre><code>options:\n    source: # ...\n    card_dimensions: # ...\n    card_extension: # ...\n    card_type: # ...\n    episode_data_source: # ...\n    filename_format: # ...\n    image_source_priority: # ...\n    season_folder_format: # ...\n    sync_specials: # ...\n\nplex: # (1)\n    watched_style: # ...\n    unwatched_style: # ...\n</code></pre> <ol> <li>Parses the <code>emby</code>, <code>plex</code>, or <code>jellyfin</code> section for this.</li> </ol> <pre><code>emby:\n    url: # ...\n    api_key: # ...\n    username: # ...\n    verify_ssl: # ...\n    filesize_limit: # ...\n\njellyfin:\n    url: # ...\n    api_key: # ...\n    username: # ...\n    verify_ssl: # ...\n    filesize_limit: # ...\n\nplex:\n    url: # ...\n    token: # ...\n    verify_ssl: # ...\n    integrate_with_pmm_overlays: # ...\n    filesize_limit: # ...\n\nsonarr:\n    url: # ...\n    api_key: # ...\n    verify_ssl: # ...\n\ntmdb:\n    api_key: # ...\n    minimum_resolution: # ...\n    skip_localized_images: # ...\n    logo_language_priority: # ...\n</code></pre> <pre><code>emby:\n    sync: # ...\n\njellyfin:\n    sync: # ...\n\nsonarr:\n    sync: # ...\n\ntmdb:\n    sync: # ...\n</code></pre> What settings are not imported? Why? <p>There are a lot of changes between TCM v1 and v2 - because of this, some settings are no longer applicable, and as such are not imported. These are:</p> The list of Series YAML files (<code>options</code>, <code>series</code>) <p>TitleCardMaker no longer reads YAML files for lists of Series to create Title Cards for. However, these files can be imported.</p> Execution mode (<code>options</code>, <code>execution_mode</code>) <p>TitleCardMaker now executes all primary tasks on separate, schedulable, intervals. The concept of the two different execution modes is no longer applicable.</p> Font validation (<code>options</code>, <code>validate_fonts</code>) <p>This feature was hardly ever disabled, as there is very little reason to do so. Font validation is always enabled.</p> Various Sync options <p>Since TCM no longer Syncs to files, a lot of old Sync settings are no longer applicable. These are <code>file</code>, <code>mode</code>, <code>compact_mode</code>, and <code>yaml</code> <code>exclusions</code>.</p> Archives <p>Currently, Archives are completely removed from TCM v2 due to their complexity and relatively niche use.</p> ImageMagick container name <p>The ability to specify a standalone ImageMagick container to use was not used, and added needless complication. So parsing these options is no longer necessary.</p> </li> <li> <p>If you plan on importing Sync data, and you have any <code>add_template</code> specifications, you first need to create those Templates so that TCM can assign them to the imported Syncs. See here for an introduction to creating Templates. Make sure the Template name exactly matches the name in your Sync.</p> </li> <li> <p>After selecting your desired import options, click the <code>Submit</code> button to start the import process.</p> </li> </ol>"},{"location":"getting_started/local/","title":"Local Installation","text":"<p>Linux Compatability</p> <p>Some Linux distros either do not support ImageMagick - which is a requirement for TitleCardMaker. In this case the Docker installation is required.</p> <p>Installing TitleCardMaker locally, instead of in a Docker container, requires a few additional pieces of software, these are:</p> <ul> <li>Python</li> <li>git</li> <li>Pip</li> <li>Pipenv</li> <li>ImageMagick</li> </ul> <p>The installation of these, as well as TitleCardMaker itself, will be covered below.</p>","tags":["Tutorial"]},{"location":"getting_started/local/#installing-python","title":"Installing Python","text":"Python Already Installed? <p>If you believe Python is already installed, you can quickly check this (and that you have a suitable version), by running the following command:</p> <pre><code>python3 --version\n</code></pre> <p>This should output at least <code>Python 3.9</code>, ideally <code>3.11</code> or higher.</p>  Linux MacOS Windows <p>Given the wide diversity of Linux Distros, it is not feasible to cover the installation of Python in all circumstances. This guide covers some common installation methods.</p> <p>Python comes pre-installed on MacOS, but it can be updated with Homebrew by running the following command:</p> <pre><code>brew update &amp;&amp; brew upgrade python\n</code></pre> <ol> <li>Go to the Python website, and download the installer for the latest version of Python 3.10.</li> <li>Run the installer, and make sure to select the <code>Add to PATH</code> checkbox  during installation.</li> <li>Enable PowerShell scripts by following these instructions.</li> </ol>","tags":["Tutorial"]},{"location":"getting_started/local/#installing-git","title":"Installing git","text":"Git Already Installed? <p>If you believe git is already installed, you can quickly check this by running the following command:</p> <pre><code>git --version\n</code></pre>  Linux MacOS Windows <p>Follow these distro-specific instructions.</p> <pre><code>brew install git\n</code></pre> <ol> <li>Download the 64-bit standalone installer from here.</li> <li> <p>Run the installer, and click through until you get to the \"Choosing the default editor used by Git\" step.</p> <p>Recommendation</p> <p>I recommend changing the default editor to something other than Vim (such as Sublime Text, Notepad++, etc.).</p> </li> <li> <p>Continue clicking through until you get to the \"Adjusting your PATH environment\" step and make sure that the (Recommended) option of \"Git from the command line and also from 3rd-party software\" option is selected.</p> </li> </ol>","tags":["Tutorial"]},{"location":"getting_started/local/#upgrading-pip","title":"Upgrading Pip","text":"<p>Execute the following command:</p> <pre><code>python3 -m pip install --upgrade pip\n</code></pre>","tags":["Tutorial"]},{"location":"getting_started/local/#installing-pipenv","title":"Installing Pipenv","text":"<p>TitleCardMaker uses <code>pipenv</code> to install the external Python libraries that are required. Install pipenv by executing the following command:</p> <pre><code>pip3 install pipenv\n</code></pre> <p>Then install the required libraries (dependencies) by executing:</p> <pre><code>$ pipenv install\n</code></pre> <p>Command Failure</p> <p>If this command fails, it is possible <code>pipenv</code> has not been added to your PATH. Retry this by prefacing the command with <code>python3 -m</code>, like so:</p> <pre><code>python3 -m pipenv install\n</code></pre>","tags":["Tutorial"]},{"location":"getting_started/local/#installing-imagemagick","title":"Installing ImageMagick","text":"<p>ImageMagick is the image manipulation and creation library that TCM uses to create the Title Cards.</p>  Linux MacOS Windows <p>Depending on your Linux distro, you might be able to use whatever package manager comes installed. Some of the common installations are detailed here. It is also worth checking the ImageMagick website here.</p> <p>If there is no pre-installed package, and you don't want to use the Docker container, then you can build ImageMagick yourself. This process is much more complicated and error-prone, but is described here.</p> <p>Execute the following command:</p> <pre><code>brew install imagemagick\n</code></pre> <ol> <li>Download the Windows Binary Release from here.</li> <li>Follow the installer, be sure to check the <code>Add application directory to your system path</code> and the <code>Install legacy utilities (e.g. convert)</code> checkboxes during installation.</li> </ol> <p>Verify it is installed by executing the following:</p> <pre><code>magick logo: logo.gif\n</code></pre> <p>This should create a <code>logo.gif</code> file of the ImageMagick wizard in that directory.</p>","tags":["Tutorial"]},{"location":"getting_started/local/#launching-titlecardmaker","title":"Launching TitleCardMaker","text":"<p>With all the required packages and software installed, you are ready to launch TitleCardMaker. This can be done by executing the following command:</p> <pre><code>$ pipenv run uvicorn app-main:app --host \"0.0.0.0\" --port 4242\n[DEBUG] Dumped Preferences to \"[...]/TitleCardMaker/config/config.pickle\"..\nINFO:     Started server process [4072]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://0.0.0.0:4242 (Press CTRL+C to quit)\n</code></pre> <p>This launches the TitleCardMaker web interface, and you will be able to access it by going to <code>http://0.0.0.0:4242</code> or <code>http://localhost:4242</code> in a browser. </p> <p>Success</p> <p>Installation is complete, and TitleCardMaker is ready to be configured.</p>","tags":["Tutorial"]},{"location":"getting_started/scheduler/","title":"Rescheduling Tasks","text":"<p>TitleCardMaker runs all core tasks on schedulable intervals. The default intervals for each task is typically sufficient for most use-cases, but TCM allows these to be adjusted to any arbitrary interval.</p> <p>For this part of the tutorial, we'll be adjusting the interval for how often all Syncs are run. </p> <ol> <li> <p>Navigate to the Scheduler page by clicking Setings, then :fontawesome-solid-stopwatch <code>Scheduler</code> from the side navigation bar.</p> </li> <li> <p>Find the task description that reads \"Run all defined Syncs, adding any new Series\".</p> </li> <li> <p>In the \"Frequency\" column, replace the existing <code>6 hours</code> text with <code>4 hours 30 minutes 20 seconds</code>.</p> Why this interval? <p>This is a completely arbitrary interval, and was chosen just to show how any different interval units can be utilized.</p> </li> <li> <p>Click the Save Changes button.</p> </li> </ol> <p>Success</p> <p>You have now successfully change the execution interval for a Task within TCM. This exact procedure can be followed to change any Task interval.</p>","tags":["Tutorial","Scheduler"]},{"location":"getting_started/settings/","title":"Settings","text":"<p>For most users the default Settings can be left as-is with the exception of the Episode Data Source and Image Source Priority settings, which must be set. If you'd like to adjust these, additional detail can be found here.</p> <p>I also recommend clicking through the various options of the Default Card Type dropdown and picking your favorite style. The most popular choices are the Tinted Frame and Standard.</p> <p>For the purposes of this tutorial, the recommended settings can be found in the user guide.</p> <ol> <li> <p>Only include the Connections which you are personally using.\u00a0\u21a9</p> </li> <li> <p>Feel free to reduce this to some ratio of 16:9 (e.g. 1600:900) if you want to save storage space (at the minor cost of image fidelity). Increasing this is not recommended.\u00a0\u21a9</p> </li> </ol>","tags":["Tutorial","Global Settings"]},{"location":"getting_started/terminology/","title":"Terminology","text":"<p>TitleCardMaker uses many specific terms throughout this documentation and within TCM itself. Most of these will be explained as your progress through the tutorial, but to help alleviate some confusion (and to serve as a reference), here are the core concepts:</p> Title Card <p>The core \"thing\" which TCM revolves around. These are customized images which are the output of (created by) TCM. These are files which exist on your server in the <code>config/cards</code> directory<sup>1</sup>.</p> Source Image <p>An un-customized \"raw\" image from TMDb, Plex, etc. which TCM takes as inputs. You can think of these as the background of a Title Card on which TCM adds layers of text, images, effects, etc. to create a finished Title Card. These are files which exist on your server in the <code>config/source</code> directory.</p> Card Type <p>A specific type (or layout) of Title Card. Generally, two different card types can be easily visually distinguished, and each card type will have a unique set of customizations (called extras) which can be used to adjust the look of the Card.</p> <p>Example</p> <p>For example, the follow images are two different card types - the Tinted Frame and the Anime card type.</p> <p> </p> <p>As different types, each card allows unique customization. For example, the Tinted Frame card type gives options to adjust aspects of Frame, while the Anime card type has can have Japanese kanji added to it.</p> Font (or Named Font) <p>A set of custom properties - such as color, size, spacing, etc. - which can be created and customized within TCM to change some aspect of the text appearance on a Title Card. Fonts are defined in the TCM database, but any custom Font files live in the <code>config/assets/fonts</code> directory.</p> Template <p>A grouping of Title Card settings which makes editing the appearance of multiple Series at once easier. This can be thought of as a way to copy-paste settings.</p> Sync <p>This can be used as a noun or verb. A Sync (noun) is an object which defines how how to add Series to TCM automatically by communicating with Emby, Jellyfin, Plex, or Sonarr. To Sync (verb) is the act of \"running\" a Sync and communicating with Emby, Jellyfin, Plex, or Sonarr to add new Series.</p> Blueprint <p>A pre-made set of card customizations for a specific Series. These are created and submitted by TCM users with the idea of making and sharing Title Card customizations easier. These can contain Fonts, Templates, and even Source Images. Blueprints are imported directly within TCM.</p> <p>Confused?</p> <p>If a specific idea is not 100% clear to you, it is often far easier to learn by using TCM, rather than reading about it. There is very little downside to simply playing around with TCM. If you'd like, you can also ask for help on the Discord.</p> <ol> <li> <p>By default, this can be changed.\u00a0\u21a9</p> </li> </ol>","tags":["Tutorial"]},{"location":"getting_started/connections/","title":"Configuring Connections","text":"<p>TitleCardMaker can communicate directly with Emby, Jellyfin, Plex, Sonarr, Tautulli, TMDb, and TVDb to automate all aspects of Card creation. Although not 'required' to run TCM, enabling whichever Connections that are applicable to your setup will vastly improve TCM's operation.</p> <p>All Connection information should be entered on the Connections page (the <code>/connections</code> URL), which can be found by clicking <code>Settings</code>, and then <code>Connections</code> from the sidebar within the UI. The following pages contain instructions for setting up each type of Connection.</p> <p>Using Multiple Media Servers</p> <p>Using multiple Media Servers together is possible, using watch-specific styles will require enabling the global multi-library filename setting in order to properly integrate. Carefully read the in-UI help text and the linked documentation before enabling this.</p>"},{"location":"getting_started/connections/emby/","title":"Emby","text":"<p>Optional Step</p> <p>This step is completely optional, and only those with Emby media servers should continue.</p> <p>As a Media Server, Emby can serve as an Episode Data Source, Image Source, and as a location where Title Cards are uploaded to.</p> <ol> <li> <p>Under the Emby section, click the Add Connection button.</p> </li> <li> <p>Give this Connection some descriptive name - e.g. <code>Emby</code> - and enter the root URL to your Emby server including the port.</p> Example URL <p>Although your local IP address will obviously be different, this IP should be like <code>http://192.168.0.29:8096/</code>.</p> </li> <li> <p>Open your Emby interface, and open your server Dashboard by clicking the gear icon in the top right.</p> </li> <li> <p>Scroll to the bottom of the left navigation bar, open <code>Api Keys</code> under <code>Advanced</code>.</p> </li> <li> <p>Click <code>+ New Api Key</code>, and enter some name (like <code>TitleCardMaker</code>).</p> </li> <li> <p>Copy the created key, it should be a 32-character long string of numbers and the letters between A and F.</p> </li> <li> <p>Back within TitleCardMaker, paste the API key from Step 6 into the API key input box and then click Create. TCM will reload the page.</p> </li> <li> <p>After the page has reloaded, expand the Connection form you just created and select the username of the account you would like Episode watch-statuses to be queried from.</p> </li> <li> <p>Click Save Changes.</p> </li> </ol> <p>The above process can be repeated for as many Emby Media Servers as you have. I do recommend specifying a unique name for each Connection so they can be easily distinguished within the UI.</p>","tags":["Tutorial","Emby"]},{"location":"getting_started/connections/jellyfin/","title":"Jellyfin","text":"<p>Optional Step</p> <p>This step is completely optional, and only those with Jellyfin media servers should continue.</p> <p>As a Media Server, Jellyfin can serve as an Episode Data Source, Image Source, and as a location where Title Cards are uploaded to.</p> <ol> <li> <p>Under the Jellyfin section, click the Add Connection button.</p> </li> <li> <p>Give this Connection some descriptive name - e.g. <code>Jellyfin</code> - and enter the root URL to your Jellyfin server including the port.</p> Example URL <p>Although your local IP address will obviously be different, this IP should be like <code>http://192.168.0.29:8096/</code>.</p> </li> <li> <p>Open the Jellyfin WebUI, and open your server settings by clicking the hamburger icon in the top left.</p> </li> <li> <p>Scroll to the bottom, click Dashboard, and then open <code>Api Keys</code> under <code>Advanced</code>.</p> </li> <li> <p>Click the <code>+</code> icon, and enter the name <code>TitleCardMaker</code>.</p> </li> <li> <p>Copy the created key, it should be a 32-character long string of numbers and the letters between A and F.</p> </li> <li> <p>Back within TitleCardMaker, paste the API key from Step 6 into the API key input box and then click Create. TCM will reload the page.</p> </li> <li> <p>After the page has reloaded, expand the Connection form you just created and select the username of the account you would like Episode watch-statuses to be queried from.</p> </li> <li> <p>Click Save Changes.</p> </li> </ol> <p>The above process can be repeated for as many Emby Media Servers as you have. I do recommend specifying a unique name for each Connection so they can be easily distinguished within the UI.</p>","tags":["Tutorial","Jellyfin"]},{"location":"getting_started/connections/plex/","title":"Plex","text":"<p>Optional Step</p> <p>This step is completely optional, and only those with Plex media servers should continue.</p> <p>As a Media Server, Plex can serve as an Episode Data Source, Image Source, and as a location where Title Cards are uploaded to.</p> <ol> <li> <p>Under the Plex section, click the Add Connection button.</p> </li> <li> <p>Give this Connection some descriptive name - e.g. <code>Plex</code> - and enter the root URL to your Plex server including the port.</p> Example URL <p>Although your local IP address will obviously be different, this IP should be like <code>http://192.168.0.29:32400/</code>.</p> </li> <li> <p>Follow these instructions and copy the X-Plex-Token value.</p> </li> <li> <p>Back within TitleCardMaker, paste the X-Plex-Token from Step 3 into the Token input box.</p> </li> <li> <p>If you use Kometa (formerly PMM) episode overlays, toggle the <code>Integrate with Kometa</code> checkbox.</p> </li> <li> <p>Click Create. TCM will reload the page.</p> </li> <li> <p>If you would like to utilize Webhooks or Tautulli to quickly create and load Cards into Plex for new or watched content, see here.</p> </li> </ol> <p>The above process can be repeated for as many Plex Media Servers as you have. I do recommend specifying a unique name for each Connection so they can be easily distinguished within the UI.</p>","tags":["Tutorial","Plex"]},{"location":"getting_started/connections/sonarr/","title":"Sonarr","text":"<p>Optional Step</p> <p>This step is completely optional, and only those with Sonarr servers should continue.</p> <p>Although Sonarr can only serve as an Episode Data Source, it is typically much faster than the other alternatives (especially Emby, Jellyfin, or Plex) and is generally the recommended option for most users.</p>","tags":["Tutorial","Sonarr"]},{"location":"getting_started/connections/sonarr/#connecting","title":"Connecting","text":"<ol> <li> <p>Under the Sonarr section, click the Add Connection button.</p> </li> <li> <p>Give this Connection some descriptive name - e.g. <code>Sonarr 4K</code> - and enter the root URL to your Sonarr server including the port.</p> Example URL <p>Although your local IP address will obviously be different, this IP should be like <code>http://192.168.0.29:8989/</code>.</p> </li> <li> <p>Open the Sonarr WebUI, then open your settings from the left navigation bar.</p> </li> <li> <p>Towards the bottom of the Settings sub-menu, open <code>General</code>.</p> </li> <li> <p>Under the Security subsection, and find and copy the API key - it should be a 32-character long string of numbers and the letters between A and F.</p> Security Warning <p>Keep this API key private, as it can be used to remotely access and modify Sonarr.</p> </li> <li> <p>Back within TitleCardMaker, paste the API key from Step 5 into the API key input box and then click Create. TCM will reload the page.</p> </li> <li> <p>The next step is to add the top-level directories for each of your television libraries to that TitleCardMaker can automatically detect a Series' Library when Syncing from Sonarr. The paths listed here must be as they appear within Sonarr - not your media server. See the following examples for reference.</p> <p>Quick Setup</p> <p>For most users, simply listing the paths, library names, and associated servers for the folders in Sonarr under <code>Settings</code> &gt; <code>Media Management</code> &gt; <code>Root Folders</code> is sufficient.</p> Example Library Paths Example 1Example 2Example 3 <p>Within Plex, I have two libraries called <code>Anime</code> and <code>TV</code> located at <code>/data/media/Anime</code> and <code>/data/media/TV</code> respectively. My Library Paths setting should look like:</p> Media Server Library Name Path Plex Anime /data/media/Anime/ Plex TV /data/media/TV/ <p>Within Jellyfin, I have four libraries called <code>Anime</code>, <code>Anime 4K</code>, <code>TV Shows</code>, and <code>TV Shows 4K</code> - they are located at <code>/data/media/anime</code>, <code>/data/media/anime 4k/</code>, <code>/data/media/tv/</code>, and <code>/data/media/tv 4k</code> respectively. The Library Paths setting should look like:</p> Media Server Library Name Path Jellyfin Anime /data/media/anime/ Jellyfin Anime 4K /data/media/anime 4k/ Jellyfin TV /data/media/TV/ Jellyfin TV 4K /data/media/TV 4k/ <p>Within Emby I have two libraries: <code>TV</code>, and <code>Reality TV</code> located at <code>C:\\TV</code> and <code>K:\\Reality TV</code>; within Plex there are two libraries: <code>Anime</code> and <code>Reality TV</code> located at <code>C:\\Anime</code> and <code>K:\\Reality TV</code> (the same directory as within Emby). The Library Paths setting should look like:</p> Media Server Library Name Path Emby TV C:\\TV Emby Reality TV K:\\Reality TV Plex Anime C:\\Anime Plex Reality TV K:\\Reality TV </li> <li> <p>After entering all the necessary library paths, click Save Changes.</p> </li> </ol>","tags":["Tutorial","Sonarr"]},{"location":"getting_started/connections/sonarr/#webhook-integration","title":"Webhook Integration","text":"<p>For details on setting up this integration, see here.</p>","tags":["Tutorial","Sonarr"]},{"location":"getting_started/connections/tautulli/","title":"Tautulli","text":"<p>Optional Step</p> <p>This step is completely optional, and only those with both Plex media servers and Tautulli should continue.</p> <p>If you do not use Plex or Tautulli, a Sonarr Webhook can be utilized as an alternative - setting this up is covered here.</p> <p>Why Connect to Tautulli?</p> <p>Typically, TitleCardMaker creates and loads Title Cards on an adjustable schedule. However, TCM is able to set up a Notification Agent on Tautulli so that it can notify TCM immediately after new Episodes are available, or an existing Episode has been watched.</p> <p>A similiar integration can be enabled with Sonarr, but that integration only triggers for newly added content, not on watch-statuses.</p> <ol> <li> <p>Within the Plex connection form that has a Tautulli connection, click Create Notification Agent.</p> </li> <li> <p>In the launched window, enter the root URL to your instance of Tautulli.</p> Example URL <p>Although your local IP address will obviously be different, this IP should be like <code>http://192.168.0.29:8181/</code>.</p> </li> <li> <p>Open Tautulli and navigate to the Settings by clicking the   Gear icon in the top right.</p> </li> <li> <p>From the left navigation bar, open the <code>Web Interface</code> settings.</p> </li> <li> <p>Scroll to the bottom, and ensure the <code>Enable API</code> checkbox is checked, then show and copy the generated API key.</p> Security Warning <p>Keep this API key private, as it can be used to remotely access and modify Tautulli.</p> </li> <li> <p>Back within TitleCardMaker, paste the API key from Step 5 into the API key input box.</p> </li> <li> <p>If you want Tautulli to trigger TitleCardMaker when episodes are watched, and not just when episodes are added, then leave the <code>Trigger on Recently Watched</code> checkbox checked. I also recommend entering your username in the username input so that Tautulli is only triggered when you watch content.</p> </li> <li> <p>Click Create Agent.</p> </li> <li> <p>Open Plex (on a computer) and navigate to your server settings via the  Wrench icon in the top right corner.</p> </li> <li> <p>From the left navigation bar, scroll down to <code>Library</code> under the <code>Settings</code> section and take note of your <code>Video Played Threshold</code> setting (this is an Advanced Setting).</p> </li> <li> <p>Back in Tautulli, open the <code>General</code> settings from the sidebar, and find the <code>TV Episode Watched Percent</code> setting. Set this to 1-2% higher than the Plex setting from Step 9.</p> Example Setting <p>For a Plex played threshold of 90%, the appropriate Tautulli setting is 91% or 92%.</p> Why is this Necessary? <p>Because this integration is so fast (typically triggering within 5 seconds of finishing an Episode) - it is imperative that Tautulli triggers TCM to update a Title Card after an Episode's watch-status has had time to update within Plex.</p> </li> </ol> <p>Once created, you can close the box within TCM. Unlike the other Connections, your Tautulli connection details will not be stored (and so will not appear) in TCM - this is because TCM only submits API requests to Tautulli to create an agent. Afterwards, it is Tautulli that sends data to TCM, and so no active connection is required.</p>","tags":["Tutorial","Tautulli"]},{"location":"getting_started/connections/tmdb/","title":"The Movie Database","text":"<p>Optional Step</p> <p>This step is technically optional, but is strongly recommended for all users.</p> <p>The Movie Database (hereafter referred to as TMDb for brevity) is a free, publicly accessible database which  can serve as an Episode Data Source, and is the recommended Image Source due to the  much higher quality (and wider selection) of images compared to the Media Servers. It is also the only Connection which can provided Episode translations, Series logos<sup>1</sup>, backdrops, and posters.</p> <ol> <li> <p>Under the TMDb section, click the Add Connection button.</p> </li> <li> <p>Click the external link  icon next to API Key and open the TMDb Getting Started page.</p> </li> <li> <p>Follow their instructions to generate an API key for yourself. You can put whatever you'd like in the application details (such as TCM, nunya, etc.). Copy the generated API key.</p> Security Warning <p>Keep this API key private, as it can be used to submit API requests on your behalf (although there's no real danger to your TMDb account - I mean who would steal a free API key?).</p> </li> <li> <p>Paste your API key into the API Key input box.</p> </li> <li> <p>Enter your desired minimum image resolution. This is personal preference based on your own quality threshold of images - I personally use <code>800x400</code>. If you truly don't care about image quality, you can enter <code>0x0</code>.</p> What if there are no images above this threshold? <p>If none of the available images are above both the minimum width and height you specify, then TCM will move to the next Connection in your global Image Source Priority.</p> <p>Threshold Application</p> <p>This threshold only applies to automatically-gathered Source Images. Logos, posters, and Source Images selected manually via the UI have no minimum resolution.</p> </li> <li> <p>Check <code>Ignore Localized Images</code> so that TCM rejects Source Images which have assigned languages<sup>2</sup>.</p> </li> <li> <p>Click Create.</p> </li> <li> <p>After the page has reloaded, and if you speak any non-English languages, select these in the order you which TCM to grab logos in.</p> <p>Example and Recommendation</p> <p>Selecting <code>English</code> and <code>Japanese</code> as the only two options, this will prompt TCM to search for logos in English first, and then Japanese if no English logos are available.</p> <p>This is recommended for users who have Anime libraries.</p> </li> </ol> <ol> <li> <p>Technically, Emby and Jellyfin can provide logos as well, however their logos are not browsable.\u00a0\u21a9</p> </li> <li> <p>For more details, see here.\u00a0\u21a9</p> </li> </ol>","tags":["Tutorial","TMDb"]},{"location":"getting_started/connections/tvdb/","title":"The TV Database","text":"<p>Optional Step</p> <p>This step is optional for all users.</p> <p>The TV Database (hereafter referred to as TVDb for brevity) is a free, publicly accessible database which can serve as an Episode Data Source and  Image Source.</p> <ol> <li> <p>Under the TVDb section, click the Add Connection button.</p> </li> <li> <p>Click the external link  icon next to API Key and open the TVDb API page.</p> </li> <li> <p>Follow their instructions to generate an API key for yourself (this will require a TVDb account). Copy the generated API key.</p> Security Warning <p>Keep this API key private, as it can be used to submit API requests on your behalf (although there's no real danger to your TVDb account - I mean who would steal a free API key?).</p> </li> <li> <p>Paste your API key into the API Key input box.</p> </li> <li> <p>Check <code>Include Movies</code> if you do not want TCM to reject Episodes which are also movies (most common for Anime).</p> </li> <li> <p>Enter your desired minimum image resolution. This is personal preference based on your own quality threshold of images. If you truly don't care about image quality, you can enter <code>0x0</code>.</p> What if there are no images above this threshold? <p>If none of the available images are above both the minimum width and height you specify, then TCM will move to the next Connection in your global Image Source Priority.</p> <p>Threshold Application</p> <p>This threshold only applies to automatically-gathered Source Images. Logos, posters, and Source Images selected manually via the UI have no minimum resolution.</p> </li> <li> <p>Click Create.</p> </li> <li> <p>Once the page has reloaded, you may change the <code>Episode Ordering</code> to however you want TCM to grab data from TVDb in. Most users should leave it as <code>Default</code>.</p> <p>Missing Episode Ordering</p> <p>If a non-<code>Default</code> value is selected and a Series does not have the selected ordering, then TCM will be unable to grab any Episode data for that Series.</p> <p>If you want to use separate orderings for separate Series, consider creating multiple TVDb Connections in TCM (these can be use the same API key), changing the ordering for each, and then assigning the appropriate Connection to your Series as-needed.</p> </li> </ol>","tags":["Tutorial","TVDb"]},{"location":"getting_started/docker/","title":"Docker Installation","text":"<p>Pre-Release Instructions</p> <p>These instructions are not applicable while TCM is in pre-release. Please refer to here.</p> <p>Docker is a very convenient way of compartmentalizing a piece of software (TitleCardMaker) from the rest of your host machine - like a very lightweight Virtual Machine. The TCM Container has the benefit of coming pre-packaged with all the required dependent software; making installation much easier and less error-prone.</p> <p>For these reasons, Docker is the recommended installation method for all Operating Systems.</p> <p>For UnRAID and Synology DSM users, there are OS-specific tutorials written to walk you through the installation process. All other systems should follow the standard tutorial. There is also a starter docker compose file.</p>"},{"location":"getting_started/docker/compose/","title":"Docker Compose","text":"<p>Pre-Release Instructions</p> <p>These instructions are not applicable while TCM is in pre-release. Please refer to here.</p> Benefits of Docker <p>For more info on the benefits of Docker, see here.</p> <p>Below is a reference Docker compose snippet which can be modified to launch TitleCardMaker via <code>docker -compose up</code>. Lines which should be reviewed and modified are highlighted.</p> <pre><code>version: '2' # Or 3\nservices:\n  titlecardmaker:\n    image: 'collinheist/titlecardmaker:latest' # (1)!\n    container_name: TitleCardMaker\n    network_mode: bridge\n    volumes:\n      - '\"/docker/titlecardmaker/\":/config/:rw' # (2)!\n    environment:\n      - PGID=99 # (3)!\n      - PUID=100 # (4)!\n      - TZ=America/Los_Angeles # (5)!\n    ports:\n      - '4242:4242'\n    restart: unless-stopped\n    stdin_open: true\n    tty: true\n    # (6)!\n    # depends_on:\n    #   - sonarr\n    #   - plex\n    #   - emby\n    #   - jellyfin\n</code></pre> <ol> <li> <p>Choose <code>:latest</code> or <code>:develop</code>. For most users, I recommend the default <code>latest</code> branch. See here for details.</p> </li> <li> <p>Change <code>\"/docker/titlecardmaker\"</code> to your install directory and leave the <code>/config/:rw</code> part as-is.</p> </li> <li> <p>Change this to your group ID. Likely the same GID as your Media Server or Sonarr container(s).</p> </li> <li> <p>Change this yo your user ID. Likely the same GID as your Media Server or Sonarr container(s).</p> </li> <li> <p>Change this to your timezone. See here in the TZ Identifier column for a reference list.</p> </li> <li> <p>Uncomment these lines as needed if you want the TitlecardMaker container to be dependant upon these services (for a cleaner boot).</p> </li> </ol>"},{"location":"getting_started/docker/docker/","title":"Docker Installation","text":"<p>Pre-Release Instructions</p> <p>These instructions are not applicable while TCM is in pre-release. Please refer to here.</p> Benefits of Docker <p>For more info on the benefits of Docker, see here.</p> <p>For all non-Unraid and Synology DSM users, the TitleCardMaker Docker container can be built and installed via the command line.</p>"},{"location":"getting_started/docker/docker/#installing-docker","title":"Installing Docker","text":"<p>Verify the Docker engine is installed by running the following command:</p> <pre><code>$ docker run --rm hello-world\n---&gt; 100%\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n# etc. \n</code></pre> <p>If you do not see some variation of the above message, double-check your Docker daemon is running, or attempt to fix your Docker install. See the Docker installation instructions.</p>"},{"location":"getting_started/docker/docker/#selecting-a-directory","title":"Selecting a Directory","text":"<p>Identify where you want to store all the TCM data - this will be the SQL database, poster and font files, source images, and Title Cards. This directory will be mounted to <code>/config</code> inside the container. Navigate to this directory from the command line.</p>  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <pre><code>cd \"~/Your/Install/Directory\"\n</code></pre> <pre><code>cd \"~/Your/Install/Directory\"\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory'\n</code></pre> <pre><code>cd 'C:\\Your\\Install\\Directory'\n</code></pre> <p>Replace the example path with your directory.</p>"},{"location":"getting_started/docker/docker/#folder-permissions","title":"Folder Permissions","text":"<p>Ensure this directory has the correct permission so that TCM can read and write to it.</p> <p>For Unix users, you should identify which Group and User you want the container to run under - this is typically the same GID and UID used for your media server or Sonarr Docker containers.</p>  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <p>With the Group and User ID that you would like TCM to execute with, run the following command:</p> <pre><code>sudo chown -R {group}:{user} \"~/Your/Install/Directory\"\n</code></pre> <p>Replace <code>{group}:{user}</code> with the actual group and user names (or IDs) - e.g. <code>99:100</code>.</p> <p>With the Group and User ID that you would like TCM to execute with, run the following command:</p> <pre><code>sudo chown -R {group}:{user} \"~/Your/Install/Directory\"\n</code></pre> <p>Replace <code>{group}:{user}</code> with the actual group and user names (or IDs) - e.g. <code>99:100</code>.</p> <p>Changing the permissions is (generally) not necessary on Windows.</p> <p>Changing the permissions is (generally) not necessary on Windows.</p>"},{"location":"getting_started/docker/docker/#selecting-a-tag","title":"Selecting a Tag","text":"<p>There are two available tags (or branches) for the TCM container - <code>latest</code> and <code>develop</code>.</p> <p>For most users, I recommend the default <code>latest</code> branch. This branch is updated with the most recent public release of TitleCardMaker, and is the most stable option.</p> <p>For users who are okay with the occasional bug, and would like to test out features as they are developed, then choose the <code>develop</code> tag.</p>"},{"location":"getting_started/docker/docker/#creating-the-container","title":"Creating the Container","text":"<p>Take note of your local timezone from here - specifically the TZ Identifier column, e.g. <code>America/Los_Angeles</code>.</p> <p>Finally - pull, create, and launch the Docker container by running the following command.</p> <p>Installation Directory</p> <p>The following command creates the Container from the current directory; so double check you have <code>cd</code>'d into the directory from above.</p>  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <p>Change the value after the <code>=</code> for <code>PGID</code>, <code>PUID</code>, to your Group and User ID from Step 3; <code>TZ</code> to your local timezone, and the tag after <code>titlecardmaker</code> to your tag (<code>latest</code> or <code>develop</code>).</p> <pre><code>docker run -itd \\\n    --net=\"bridge\" \\\n    -v \"$(pwd)\":\"/config/\" \\\n    -e PGID=99 \\\n    -e PUID=100 \\\n    -e TZ=\"America/Los_Angeles\" \\\n    -p 4242:4242 \\\n    --name \"TitleCardMaker\" \\\n    titlecardmaker:latest\n</code></pre> <p>Change the value after the <code>=</code> for <code>PGID</code>, <code>PUID</code>, to your Group and User ID from Step 3; <code>TZ</code> to your local timezone, and the tag after <code>titlecardmaker</code> to your tag (<code>latest</code> or <code>develop</code>).</p> <pre><code>docker run -itd \\\n    --net=\"bridge\" \\\n    -v \"$(pwd)\":\"/config/\" \\\n    -e PGID=99 \\\n    -e PUID=100 \\\n    -e TZ=\"America/Los_Angeles\" \\\n    -p 4242:4242 \\\n    --name \"TitleCardMaker\" \\\n    titlecardmaker:latest\n</code></pre> <p>Change the value after the <code>=</code> to your local timezone, and the tag after <code>titlecardmaker</code> to your tag (<code>latest</code> or <code>develop</code>)</p> <pre><code>docker run -itd `\n    --net=\"bridge\" `\n    -v \"$(pwd)\":\"/config/\" `\n    -e TZ=\"America/Los_Angeles\" `\n    -p 4242:4242 `\n    --name \"TitleCardMaker\" `\n    titlecardmaker:latest\n</code></pre> <p>Change the value after the <code>=</code> to your local timezone, and the tag after <code>titlecardmaker</code> to your tag (<code>latest</code> or <code>develop</code>)</p> <pre><code>docker run -itd ^\n    --net=\"bridge\" ^\n    -v \"%cd%\":\"/config/\" ^\n    -e TZ=\"America/Los_Angeles\" ^\n    -p 4242:4242 ^\n    --name \"TitleCardMaker\" ^\n    titlecardmaker:latest\n</code></pre> <p>Success</p> <p>TitleCardMaker is now accessible at the <code>http://0.0.0.0:4242</code> or <code>http://localhost:4242/</code> URL.</p> Interface not accessible? <p>If your logs (Docker or TCM at <code>/config/logs/maker.log</code>) shows</p> <pre><code>INFO:     Application startup complete.\n</code></pre> <p>And neither the <code>http://0.0.0.0:4242</code> or <code>http://localhost:4242</code> URL loads the TCM UI, then replace the <code>0.0.0.0</code> part of the previous command with your local IP address - e.g. <code>192.168.0.10</code>. If you still have issues, reach out on the Discord.</p>"},{"location":"getting_started/docker/synology/","title":"Synology DSM Docker Installation","text":"<p>Pre-Release Instructions</p> <p>These instructions are not applicable while TCM is in pre-release. Please refer to here.</p> Benefits of Docker <p>For more info on the benefits of Docker, see here.</p> <p>For Synology DSM users, the available Docker manager can be used to easily set up TitleCardMaker with all the necessary Docker variables and paths.</p> <p>Directory Assumptions</p> <p>These instructions assume you have a <code>/docker</code> root folder on your NAS. If this is at a different location, then adjust the listed paths (notable in Step 8b) to your setup. If you do not have a Docker directory, create one.</p> <ol> <li>Login to the DSM Web Interface.</li> <li> <p>If the Docker application is not already installed, follow these steps:</p> <ol> <li>Launch <code>Package Center</code>.</li> <li>Search <code>Docker</code> from the top search bar, install the package with the whale icon.</li> </ol> </li> <li> <p>Launch the Docker application from the main menu.</p> </li> <li>Select <code>Registry</code> from the sidebar, and then search <code>titlecardmaker</code>.</li> <li> <p>Double click the first result (<code>collinheist/titlecardmaker</code>). You will be prompted to choose which branch (or tag) to install, make your selection and continue.</p> Choosing the Right Branch <p>For most users, I recommend the default <code>latest</code> branch. This branch is updated with the most recent public release of TitleCardMaker, and is the most stable option.</p> <p>For users who are okay with the occasional bug, and would like to test out features as they are developed, then choose the <code>develop</code> tag.</p> </li> <li> <p>Go to <code>Images</code>, and once the container has finished downloading, select it and click <code>Launch</code>.</p> </li> <li> <p>Fill out the General Settings</p> Recommended General Settings <p>The container name is completely personal preference, so something like <code>TitleCardMaker</code> is sufficient.</p> <p>Do not execute the container using high privledge.</p> <p>I do not recommend enabling resource limitation, but this is also a personal preference.</p> </li> <li> <p>Select <code>Advanced Settings</code>, and fill out the following:</p> Advanced SettingsVolumeNetworkPort SettingsLinksEnvironment <ol> <li>Check  <code>Enable auto-restart</code></li> </ol> <ol> <li>Add one Folder, navigate to <code>/docker</code>, create a <code>titlecardmaker</code> subfolder - e.g. <code>/docker/titlecardmaker/</code>.</li> <li>In the mount path for <code>docker/titlecardmaker</code>, enter <code>/config/</code>. Your setup should look like this:</li> </ol> <p></p> <p>N/A</p> <ol> <li>Add a port</li> <li>Enter the port settings as <code>4242</code> <code>4242</code> <code>TCP</code>.</li> </ol> <p>N/A</p> <p>Work in Progress</p> <p>This will be added later. # TODO</p> </li> <li> <p>Hit <code>Apply</code>, <code>Next</code>, then <code>Apply</code> again.</p> </li> </ol>"},{"location":"getting_started/docker/synology/#firewall","title":"Firewall","text":"<p>If you have a Firewall established, do the following:</p> <ol> <li>Launch <code>Control Center</code>.</li> <li>Go to the <code>Firewall</code> tab.</li> <li>Select <code>Edit Rules</code> for your current profile.</li> <li>Hit <code>Create</code>.</li> <li>For Ports, toggle <code>Select from a list of built-in applications</code>, then find and enable the TitleCardMaker Docker container.</li> <li>Ensure the Source IP is All, and the Action is Allow.</li> <li>Make sure this new rule is above any base <code>Deny</code> action(s).</li> <li>Hit <code>OK</code>.</li> </ol> <p>Success</p> <p>Installation is complete, and TitleCardMaker is ready to be configured. It can be accessed at <code>http://{server ip}:4242</code>, where <code>{server ip}</code> is the same IP address as your host NAS - e.g. <code>http://192.168.0.19:4242</code>.</p>"},{"location":"getting_started/docker/unraid/","title":"UnRAID Installation","text":"<p>Pre-Release Instructions</p> <p>These instructions are not applicable while TCM is in pre-release. Please refer to here.</p> Benefits of Docker <p>For more info on the benefits of Docker, see here.</p> <p>On UnRAID, the Communnity Apps store can be used to load a template for configuring and launching TitleCardMaker  with all the necessary Docker variables and paths.</p> <ol> <li> <p>Navigate to the UnRAID WebGUI home page for your server.</p> </li> <li> <p>Select the <code>APPS</code> tab from the top toolbar.</p> </li> <li> <p>In the search bar, search for <code>titlecardmaker</code>.</p> </li> <li> <p>Click the first result, and in the actions (just below the container name), click <code>Install</code>.</p> </li> <li> <p>You will be prompted to choose which branch (or tag) to install, make your selection and continue.</p> Choosing the Right Branch <p>For most users, I recommend the default <code>latest</code> branch. This branch is updated with the most recent public release of TitleCardMaker, and is the most stable option.</p> <p>For users who are okay with the occasional bug, and would like to test out features as they are developed, then choose the <code>develop</code> tag.</p> </li> <li> <p>UnRAID will take you to the Docker template, where you can edit the details of the container as you'd like. There are three settings to take note of, all other settings can be adjusted within TitleCardMaker.</p> <ol> <li> <p>The <code>Config Directory</code>. This is where TitleCardMaker will keep all images, files, databases, logs, etc. The default path is recommended.</p> </li> <li> <p>The <code>Group ID</code> (<code>GID</code>). This needs to be valid group ID on your host UnRAID system that has both Read and Write access to the above directories. This is commonly <code>100</code>.</p> </li> <li> <p>The <code>User ID</code> (<code>UID</code>). This needs to be a valid user ID on your host UnRAID system that has both Read and Write access to the above directories. This is commonly <code>99</code>.</p> Why Specify a User and Group? <p>Specifying a specific user and group ID allows TitleCardMaker to launch and run as that user. This is recommended over the alternative of allowing the container to run as the <code>root</code> user, which could theoretically have permission implications. </p> Finding a Specific Group and User ID <p>If you have a specific user on your system you'd like to use, in the UnRAID terminal, type the following command:</p> <pre><code>id {user}\n</code></pre> <p>Replacing <code>{user}</code> with the name of the user you'd like to get the ID's of.</p> </li> </ol> </li> <li> <p>After finalizing your settings, select <code>Apply</code>.</p> </li> <li> <p>UnRAID will begin downloading the Docker container. After it's finished, go back to the <code>DOCKER</code> tab, click the newly created TitleCardMaker container, and then select <code>WebUI</code> from the dropdown.</p> </li> </ol> <p>Success</p> <p>Installation is complete, and TitleCardMaker is ready to be configured.</p>"},{"location":"getting_started/first_sync/","title":"Syncs","text":"<p>Having manually added a Series to TitleCardMaker, it should be obvious this will be tedious for any more than a handful of Series. This is where the idea of a \"Sync\" comes in.</p> <p>Syncing allows Series to be automatically added to TCM. You can Sync from any non-TMDb connection, each Sync can be customized to only add filtered subsets of your Series, and can also automatically assign specific Card customizations through Templates.</p> <p>For most users, I recommend Syncing from Sonarr. However, if you are not using Sonarr, then your primary Media Server is the next-best option. You can use the sidebar to navigate to the instructions which suit you.</p>","tags":["Sync"]},{"location":"getting_started/first_sync/emby/","title":"Syncing from Emby","text":"<p>Example Series</p> <p>I'll be referring to Better Call Saul and Breaking Bad as example Series. If you do not have either of these Series in your Emby server, you can add them (and remove them later - or not, because they're great shows ), or just pick two entirely different Series.</p> <p>For the purposes of this tutorial, we will be Syncing a subset of your Series by using a filter tag within Emby.</p> <ol> <li> <p>Open Emby.</p> </li> <li> <p>Open Better Call Saul, and then click the \"more data\"  button, then click <code>Edit Metadata</code> for the Series.</p> </li> <li> <p>At the very bottom click the <code>+</code> button next to Tags, type <code>tcm-test</code> and hit Enter - click <code>Save</code>.</p> </li> <li> <p>Repeat Steps 2-3 for Breaking Bad.</p> </li> <li> <p>Back within TitleCardMaker, navigate to the Sync page by clicking  <code>Sync</code> from the side navigation bar.</p> </li> <li> <p>Under the Emby section of the page, click the + Add Sync button.</p> </li> <li> <p>In the launched dialog, fill out the following information:</p> <ol> <li>Enter the Sync Name as <code>Test Sync</code></li> <li> <p>In the \"Templates to Apply\", select <code>Tinted Frame</code> Template from earlier in the tutorial.</p> <p>Template Order Matters</p> <p>When adding multiple Templates, the order in which they are listed is critical. TCM will apply the first Template whose Filter conditions are all satisfied.</p> </li> <li> <p>Under the Filters section, enter the tag <code>tcm-test</code> and hit Enter.</p> </li> <li>Hit the <code>Create</code> button.</li> </ol> <p>Sync Created</p> <p>You have successfully created a Sync that automatically adds all Series in Emby that are tagged with <code>tcm-test</code>, and assigns our Template to them.</p> </li> <li> <p>At the top of the page is an indication of when all your Syncs will next run - we'll adjust this next - but to run a Sync immediately, click the small  Sync icon.</p> </li> <li> <p>TCM will then query Emby for all your Series, filter the results by our indicated filters (in our case the <code>tcm-test</code> tag), and then filter out any exclusions (none). The added Series will be listed in a message. You should see \"Synced 1 Series\", with Breaking Bad listed below.</p> Why is Better Call Saul not listed here? <p>The reason BCS is not listed as having been Synced is because when TCM runs a Sync, it checks the resulting list of Series against any existing Series. Since BCS was added in the previous step, TCM does not add it again.</p> </li> </ol> <p>Synced from Emby</p> <p>You have successfully Synced from Emby. This exact structure can be used to create and run any number of Syncs.</p>","tags":["Tutorial","Emby","Sync"]},{"location":"getting_started/first_sync/jellyfin/","title":"Syncing from Jellyfin","text":"<p>Example Series</p> <p>I'll be referring to Better Call Saul and Breaking Bad as example Series. If you do not have either of these Series in your Jellyfin server, you can add them (and remove them later - or not, because they're great shows ), or just pick two entirely different Series.</p> <p>For the purposes of this tutorial, we will be Syncing a subset of your Series by using a filter tag within Jellyfin.</p> <ol> <li> <p>Open Jellyfin.</p> </li> <li> <p>Open Better Call Saul, and then click the more data  button, then click <code>Edit Metadata</code> for the Series.</p> </li> <li> <p>Scroll down towards the bottom, and next to Tags click the  button, type <code>tcm-test</code> and hit Enter - click <code>Save Changes</code>.</p> </li> <li> <p>Repeat Steps 2-3 for Breaking Bad.</p> </li> <li> <p>Back within TitleCardMaker, navigate to the Sync page by clicking  <code>Sync</code> from the side navigation bar.</p> </li> <li> <p>Under the Jellyfin section of the page, click the + Add Sync button.</p> </li> <li> <p>In the launched dialog, fill out the following information:</p> <ol> <li>Enter the Sync Name as <code>Test Sync</code></li> <li> <p>In the \"Templates to Apply\", select <code>Tinted Frame</code> Template from earlier in the tutorial.</p> <p>Template Order Matters</p> <p>When adding multiple Templates, the order in which they are listed is critical. TCM will apply the first Template whose Filter conditions are all satisfied.</p> </li> <li> <p>Under the Filters section, enter the tag <code>tcm-test</code> and hit Enter.</p> </li> <li>Hit the <code>Create</code> button.</li> </ol> <p>Sync Created</p> <p>You have successfully created a Sync that automatically adds all Series in Jellyfin that are tagged with <code>tcm-test</code>, and assigns our Template to them.</p> </li> <li> <p>At the top of the page is an indication of when all your Syncs will next run - we'll adjust this next - but to run a Sync immediately, click the small  Sync icon.</p> </li> <li> <p>TCM will then query Jellyfin for all your Series, filter the results by our indicated filters (in our case the <code>tcm-test</code> tag), and then filter out any exclusions (none). The added Series will be listed in a message. You should see \"Synced 1 Series\", with Breaking Bad listed below.</p> Why is Better Call Saul not listed here? <p>The reason BCS is not listed as having been Synced is because when TCM runs a Sync, it checks the resulting list of Series against any existing Series. Since BCS was added in the previous step, TCM does not add it again.</p> </li> </ol> <p>Synced from Jellyfin</p> <p>You have successfully Synced from Jellyfin. This exact structure can be used to create and run any number of Syncs.</p>","tags":["Tutorial","Jellyfin","Sync"]},{"location":"getting_started/first_sync/plex/","title":"Syncing from Plex","text":"<p>Example Series</p> <p>I'll be referring to Better Call Saul and Breaking Bad as example Series. If you do not have either of these Series in your Plex server, you can add them (and remove them later - or not, because they're great shows ), or just pick two entirely different Series.</p> <p>For the purposes of this tutorial, we will be Syncing a subset of your Series by using a filter tag within Plex.</p> <ol> <li> <p>Open Plex.</p> </li> <li> <p>Open Better Call Saul, and then click the  edit icon, then open the  <code>Sharing</code> section from the sidebar.</p> </li> <li> <p>In the Labels field, type <code>tcm-test</code> and hit Enter - click <code>Save Changes</code>.</p> </li> <li> <p>Repeat Steps 2-3 for Breaking Bad.</p> </li> <li> <p>Back within TitleCardMaker, navigate to the Sync page by clicking  <code>Sync</code> from the side navigation bar.</p> </li> <li> <p>Under the Plex section of the page, click the + Add Sync button.</p> </li> <li> <p>In the launched dialog, fill out the following information:</p> <ol> <li>Enter the Sync Name as <code>Test Sync</code></li> <li> <p>In the \"Templates to Apply\", select <code>Tinted Frame</code> Template from earlier in the tutorial.</p> <p>Template Order Matters</p> <p>When adding multiple Templates, the order in which they are listed is critical. TCM will apply the first Template whose Filter conditions are all satisfied.</p> </li> <li> <p>Under the Filters section, enter the tag <code>tcm-test</code> and hit Enter.</p> </li> <li>Hit the <code>Create</code> button.</li> </ol> <p>Sync Created</p> <p>You have successfully created a Sync that automatically adds all Series in Plex that are tagged with <code>tcm-test</code>, and assigns our Template to them.</p> </li> <li> <p>At the top of the page is an indication of when all your Syncs will next run - we'll adjust this next - but to run a Sync immediately, click the small  Sync icon.</p> </li> <li> <p>TCM will then query Plex for all your Series, filter the results by our indicated filters (in our case the <code>tcm-test</code> tag), and then filter out any exclusions (none). The added Series will be listed in a message. You should see \"Synced 1 Series\", with Breaking Bad listed below.</p> Why is Better Call Saul not listed here? <p>The reason BCS is not listed as having been Synced is because when TCM runs a Sync, it checks the resulting list of Series against any existing Series. Since BCS was added in the previous step, TCM does not add it again.</p> </li> </ol> <p>Synced from Plex</p> <p>You have successfully Synced from Plex. This exact structure can be used to create and run any number of Syncs.</p>","tags":["Tutorial","Plex","Sync"]},{"location":"getting_started/first_sync/sonarr/","title":"Syncing from Sonarr","text":"<p>Example Series</p> <p>I'll be using Better Call Saul and Breaking Bad as example Series. If you do not have either of these Series in Sonarr, you can add them (and remove them later - or not, because they're great shows), or just pick two entirely different Series.</p> <p>For the purposes of this tutorial, we will be Syncing a subset of your Series by using a filter tag within Sonarr.</p> <ol> <li> <p>Open the Sonarr Web Interface.</p> </li> <li> <p>Open Better Call Saul, and then click the <code>Edit</code> wrench.</p> </li> <li> <p>In the Tags section, type <code>tcm-test</code> and hit Enter - click <code>Save</code>.</p> </li> <li> <p>Repeat Steps 2-3 for Breaking Bad.</p> </li> <li> <p>Back within TitleCardMaker, navigate to the Sync page by clicking  <code>Sync</code> from the side navigation bar.</p> </li> <li> <p>Under the Sonarr section of the page, click the + Add Sync button.</p> </li> <li> <p>In the launched dialog, fill out the following information:</p> <ol> <li>Enter the Sync Name as <code>Test Sync</code></li> <li> <p>In the \"Templates to Apply\", select <code>Tinted Frame</code> Template from earlier in the tutorial.</p> <p>Template Order Matters</p> <p>When adding multiple Templates, the order in which they are listed is critical. TCM will apply the first Template whose Filter conditions are all satisfied.</p> </li> <li> <p>Under the Filters section, open the dropdown and select the tag <code>tcm-test</code>.</p> Tag not appearing? <p>Sonarr can take a while to refresh the API with newly created tags, so if the <code>tcm-test</code> tag does not appear in the dropdown, you can type it and hit Enter to manually enter the tag.</p> </li> <li> <p>Hit the <code>Create</code> button.</p> </li> </ol> <p>Sync Created</p> <p>You have successfully created a Sync that automatically adds all Series in Sonarr that are tagged with <code>tcm-test</code>, and assigns our Template to them.</p> </li> <li> <p>At the top of the page is an indication of when all your Syncs will next run - we'll adjust this next - but to run a Sync immediately, click the small  Sync icon.</p> </li> <li> <p>TCM will then query Sonarr for all your Series, filter the results by our indicated filters (in our case the <code>tcm-test</code> tag), and then filter out any exclusions (none). The added Series will be listed in a message. You should see \"Synced 1 Series\", with Breaking Bad listed below.</p> Why is Better Call Saul not listed here? <p>The reason BCS is not listed as having been Synced is because when TCM runs a Sync, it checks the resulting list of Series against any existing Series. Since BCS was added in the previous step, TCM does not add it again.</p> </li> <li> <p>From the message, you can click on the newly added Breaking Bad to directly go to the Series page. On the main Configuration tab, double check that the Library field for your Media Server is filled in with the correct library.</p> Don't see a Library? <p>If you have enabled any other Media Servers and do not see a Library listed for this Series, that means that your Sonarr Library Paths are set incorectly, and TCM will not auto-detect a Series Library when syncing.</p> <p>Review Step 7 of the Sonarr Setup page to correct your Library Paths. When you've corrected these, delete Breaking Bad and re-Sync to verify they are correct.</p> </li> </ol> <p>Synced from Sonarr</p> <p>You have successfully Synced from Sonarr. This exact structure can be used to create and run any number of Syncs.</p>","tags":["Tutorial","Sonarr","Sync"]},{"location":"user_guide/","title":"User Guide","text":"<p>Under Construction</p> <p>This documentation is actively being developed.</p> <p>Not for New Users</p> <p>The User Guide is not intended to be an introduction to TitleCardMaker for new users - it is a detailed reference for those already familiar with the basics. New users should follow the Getting Started tutorial.</p>"},{"location":"user_guide/#pages","title":"Pages","text":"<p>The TitleCardMaker interface is separated into various pages which can be navigated to via the sidebar or buttons on the header. Each page is detailed below:</p> <ul> <li>Series</li> <li>Adding Series</li> <li>Missing Summary</li> <li>Templates</li> <li>Fonts</li> <li>Sync</li> <li>Settings</li> <li>Connections</li> <li>Scheduler</li> <li>Importer</li> <li>System Summary</li> <li>Logs</li> <li>Graphs</li> <li>Changelog</li> </ul>"},{"location":"user_guide/#selecting-a-branch-tag","title":"Selecting a Branch / Tag","text":"<p>TitleCardMaker follows the typical design pattern of lots of software packages, separating changes which are \"in development\" and \"finalized\". As a result, you have the option of selecting between either of these branches (or tags) for your version of TCM.</p> <p>Develop Branches / Tags</p> <p>If using the <code>develop</code> version of TCM, expect to encounter bugs which may require frequently updating. If this sounds cumbersome, stick to the <code>main</code> branch.</p> <p>Backwards Compatibility</p> <p>If there are changes to the TCM database schema, these are often irreversible - meaning swapping from <code>develop</code> to <code>main</code> is not possible.</p>"},{"location":"user_guide/#docker","title":"Docker","text":"Tag Name Description Recommended For.. <code>latest</code> The most up-to-date (stable) release Most users<sup>1</sup> <code>main</code> Same as <code>latest</code> It's recommended to use <code>latest</code> <code>develop</code> The most feature-rich (unstable) release Those wanting to try the latest features <code>main-armv7</code> Same as <code>latest</code>, but for those on an ARMv7 architecture See <code>latest</code> <code>develop-armv7</code> Same as <code>develop</code>, but for those on an ARMv7 architecture See <code>develop</code>"},{"location":"user_guide/#non-docker","title":"Non-Docker","text":"Branch Name Description Recommended For.. <code>main</code> The most up-to-date (stable) release Most users<sup>1</sup> <code>develop</code> The most feature-rich (unstable) release Those wanting to try the latest features"},{"location":"user_guide/#environment-variables","title":"Environment Variables","text":"Specifying an Environment Variable  Docker Compose Docker Non-Docker <p>Add all environment variables under the <code>environment</code> section of your compose file, like so:</p> docker-compose.yml<pre><code>name: titlecardmaker\nservices:\n  tcm:\n    # etc.\n    environment:\n      - TZ=America/Los_Angeles\n      - TCM_LOG_STDOUT=WARNING\n    # etc.\n</code></pre> <p>Specify the environment variable with the <code>-e</code> commands in your Docker run command, like so:</p> <pre><code>-e TZ=America/Los_Angeles -e TCM_LOG_STDOUT=WARNING\n</code></pre> <p>The easiest method is to create a file named <code>.env</code> in the main TCM installation directory (where you type your <code>python</code> command) - like so:</p> .env<pre><code>TZ=America/Los_Angeles\nTCM_LOG_STDOUT=WARNING\n</code></pre> <p>While a vast majority of TCM's behavior can be adjusted within the UI, there are a few options which can only be adjusted with environment variables. These are described below:</p> <code>TCM_BACKUP_RETENTION</code> <p>How long to keep old backups before deleting them. This is an integer number of days. The default is <code>21</code>.</p> <code>TCM_IM_DOCKER</code> <p>Name of a standalone Docker container to execute ImageMagick commands within. This is only required if TCM is not executing within Docker, but ImageMagick is. This is unspecified by default.</p> <code>TCM_LOG</code> <p>This has been deprecated in place of <code>TCM_LOG_STDOUT</code>.</p> <code>TCM_LOG_STDOUT</code> <p>The minimum log level for the standard (console) output. Log messages at a level lower than this will not be transmitted. This can be either <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, or <code>CRITICAL</code>. The default is <code>INFO</code>.</p> <code>TCM_LOG_FILE</code> <p>The minimum log level for the logging file output. Log messages at a level lower than this will not be written to any log files. This can be either <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, or <code>CRITICAL</code>. The default is <code>TRACE</code> and it is not recommended to change this, as it can make it much more difficult to diagnose or debug issues.</p> <code>TCM_LOG_WEBSOCKET</code> <p>The minimum log level for live messages which appear in the UI (toggled here). Log messages at a level lower than this will not be displayed in the UI. This can be either <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, or <code>CRITICAL</code>. The default is <code>INFO</code>.</p> <code>TCM_LOG_RETENTION</code> <p>How long to keep log files before they are deleted. This can be any human- readable duration - e.g. <code>2 days</code>, <code>3 weeks</code>, etc. The default is <code>7 days</code>.</p> <code>TCM_NEW_SERIES_VIEW</code> <p>As of <code>v2.0-alpha.10.0</code>, this setting is no longer requires as the \"old\" Series view has been removed.</p> <code>TCM_PLEX_LOGGING</code> <p>Set to <code>TRUE</code> to reroute all Plex API log messages to TCM's internal logging mechanism. Plex can be fine-tuned, see below.</p> <code>TZ</code> <p>The timezone which is used for all local time reporting (most notably logging). To determine your timezone, a full list is available here. You will want to take note of the text in the TZ Identifer column. The default is <code>UTC</code>.</p> <code>TCM_DISABLE_AUTH</code> <p>Whether to reset and disable authentication access to the TCM UI. This is only read when TCM first boots, and if set to <code>TRUE</code> then your previously established username and password will be deleted. For more details, see here. This is unspecified by default.</p>"},{"location":"user_guide/#plex-variables","title":"Plex Variables","text":"<p>TCM uses the plexapi module to communicate with Plex, and as such can be configured by configuring their assigned environment variables - these are all detailed here.</p> <p>The most popular one is the API timeout - <code>PLEXAPI_PLEXAPI_TIMEOUT</code>.</p> <ol> <li> <p>Unless you've encountered a bug which you personally require and is only available on <code>develop</code>.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"user_guide/connections/","title":"Connections","text":"<p>The Connections page is where all external connections are defined. Currently this is the following:</p> <ul> <li>Authentication</li> <li>Emby</li> <li>Jellyfin</li> <li>Plex</li> <li>Sonarr</li> <li>Tautulli</li> <li>TheMovieDatabase</li> <li>TheTVDatabase</li> </ul> <p>Each Connection is described in greater detail below.</p> <p> </p> <p>Private Information</p> <p>Any input field marked with an  icon is encrypted within the TitleCardMaker database, and is automatically redacted from all logs.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#authentication","title":"Authentication","text":"<p>If you expose your instance of TCM outside your LAN (through a reverse proxy or some other means), it is recommended to enable Authentication so that a username and password are required to access TCM.</p> <p>Once authorized, the OAuth2 access token for your login is stored in your browser's local storage, so accessing the interface from another browser will require re-authentication. Tokens expire after two weeks.</p> <p>API Request</p> <p>All<sup>1</sup> API requests also require authorization (if enabled). If accessing the API from the UI, then the locally stored OAuth2 session tokens should be applied, but if not you can click <code>Authorize</code> in the top right of the API page and enter your credentials.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#first-time-setup","title":"First Time Setup","text":"<p>When first enabling Authentication by clicking the <code>Require Authentication</code> checkbox, a temporary username and password will be created. These are printed in the logs, but default to <code>admin</code> and <code>password</code>.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#changing-credentials","title":"Changing Credentials","text":"<p>After authentication is enabled, returning to the Connections page will show your current username and an empty password field. Simply type in your desired username and password, then hit <code>Save Changes</code> and TCM will modify your credentials - prompting a new login.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#disabling-authentication","title":"Disabling Authentication","text":"<p>Authentication can be disabled at any point by unchecking the <code>Require Authentication</code> checkbox.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#forgotten-login","title":"Forgotten Login","text":"<p>If you've forgotten your login credentials, follow the following steps to disable authentication.</p> <ol> <li> <p>Define the <code>TCM_DISABLE_AUTH</code> environment variable as <code>TRUE</code>.</p>  Linux MacOS Windows (Powershell) Windows (Non-Powershell) <pre><code>export TCM_DISABLE_AUTH=TRUE\n</code></pre> <pre><code>TCM_DISABLE_AUTH=TRUE\n</code></pre> <pre><code>$env:TCM_DISABLE_AUTH = \"TRUE\"\n</code></pre> <pre><code>set TCM_DISABLE_AUTH=\"TRUE\"\n</code></pre> </li> <li> <p>If you're using Docker, pass this environment variable into the container with <code>-e</code> (or in your Docker Compose file); if you're not using Docker then nothing else is necessary. Relaunch TCM.</p> </li> <li> <p>Navigate to the Connections page (<code>/connections</code>), re-enable Authentication - TCM will then create a new User with the default username and password as <code>admin</code> and <code>password</code>.</p> </li> <li> <p>Login, then change your credentials as desired.</p> </li> <li> <p>Close TCM and either define <code>TCM_DISABLE_AUTH</code> as something other than <code>TRUE</code>, or remove the specification altogether. Re-build/launch TCM.</p> </li> <li> <p>Get a password manager!</p> </li> </ol>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#adding-a-connection","title":"Adding a Connection","text":"<p>For each Connection type, clicking the Add Connection button will create a blank form which you can enter all details into. After you have finished entering the info, click Create and TCM will refresh the page.</p> <p>Additional settings can be entered after creation. Open the newly created Connection, enter those details, and click Save Changes</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#emby","title":"Emby","text":"<p>As a Media Server, Emby can serve as an Episode Data Source, Image Source, and as a location where Title Cards are uploaded to.</p> <p>TCM can communicate with any number of Emby Media Servers, although if you plan to use watch-status styling, make sure you read and enable the global multi library filename support setting first.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#connection-name","title":"Connection Name","text":"<p>The name of the Connection as it appears within the UI. This is purely cosmetic.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#url","title":"URL","text":"<p>The root URL to your Emby server, including the port.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#api-key","title":"API Key","text":"<p>API key to authenticate communication. The process of creating one within Emby is covered Getting Started.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#filesize-limit","title":"Filesize Limit","text":"<p>The maximum file size of Title Cards to upload to Emby. Title Cards larger than this will be compressed<sup>1</sup>.</p> <p>Changing this setting does not retroactively affect created or uploaded Title Cards.</p> <p>This can be entered as <code>{digit} {unit}</code> - e.g. <code>4 Megabytes</code> - where the acceptable units are <code>Bytes</code>, <code>Kilobytes</code>, and <code>Megabytes</code>.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#username","title":"Username","text":"<p>Username of the user to query Episode watched statuses from.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#ssl","title":"SSL","text":"<p>Whether to connect with HTTPS instead of HTTP.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#jellyfin","title":"Jellyfin","text":"<p>As a Media Server, Jellyfin can serve as an Episode Data Source, Image Source, and as a location where Title Cards are uploaded to.</p> <p>TCM can communicate with any number of Jellyfin Media Servers, although if you plan to use watch-status styling, make sure you read and enable the global multi library filename support setting first.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#connection-name_1","title":"Connection Name","text":"<p>The name of the Connection as it appears within the UI. This is purely cosmetic.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#url_1","title":"URL","text":"<p>The root URL to your Jellyfin server, including the port.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#api-key_1","title":"API Key","text":"<p>API key to authenticate communication. The process of creating one within Jellyfin is covered in Getting Started.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#filesize-limit_1","title":"Filesize Limit","text":"<p>The maximum file size of Title Cards to upload to Jellyfin. Title Cards larger than this will be compressed<sup>1</sup>.</p> <p>Changing this setting does not retroactively affect created or uploaded Title Cards.</p> <p>This can be entered as <code>{digit} {unit}</code> - e.g. <code>4 Megabytes</code> - where the acceptable units are <code>Bytes</code>, <code>Kilobytes</code>, and <code>Megabytes</code>.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#username_1","title":"Username","text":"<p>Username of the user to query Episode watched statuses from.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#ssl_1","title":"SSL","text":"<p>Whether to connect with HTTPS instead of HTTP.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#plex","title":"Plex","text":"<p>As a Media Server, Plex can serve as an Episode Data Source, Image Source, and as a location where Title Cards are uploaded to.</p> <p>TCM can communicate with any number of Plex Media Servers, although if you plan to use watch-status styling, make sure you read and enable the global multi library filename support setting first.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#connection-name_2","title":"Connection Name","text":"<p>The name of the Connection as it appears within the UI. This is purely cosmetic.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#url_2","title":"URL","text":"<p>The root URL to your Plex server, including the port.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#token","title":"Token","text":"<p>Token to authenticate communication. The process of obtaining your Plex Token is covered in Getting Started.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#filesize-limit_2","title":"Filesize Limit","text":"<p>The maximum file size of Title Cards to upload to Jellyfin. Title Cards larger than this will be compressed<sup>1</sup>.</p> <p>Changing this setting does not retroactively affect created or uploaded Title Cards.</p> <p>This can be entered as <code>{digit} {unit}</code> - e.g. <code>4 Megabytes</code> - where the acceptable units are <code>Bytes</code>, <code>Kilobytes</code>, and <code>Megabytes</code>.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#ssl_2","title":"SSL","text":"<p>Whether to connect with HTTPS instead of HTTP.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#kometa-integration","title":"Kometa Integration","text":"<p>Whether to remove the <code>Overlay</code> label after uploading Title Cards. This also prevents TCM from grabbing Source Images with overlays applied.</p> <p>Only check this box if you use (or have used) Kometa Episode overlays.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#tautulli","title":"Tautulli","text":"<p>The Tautulli agent is covered here.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#sonarr","title":"Sonarr","text":"<p>Although Sonarr can only serve as an Episode Data Source, it is typically much faster than the other alternatives (Emby, Jellyfin, Plex) and is generally the recommended option for most users.</p> <p>In addition to this, Sonarr can act as a Tautulli alternative which works for non-Plex Media Servers and triggers immediate Title Card creation when new Episodes are added - settings this up is detailed here.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#connection-name_3","title":"Connection Name","text":"<p>The name of the Connection as it appears within the UI. This is purely cosmetic.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#url_3","title":"URL","text":"<p>The root URL to your Sonarr server, including the port.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#api-key_2","title":"API Key","text":"<p>API key to authenticate communication. The process of getting one from Sonarr is covered in Getting Started.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#ssl_3","title":"SSL","text":"<p>Whether to connect with HTTPS instead of HTTP.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#downloaded-episode-toggle","title":"Downloaded Episode Toggle","text":"<p>Whether to only get Episode data for Episodes which are downloaded. This is only applicable if Sonarr is the Episode Data Source.</p> <p>If unchecked, and Sonarr is the specified Episode Data Source, then TCM will grab Episode data for all Episodes within Sonarr, typically resulting in Title Cards for Episodes which you do not personally have.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#library-paths","title":"Library Paths","text":"<p>If Syncing from Sonarr, then this setting is critical to ensure that TCM is able to correctly auto-assign libraries to Series. If you are not Syncing from Sonarr, then you can leave this blank.</p> <p>Each set of inputs corresponds to a single Library which TCM can assign to. This means you should generally have one entry for each library across all your servers. This setting requires that your libraries are in separate directories (at least within the same Media Server).</p> <p>Paths</p> <p>All paths should be the path within Sonarr - so users with their Sonarr server inside a Docker container need to specify the paths that appear within the container, not your Media Server.</p> <p>See the examples for details.</p> Example Library Paths Example 1Example 2Example 3 <p>Within Plex, I have two libraries called <code>Anime</code> and <code>TV</code> located at <code>/data/media/Anime</code> and <code>/data/media/TV</code> respectively. My Library Paths setting should look like:</p> Media Server Library Name Path Plex Anime /data/media/Anime/ Plex TV /data/media/TV/ <p>Within Jellyfin, I have four libraries called <code>Anime</code>, <code>Anime 4K</code>, <code>TV Shows</code>, and <code>TV Shows 4K</code> - they are located at <code>/data/media/anime</code>, <code>/data/media/anime 4k/</code>, <code>/data/media/tv/</code>, and <code>/data/media/tv 4k</code> respectively. The Library Paths setting should look like:</p> Media Server Library Name Path Jellyfin Anime /data/media/anime/ Jellyfin Anime 4K /data/media/anime 4k/ Jellyfin TV /data/media/TV/ Jellyfin TV 4K /data/media/TV 4k/ <p>Within Emby I have two libraries: <code>TV</code>, and <code>Reality TV</code> located at <code>C:\\TV</code> and <code>K:\\Reality TV</code>; within Plex there are two libraries: <code>Anime</code> and <code>Reality TV</code> located at <code>C:\\Anime</code> and <code>K:\\Reality TV</code> (the same directory as within Emby). The Library Paths setting should look like:</p> Media Server Library Name Path Emby TV C:\\TV Emby Reality TV K:\\Reality TV Plex Anime C:\\Anime Plex Reality TV K:\\Reality TV <p>When Syncing, TCM will add the library assignments defined in the Connection to the Series.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#tautulli_1","title":"Tautulli","text":"<p>Typically, TitleCardMaker creates and loads Title Cards on an adjustable schedule. However, TCM is able to set up a Notification Agent on Tautulli so that it can notify TCM immediately after new Episodes are available, or an existing Episode has been watched.</p> <p>This integration can only be created after creating a Plex connection, and it is server-specific, as Tautulli only works on one Plex server at a time.</p> <p>The instructions for enabling this integration are detailed here.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#themoviedatabase","title":"TheMovieDatabase","text":"<p>TMDb is a free database service which can serve as an Episode Data Source, and is the recommended Image Source due to the much higher quality (and wider selection) of images compared to the Media Servers. It is also the only Connection which can provide Episode translations.</p> Why enable multiple TMDb Connections? <p>Because TMDb is a service, and not a local server, in a vast majority of use cases, users should not enable multiple TMDb Connections (as each Connection will have the same data available).</p> <p>However, some users might find value in the flexibility to selectively adjust some options (such as image resolution or language priority), so the ability is present (and it was also just easier to program that way ).</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#connection-name_4","title":"Connection Name","text":"<p>The name of the Connection as it appears within the UI. This is purely cosmetic.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#api-key_3","title":"API Key","text":"<p>API key to submit request to TMDb. These are free, and details on obtaining one are covered in Getting Started.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#minimum-image-resolution","title":"Minimum Image Resolution","text":"<p>The minimum resolution of Source Images to gather from TMDb. This must be entered as <code>{width}x{height}</code> - e.g. <code>800x400</code> - and can be as low as <code>0x0</code> (to not apply any minimum resolution).</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#language-priority","title":"Language Priority","text":"<p>The relative priority of languages to search for posters and logos under. This is ordered highest to lowest priority.</p> <p>For non-English users whose library might contain non-English content, it is recommended to set this to (your language) then English; as this will prompt TCM to search for logos in your native language and then English if none are available.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#ignore-localized-images","title":"Ignore Localized Images","text":"<p>Series, Template</p> <p>When users upload images to TMDb they can assign a language to that image - this is not common, but some Episodes feature in-Episode title cards which might typically want to be avoided by TCM. Enabling this will direct TCM to ignore all images with assigned language codes.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#thetvdatabase","title":"TheTVDatabase","text":"<p>TVDb is a free database service which can serve as an Episode Data Source, and Image Source. It is also the only Episode Data Source which allows customizing the episode order - i.e. absolute, official, etc.</p> Why enable multiple TVDb Connections? <p>For the most part the only reason to enable multiple TVDb Connections would be to utilize different Episode orderings. You can have one Connection which uses the Default ordering, and another that uses DVD.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#connection-name_5","title":"Connection Name","text":"<p>The name of the Connection as it appears within the UI. This is purely cosmetic.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#api-key_4","title":"API Key","text":"<p>API key to submit request to TVDb. These are free, and details on obtaining one are covered in Getting Started.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#minimum-image-resolution_1","title":"Minimum Image Resolution","text":"<p>The minimum resolution of Source Images to gather from TVDb. This must be entered as <code>{width}x{height}</code> - e.g. <code>800x400</code> - and can be as low as <code>0x0</code> (to not apply any minimum resolution).</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#language-priority_1","title":"Language Priority","text":"<p>The relative priority of languages to search for posters and logos under. This is ordered highest to lowest priority.</p> <p>For non-English users whose library might contain non-English content, it is recommended to set this to (your language) then English; as this will prompt TCM to search for logos in your native language and then English if none are available.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#episode-ordering","title":"Episode Ordering","text":"<p>Which order of Episode data to request when querying Episodes from TVDb. Not all Series have all orders, and if a selected Series does not have the selected order, then TVDb will return no Episodes.</p> <p>These orders line up with what can be seen on the TVDb website, so it might be easiest to find the desired order on the website and then select that within TCM.</p>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/connections/#include-movies","title":"Include Movies","text":"<p>Whether to include or exclude \"Episodes\" which are marked as movies.</p> <p>This is most often applicable to Anime, in which OVA movies may be listed under Specials (season 0).</p> <ol> <li> <p>If you are using an uncompressed file extension, like <code>.png</code> or <code>.tiff</code>,  alongside a low filesize limit, then the compression algorithm TCM uses might fail to compress and upload some Title Cards.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Technically, Emby and Jellyfin can provide logos as well, however their logos are not browsable.\u00a0\u21a9</p> </li> </ol>","tags":["Authentication","Emby","Jellyfin","Plex","Sonarr","Tautulli","TMDb","TVDb"]},{"location":"user_guide/faq/","title":"Frequently Asked Questions","text":"","tags":["User Guide"]},{"location":"user_guide/faq/#why-are-title-cards-not-loading-into-embyjellyfinplex","title":"Why are Title Cards not loading into Emby/Jellyfin/Plex?","text":"<p>A vast majority of the time this is because the Series does not have a library assigned. If manually adding the Series, then you will need to manually assign the library. If Syncing from Sonarr then you need to make sure the Library Paths setting is correctly filled out prior to Syncing.</p> <p>If you have verified the Series has a library assigned, you can try the Force Reload button for that server / library.</p>","tags":["User Guide"]},{"location":"user_guide/fonts/","title":"Fonts","text":"","tags":["Named Fonts"]},{"location":"user_guide/fonts/#fonts","title":"Fonts","text":"<p>There are two classifications of fonts in TCM - named and un-named. Named fonts are created in the  <code>Fonts</code> page within TCM (at the <code>/fonts</code> URL); while un-named fonts can be added directly to a Series or Episode. Aside from that, the only differences between these two are that named fonts can use custom font files and character replacements in addition to metrics like font size, spacing, etc.; while unnamed fonts can only adjust metrics.</p> <p> </p> <p>This page will primarily cover named fonts. In general, these Fonts apply to the title text of a particular Title Card - not the season or episode text. That is (generically) fixed, or recolored via an extra.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#creating-a-new-font","title":"Creating a New Font","text":"<p>At the top of the Fonts page, a new Font can be created by clicking the Create New Font button. This will create a \"blank\" Font added to the top of the page.</p> <p>Clicking the accordion will expand the Font, where all customization can be entered.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#previewing-a-font","title":"Previewing a Font","text":"<p>On the right-hand side of all Fonts is a live preview of the current Font. This preview reflects the currently entered Font settings - not necessarily what is saved in the Font - and can be refreshed by clicking the  Refresh Preview button.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#preview-card-type","title":"Preview Card Type","text":"<p>Since each Card type uses different base Font values, it is important to preview your Font with the Card type you expect to utilize it on. While most metrics will apply fairly consistently across the types, some metrics (typically kerning and stroke width) will appear vastly different when applied to different cards.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#preview-title","title":"Preview Title","text":"<p>Above the preview image is a textbox in which you can enter the title text you would like to display in the preview Card. </p> <p>Recommendation</p> <p>I strongly recommend you test an example title with more than one line of text when first honing in the Font metrics. Depending on the Font file and Card type, it is not uncommon for multiple lines of text to be poorly spaced.</p> <p>Next to the Preview Title label there is also a small  button which, when clicked, will replace the preview title with all lower- and upper-case characters between A and Z.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#font-customization","title":"Font Customization","text":"<p>All Fonts have the following options which can be adjusted:</p> <ul> <li>Name</li> <li>File</li> <li>Color</li> <li>Text Case</li> <li>Title Split Modifier</li> <li>Size</li> <li>Kerning</li> <li>Stroke Width</li> <li>Interline Spacing</li> <li>Interword Spacing</li> <li>Vertical Shift</li> <li>Character Replacement</li> </ul> <p>Each of these is described in greater detail below.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#name","title":"Name","text":"<p>A Font's name is purely for easier selection within the TCM UI. It is generally recommended to name the Font with the name of the Series (or franchise) it will apply to.</p> <p>Importing Blueprint Fonts</p> <p>The name of a Font is also used to match Fonts when importing Blueprints.</p> <p>For example - if you are importing a Blueprint featuring a Font named Better Call Saul and have already created a Font named Better Call Saul, then TCM will not duplicate the Font and instead just assign the existing Font to the Series.</p> <p>This is part of the reason it is recommended to name your Fonts by the applicable Series or franchise.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#file","title":"File","text":"<p>A custom Font file to use in place of the Card's default. This is generally only applied to the title text of the Card.</p> <p>In order for a Font file to be reflected in the live Card preview, you must upload the File to the server and click the Save Changes button at the bottom of the Font.</p> File Location <p>Once uploaded, Font files are stored in TCM's asset directory. This means you can delete the File from your host OS after it's been uploaded into TCM.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#color","title":"Color","text":"<p>The color of the Font to use in the Title Card. If unspecified, then the Card's default Font color is used instead.</p> <p>This variable supports all color formats and names supported by ImageMagick. This includes hexcodes, <code>rgb()</code>, <code>rgba()</code>, <code>hsl()</code>, <code>hsla()</code>, <code>hsb()</code>, <code>hsba()</code>, and color names.</p> <p>Color Reference</p> <p>A full article on the ImageMagick color specification is available here, and here is a convenient color picker.</p>  MacOS Color Picker <p>If you are on MacOS, there is a very useful built-in color \"picker\". You can access this by opening <code>Digital Color Meter</code> from Spotlight. It will show you the RGB values of any pixel on screen, and these can be directly entered into an <code>rgb()</code> color code.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#text-case","title":"Text Case","text":"<p>How to format the title text in the Card - i.e. upper or lowercase. This can be one of the following:</p> Case Description Default Use the Card type's default case Blank Remove all title text Lowercase Make all text lowercase Source Use the title as it appears in the Episode Data Source Title Apply title case logic (like in a book title) Uppercase Make all text uppercase <p>Generally, leaving this as Default or Source is recommended, but it is often quite Font and Card type dependent.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#title-split-modifier","title":"Title Split Modifier","text":"<p>Advanced Setting</p> <p>This setting is fairly complicated, rarely used, and can safely be ignored by most users.</p> <p>By default, TCM will try and automatically split title text into multiple lines. This is done based on the number of characters in the text, as well as the specific card type being used. This setting allows adjusting after how many characters TCM will try and split into multiple lines.</p> <p>Positive values mean TCM will require more characters in a line before splitting (i.e. longer lines), and negative values will require less characters (i.e. shorter lines).</p> <p>This is especially useful if a custom Font file is being used which has a vastly different spacing or sizing than the card type's default Font.</p> Example <p>Take the title The One After Ross Says Rachel. Depending on the Card, TCM might split this into two lines of text like:</p> <pre><code>The One After\nRoss Says Rachel\n</code></pre> <p>But, if a modifier of +8 was specified, then TCM will now try and \"fit\" 8 more characters into one line of text, for example:</p> <pre><code>The One\nAfter Ross Says Rachel\n</code></pre> <p>Notice how more of the title has fit on the first line.</p> Why doesn't TCM split titles to always fit in the image? <p>TCM currently does all the \"title splitting\" logic in Python - but this has the downside of occasionally requiring manual adjustment, and can result in some very long titles extending beyond the bounds of the image.</p> <p>So this inevitably begs the question: why not measure the actual length of the title text in the image to ensure this never happens?</p> <p>The short answer is: performance. Although TCM does do quite a bit of text metric analysis<sup>1</sup> for various aspects of Cards, it is generally much slower than doing this in Python, and would be especially slow if required multiple times (like would be the case when \"fitting\" text on an image).</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#size","title":"Size","text":"<p>Size scale of the Font. Values &gt;100% will increase the size of the Font, and values &lt;100% will decrease the size of the Font. Must be positive.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#kerning","title":"Kerning","text":"<p>Scale of the Font's kerning. Kerning refers to the distance between letters within the same word. For a (approximate) visual representation of this, adjust the slider below to scale this paragraph's kerning.</p> <p></p> <p>Depending on the Font and Card, it is not uncommon for Kerning values to be very large (or very small) - for example, I used a value of 1500% for my Jane the Virgin Title Cards. </p> <p>Whether values &gt;100% increase or decrease the letter spacing is dependent on the Card.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#stroke-width","title":"Stroke Width","text":"<p>Stroke vs. Drop Shadows</p> <p>Rather than using a text stroke, many card types instead feature a drop  shadow which will be unaffacted by this stroke width metric. In particular, the Calligraphy, Tinted Frame, and Lanscape cards.</p> <p>Scale of the Font's stroke width. This generally refers to title text which has an outer stroke which helps the characters appear more visible.</p> <p>The follow examples showcase stroke widths of 10%, 100%, 200%, and 500% respectively.</p> <p> </p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#interline-spacing","title":"Interline Spacing","text":"<p>Additional pixel spacing to apply between multiple lines of text. Positive values increase the spacing between lines, and negative values decrease it.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#interword-spacing","title":"Interword Spacing","text":"<p>Additional pixel spacing between words in text. This is similiar to kerning, except only applies to the spacing between separate words, not the spacing between letters of the same word.</p> <p>Positive values add space between words, negative values decrease it.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#vertical-shift","title":"Vertical Shift","text":"<p>Pixels to offset the vertical placement of the title text.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#character-replacements","title":"Character Replacements","text":"<p>It is fairly common to come across Fonts that do not have all the characters needed for all the titles of a given Series. Especially for titles with lots of punctuation, or accented characters like \u00e9.</p> <p>To aid with this, any Font can have a predefined set of character replacements which will be applied to an Episode title before the Card is created. These can be manually entered, or TCM can perform an automatic analysis of the Font by clicking the  Analyze Font Replacements button.</p> <p>These replacements can take any text (the left input field) and will replace that with the replacement text (the right input field). This replacement text can be blank to indicate the input text should be deleted.</p> Advanced Replacement Logic <p>TCM actually applies font replacements twice; once before splitting the title into multiple lines (if enabled) and applying the text case, and once after. This is done so that the original text and the \"cased\" text can be replaced separately (if desired).</p> <p>However, because of this, some replacements might appear to \"doubled up\". For example, if a replacement was used to add an extra space between some character, such as <code>,</code> to <code>,</code>, then TCM will actually add two spaces.</p> <p>This can be avoided by using the <code>pre:</code> and <code>post:</code> tags described below.</p> Pre- and Post- Tags <p>To only apply a character replacement only before the text case, preface the text to replace with <code>pre:</code>. Likewise, to only apply a character replacement after the text case, preface the text with with <code>post:</code>. TCM will ignore the <code>pre:</code> and <code>post:</code> text in the actual replacement.</p>","tags":["Named Fonts"]},{"location":"user_guide/fonts/#character-replacement-analysis","title":"Character Replacement Analysis","text":"<p>Under the Character Replacements section of a Font is a  Analyze Font Replacements which can be pressed to prompt TCM to perform an automated analysis of the Font and make suggested replacements.</p> <p>During this analysis, TCM will look for any appropriate glyph within the Font for all the most commonly used English characters (i.e. A-Z and all standard punctuation). If the Font is assigned to a Template, Series, or Episode then TCM will look at the titles of those assigned elements for characters. </p> <p>Analyze the Font after Assignment</p> <p>Because of this, it is recommended to perform the Font analysis after assigning the Font to the applicable Template, Series, or Episode.</p> <p>TCM will then suggest replacements by looking for common character replacements (like <code>&amp;</code> to <code>and</code>, <code>\u2019</code> to <code>'</code>), the lower or uppercase equivalent (if applicable), and finally attempt a Unicode character decomposition.</p> <p>Example Analysis</p> <p>Say the Font in question does not have the character <code>\u00c1</code> - TCM will look for a \"common\" replacement; then <code>\u00e1</code>; and finally an <code>A</code> or <code>a</code> character.</p> <ol> <li> <p>Technical term for analyzing some text by loading it into a \"fake\" temporary image of just text and taking measurements of the image space required to display the text.\u00a0\u21a9</p> </li> </ol>","tags":["Named Fonts"]},{"location":"user_guide/home/","title":"Home Page","text":"<p>Under Construction</p> <p>This documentation is actively being developed.</p> <p>...</p>"},{"location":"user_guide/integrations/","title":"Integrations","text":"<p>In addition to Connections, TitleCardMaker can also integrate directly with services (such as Plex or Tautulli) to trigger specific functionality in TCM - such as automatically creating Title Cards for all newly added content.</p> <p>For example, Plex can be configured to notify TCM to make/remake Title Cards when an event (in this case rating an Episode) occurs:</p> <p></p>","tags":["Plex","Sonarr","Tautulli"]},{"location":"user_guide/integrations/#plex","title":"Plex","text":"<p>Plex Pass Required</p> <p>Plex requires that you (the server owner) have a Plex Pass in order to enable Webhooks.</p> <p>Plex can be configured to trigger Card creation in TCM via Webhooks. </p>","tags":["Plex","Sonarr","Tautulli"]},{"location":"user_guide/integrations/#enabling","title":"Enabling","text":"<ol> <li> <p>Configure your Plex Connection inside TCM - see here for details.</p> </li> <li> <p>Take note of the number on the right side of the Plex Connection details in TCM - e.g. <code>1</code>, <code>2</code>, etc. You will need this later.</p> </li> <li> <p>Open Plex.</p> </li> <li> <p>In the top-right corner of Plex, click Settings (the wrench icon).</p> </li> <li> <p>From the left-hand sidebar, navigate to Webhooks.</p> </li> <li> <p>Click Add webhook, and then enter the URL of your TCM server (including the port), followed by <code>/api/webhooks/plex?interface_id=999</code>. Replace <code>999</code> with the number you noted from Step 2.</p> <p>Example</p> <p>For my server, this looks like <code>http://192.168.0.29:8000/api/webhooks/plex?interface_id=2</code></p> </li> <li> <p>Click Save Changes.</p> </li> <li> <p>From the left-hand sidebar, navigate to Network under Settings.</p> </li> <li> <p>Make sure you're viewing Advanced options, and check the Webhooks checkbox at the bottom of the page.</p> </li> <li> <p>Click Save Changes.</p> </li> </ol>","tags":["Plex","Sonarr","Tautulli"]},{"location":"user_guide/integrations/#customization","title":"Customization","text":"<p>By default, TCM will trigger Card creation for new content (<code>library.new</code>) and recently finished content (<code>media.scrobble</code>). If you would like to trigger new Cards for other events (such as rating an Episode, as shown above), do the  following:</p> <ol> <li> <p>Within Plex, edit the Webhook URL to include <code>&amp;trigger_on=...</code>, replacing <code>...</code> with a comma-separated list of triggers from Plex. A complete list is here, but TCM will only be able to actually trigger on <code>library.new</code>, <code>library.on.deck</code>, <code>media.pause</code>, <code>media.play</code>, <code>media.rate</code>, <code>media.resume</code>, <code>media.scrobble</code>, <code>media.stop</code> and <code>playback.started</code>. This argument is <code>library.new,media.scrobble</code> by default.</p> <p>Example</p> <p>The example above used the following URL: <code>http://192.168.0.29:8000/api/webhooks/plex?interface_id=2&amp;trigger_on=library.new,media.scrobble,media.rate</code></p> </li> <li> <p>Click Save Changes.</p> </li> </ol>","tags":["Plex","Sonarr","Tautulli"]},{"location":"user_guide/integrations/#sonarr","title":"Sonarr","text":"<p>Sonarr v4 Required</p> <p>The Webhook utilized by TCM was reworked in Sonarr v4; meaning this is required for the integration.</p> <p>Sonarr can be configured to create new Cards, or add/delete Series in TCM via Webhooks.</p>","tags":["Plex","Sonarr","Tautulli"]},{"location":"user_guide/integrations/#enabling_1","title":"Enabling","text":"<ol> <li> <p>Open Sonarr.</p> </li> <li> <p>From the left-hand sidebar, navigate to  <code>Settings</code>, then <code>Connect</code>.</p> </li> <li> <p>Click the plus icon to create a new Connection. At the bottom of the dialog, click Webhook.</p> </li> <li> <p>Give this a descriptive name.</p> </li> <li> <p>Leave the Tags field blank (unless you'd like to filter by tag).</p> </li> </ol> <p>Depending on the type of integration you would like to enable, do the following:</p> New SeriesSeries DeletionNew Episode(s) <ol> <li> <p>To configure Sonarr to instruct TCM to add Series as they're added to Sonarr, de-select all triggeres except <code>On Series Add</code>.</p> </li> <li> <p>Enter the URL of your TCM server (including the port), followed by <code>/api/webhooks/sonarr/series/add</code>.</p> </li> <li> <p>Ensure the Method is <code>POST</code>.</p> </li> <li> <p>Click Save.</p> </li> </ol> <ol> <li> <p>To configure Sonarr to instruct TCM to remove Series as they're deleted from Sonarr, de-select all triggers except <code>On Series Delete</code>.</p> </li> <li> <p>Enter the URL of your TCM server (including the port), followed by <code>/api/webhooks/sonarr/series/delete</code>.</p> </li> <li> <p>If you would like TCM to not delete the Title Card files themselves, add <code>?delete_title_cards=false</code> to the end of the URL.</p> </li> <li> <p>Ensure the Method is <code>POST</code>.</p> </li> <li> <p>Click Save.</p> </li> </ol> <ol> <li> <p>To configure Sonarr to instruct TCM to create Cards for new Episodes as they're added to Sonarr, de-select all triggers except <code>On Import Complete</code> and <code>On File Upgrade</code>.</p> </li> <li> <p>Enter the URL of your TCM server (including the port), followed by <code>/api/webhooks/sonarr/cards</code>.</p> </li> <li> <p>Ensure the Method is <code>POST</code>.</p> </li> <li> <p>Click Save.</p> </li> </ol> <p>Multiple of the above integrations may be enabled at once, if desired.</p>","tags":["Plex","Sonarr","Tautulli"]},{"location":"user_guide/integrations/#tautulli","title":"Tautulli","text":"<p>Plex Webhooks are Preferred</p> <p>Plex Webhooks are the preferred integration for most users. This is due to their faster speed, ease of setup, and flexibility in trigger conditions.</p> <p>Tautulli can be set up to trigger Card creation for newly added or watched content (just like Plex Webhooks) via the builtin Notification Agents system.</p>","tags":["Plex","Sonarr","Tautulli"]},{"location":"user_guide/integrations/#enabling_2","title":"Enabling","text":"<ol> <li> <p>In TCM, under the Plex Connection form that has a Tautulli connection, click Create Notification Agent.</p> </li> <li> <p>In the launched window, enter the root URL to your instance of Tautulli.</p> Example URL <p>Although your local IP address will obviously be different, this IP should be like <code>http://192.168.0.29:8181/</code>.</p> </li> <li> <p>Open Tautulli and navigate to the Settings by clicking the   Gear icon in the top right.</p> </li> <li> <p>From the left navigation bar, open the <code>Web Interface</code> settings.</p> </li> <li> <p>Scroll to the bottom, and ensure the <code>Enable API</code> checkbox is checked, then show and copy the generated API key.</p> Security Warning <p>Keep this API key private, as it can be used to remotely access and modify Tautulli.</p> </li> <li> <p>Back within TitleCardMaker, paste the API key from Step 5 into the API key input box.</p> </li> <li> <p>If you want Tautulli to trigger TitleCardMaker when episodes are watched, and not just when episodes are added, then leave the <code>Trigger on Recently Watched</code> checkbox checked. I also recommend entering your username in the username input so that Tautulli is only triggered when you watch content.</p> </li> <li> <p>Click Create Agent.</p> </li> <li> <p>Open Plex (on a computer) and navigate to your server settings via the  Wrench icon in the top right corner.</p> </li> <li> <p>From the left navigation bar, scroll down to <code>Library</code> under the <code>Settings</code> section and take note of your <code>Video Played Threshold</code> setting (this is an Advanced Setting).</p> </li> <li> <p>Back in Tautulli, open the <code>General</code> settings from the sidebar, and find the <code>TV Episode Watched Percent</code> setting. Set this to 1-2% higher than the Plex setting from Step 9.</p> Example Setting <p>For a Plex played threshold of 90%, the appropriate Tautulli setting is 91% or 92%.</p> Why is this Necessary? <p>Because this integration is so fast (typically triggering within 5 seconds of finishing an Episode) - it is imperative that Tautulli triggers TCM to update a Title Card after an Episode's watch-status has had time to update within Plex.</p> </li> </ol> <p>Once created, you can close the box within TCM. Unlike the other Connections, your Tautulli connection details will not be stored (and so will not appear) in TCM - this is because TCM only submits API requests to Tautulli to create an agent. Afterwards, it is Tautulli that sends data to TCM, and so no active connection is required.</p>","tags":["Plex","Sonarr","Tautulli"]},{"location":"user_guide/logs/","title":"Server Logs","text":"<p>TitleCardMaker keeps all log files for the system in the <code>config/logs</code> directory -  however, you can also access, view and filter these files within the UI by clicking the small green  server button in the top right of the UI. It is also accessible at the <code>/logs</code> URL.</p> <p> </p> <p>This page will display an interactive table of all recent log messages, all your current log files, and a summary of any recent \"Internal Server Errors.\"</p> <p>Purpose of Logs</p> <p>The purpose of this page is to provide you with a quick way to view and filter logs, it is not a replacement for the actual log files. If you are debugging a problem, it is often better to just view the raw log files.</p>"},{"location":"user_guide/logs/#log-messages","title":"Log Messages","text":""},{"location":"user_guide/logs/#filters","title":"Filters","text":"<p>There are a variety of filter options available to narrow down which log messages are displayed. All filters are optional.</p> <p>After editing any filters, you will need to refresh the log table by clicking  Refresh logs.</p>"},{"location":"user_guide/logs/#message","title":"Message","text":"<p>You can enter any text in the Message Contains input text box to filter out logs which do not contain that text. This is case-insensitive.</p> <p>You may filter messages with \"or\" logic by entering pipe-separated (<code>|</code>) text. For example, <code>Breaking Bad|Better Call Saul</code> will filter messages which contain either \"Breaking Bad\" or \"Better Call Saul\".</p>"},{"location":"user_guide/logs/#context-ids","title":"Context IDs","text":"<p>TCM applies a \"context ID\" to most operations performed via the UI and internally. This ID is a pseudo-random hexstring like <code>0f5ce2</code> and is intended to make filtering out irrelevant logs easier by looking at the messages for one specific operation.</p> <p>You may enter any number of comma-separated context IDs into the Context IDs text box to filter messages associated with those contexts.</p> <p>Table Interaction</p> <p>To easily add a given ID as a filter, simply click on the ID in the log table. This will add the ID to your current filters.</p> <p>Some messages do not have an ID.</p>"},{"location":"user_guide/logs/#date-range","title":"Date Range","text":"<p>Logs can also be filtered between a start and end time. All log messages outside this range will be excluded. Clicking either the Start Date or End Date inputs will open a calendar selector in which you can narrow down your time range.</p> <p>The calendar selectors are just aids, and times can be manually entered if desired.</p> <p>Table Interaction</p> <p>To easily add a date as the start or end of a date range filter, you can click the Timestamp cell in the log table. This will add the selected date as the current start time, or end time (if start time is populated).</p>"},{"location":"user_guide/logs/#log-level","title":"Log Level","text":"<p>This is often the most critical filter. All log messages are categorized in a level of either <code>Trace</code>, <code>Debug</code>, <code>Info</code>, <code>Warning</code>, <code>Error</code>, or <code>Critical</code>. Setting the filter at a specific level will not display messages of lower priority than that level.</p> <p>Table Interaction</p> <p>Clicking a Level cell in the log table will set that log level as the current filter level.</p>"},{"location":"user_guide/logs/#dynamic-links","title":"Dynamic Links","text":"<p>In addition to the filter interactions described above, TCM will also dynamically parse the log messages themselves to create links to the relevent content. For example, a message containing <code>Series[1]</code> would dynamically become a link to the page for the Series with an ID of 1. These links can be clicked to navigate to the relevant page.</p>"},{"location":"user_guide/logs/#api-logs","title":"API Logs","text":"<p>If you are troubleshooting a specific issue, it can be useful to find the start and end of the operation. TCM will log the start of all API requests with a message like:</p> <pre><code>Starting POST \"/api/cards/key\"\n</code></pre> <p>and will end it with a message like:</p> <pre><code>Finished in 8683.2ms\n</code></pre> <p>The specific API endpoint and time will obviously vary depending on your situation, but typically finding the start and then filtering by that operation's Context ID is a good place to begin.</p>"},{"location":"user_guide/logs/#log-files","title":"Log Files","text":"<p>Below the table of log messages will be a table of all log files created by TCM. By default, TCM keeps log files for up to 7 days - however, this can be adjusted with an environment variable.</p> <p>You can click the Download cell to download the associated log file.</p> <p>TCM will cycle log files every 24 hours or 24.9 MB so they can be shared on Discord without Nitro.</p>"},{"location":"user_guide/logs/#internal-server-errors","title":"Internal Server Errors","text":"<p>When an unexpected error occurs within TCM, this usually indicates a bug. To make creating bug reports easier, TCM will list all past internal server errors on the Logs page.</p> <p>Clicking the  GitHub icon will open a new tab on the TCM GitHub page with an issue form pre-filled with some of the applicable information. It will also download a <code>.zip</code> file of the relevant logs, for including in the issue.</p>"},{"location":"user_guide/mask_images/","title":"Mask Images","text":""},{"location":"user_guide/mask_images/#mask-images","title":"Mask Images","text":""},{"location":"user_guide/mask_images/#background","title":"Background","text":"<p>During Card creation, TCM can search for special images referred to as \"mask images.\" These are special images located alongside the Card's specified Source Image which are applied after all other Card effects.</p> <p>Because these images are added on top of the Card after all other effects and image processing, these Mask images can be used to add a \"depth\" effect to the Card.</p>"},{"location":"user_guide/mask_images/#examples","title":"Examples","text":""},{"location":"user_guide/mask_images/#mask-file-naming","title":"Mask File Naming","text":"<p>TCM will look for mask images of a specific name based on the file name of the input Source Image; these are, in order:</p> <ol> <li><code>{filename}-mask.*</code></li> <li><code>{filename}_mask.*</code></li> <li><code>mask.*</code></li> </ol> <p>These masks must be in the same directory as the Source Image (i.e. that Series' Source Directory).</p> <p>File Extension</p> <p>The above <code>.*</code> means that TCM will accept any file extension - but the optimal effect can be achieved with file types which support transparency (<code>.webp</code> and <code>.png</code>).</p> <p>Example</p> <p>If a Card is being created with the default Source Image, e.g. <code>s1e3.jpg</code>, then TCM will look for mask files named <code>s1e3-mask</code>, then <code>s1e3_mask</code>, and finally <code>mask</code> in the same directory.</p> <p>The generic <code>mask</code> file is searched for if you would like to apply a Series-wide mask image, such as a logo.</p>"},{"location":"user_guide/mask_images/#supported-card-types","title":"Supported Card Types","text":"<p>Although not all Card Types support mask images, a vast majority do. Currently all builtin Card Types support this feature except:</p> <ul> <li>Fade</li> <li>Poster</li> <li>Textless (as this would be useless)</li> </ul>"},{"location":"user_guide/mask_images/#processing","title":"Processing","text":"<p>Some Card Types apply pre-processing to the Source Image (such as the Anime Card which increases the contrast); TCM will auto-apply all of these pre-processing affects to any mask images before they are added to the Card to avoid visual artifacts.</p> <p>TCM will also resize the mask image to the size of the default Card canvas used in Card creation (3200x1800), so ensure the mask was saved in the same aspect ratio to avoid distortion.</p>"},{"location":"user_guide/mask_images/#creating-mask-images","title":"Creating Mask Images","text":"<p>TCM does not provide any functionality for creating mask images. This should generally be done in some external image editing software like Photopea, or Photoshop. Both services have content-aware subject select tools which are very helpful at extracting a person/thing from the underlying image.</p> <p>If you are willing to set up another piece of Software, I've had great success with the command line tool BackgroundRemover</p> <pre><code>python -m backgroundremover.cmd.cli -i \"input.jpg\" -o \"output-mask.png\"\n</code></pre>"},{"location":"user_guide/new_series/","title":"Series and Blueprint Browser","text":"<p>From the left-hand navigation menu, new Series and Blueprints can be manually added and imported to TitleCardMaker. When on the home page, the  <code>Add New</code> sub-menu will appear. This can also be accessed from the search bar (top-left corner, or hitting the S key) and clicking the bottom <code>Search for ...</code> result.</p> <p>This page is separated into two sections, the Series browser - where new Series can be search for and added; and the Blueprints browser - where all Blueprint submissions can be viewed, filtered, and imported.</p>","tags":["Series","Blueprints"]},{"location":"user_guide/new_series/#adding-multiple-series","title":"Adding Multiple Series","text":"<p>If you are adding multiple Series (especially with the same Title Card configuration, or first a first-time setup) it is recommended to set up a Sync, as this automates the process.</p>","tags":["Series","Blueprints"]},{"location":"user_guide/new_series/#browse-series","title":"Browse Series","text":"<p>After typing the name of the Series you're looking to add, select the applicable Connection to search. The default is to search your global Episode Data Source, but it is largely irrelevant which Connection you browse (as TCM uses them all). Click <code>Search</code>.</p> <p> </p> <p>Unclickable Results</p> <p>Results which have already been imported will not be clickable, and will appear greyed out. See the first result above.</p> <p>After the results have been populated, you are able to select any number of libraries or Templates. Of course these can also be changed later by going to the Series page itself. After making your selections, clicking any result will add that Series to TitleCardMaker.</p>","tags":["Series","Blueprints"]},{"location":"user_guide/new_series/#browse-blueprints","title":"Browse Blueprints","text":"<p>Blueprints</p> <p>Blueprints are described in much greater detail here.</p> <p>Below the Series browser is the Blueprints browser. From here, you can view the Blueprint submissions for all Series. These can be sorted by (Blueprint) release date and Series name. There are also two filter options which adjust which Blueprints are displayed:</p> <ul> <li>Only show Blueprints for Series which you have already added to TCM</li> <li>Display Blueprints which you have already imported</li> </ul> <p> </p> <p>The Blueprint themselves can be interacted with in various ways:</p> <ul> <li>If the Blueprint has more than one example Card, these can be cycled through by clicking the image.</li> <li>Click the Blueprint Name to search your TitleCardMaker server for that Series.</li> <li>Click the creator's name to show all Blueprints by that creator (or those creators)</li> <li>If there are multiple Blueprints for that Series, a small number icon will appear - clicking this will filter the Blueprint browser by that Series' name.</li> <li>Click the  icon to add the Blueprint to TCM</li> <li>Click the  icon to remove the Blueprint from this list. However, this Blueprint will still be visible if browsing Blueprints by Series.</li> <li>Some Blueprints may be a part of a Set. This is described here.</li> </ul>","tags":["Series","Blueprints"]},{"location":"user_guide/new_series/#refreshing-blueprints","title":"Refreshing Blueprints","text":"<p>For performance reasons, TitleCardMaker caches the Blueprints database and only re-downloads it every few hours. However, if you want to force a reload of the database, you can right click the  Browse Blueprints button.</p>","tags":["Series","Blueprints"]},{"location":"user_guide/scheduler/","title":"The Scheduler","text":"<p>TitleCardMaker runs all core tasks on schedulable intervals. These can be adjusted by accessing the Scheduler page under <code>Settings</code> &gt; <code>Scheduler</code> (or at the <code>/scheduler</code> URL).</p> <p>The Scheduler can be in one of two modes: basic (the default) mode, and advanced mode. These two modes can be switched between at any point by clicking the green button at the bottom of the page. All intervals are reset when switching from basic to advanced mode.</p> <p>Minimum Task Frequency</p> <p>In both modes, the fastest a single Task can be scheduled is once every 10 minutes.</p> <p>TCM will also not start a Task while it is already running, so if a given Task takes longer than its assigned frequency, the second run will be skipped.</p>"},{"location":"user_guide/scheduler/#basic-mode","title":"Basic Mode","text":"<p>While in basic mode, all scheduled Tasks happen on fixed intervals. These intervals are relative to whenever you first launch TCM (i.e. they are not guaranteed to start at the top of the hour). In addition to this, only a subset of the total available Tasks (the most commonly adjusted ones) are displayed.</p> <p> </p> <p>How often these Tasks occur can be changed by editing the text in the Frequency column of the table. This information can be entered as text, and any combination of \"seconds\", \"minutes\", \"hours\", \"days\", and \"weeks\" are supported. </p> <p>Example Frequency</p> <p>A frequency string can be as simple as <code>4 hours</code>, or as complex as <code>1 day 4 hours 12 minutes 23 seconds</code>. </p>"},{"location":"user_guide/scheduler/#advanced-mode","title":"Advanced Mode","text":"<p>In advanced mode, scheduled Tasks happen according to a \"cron\" expression. These are expressions which allow for succinctly describing when something can occur, and can be as simple as <code>*/30 * * * *</code> - meaning \"every 30 minutes\" - to as complex as <code>0 2 * * 1-5</code> - meaning \"at 02:00 AM, Monday through Friday\".</p> <p>Advanced mode also make all Tasks available to be rescheduled.</p> <p> </p> <p>When Tasks run can be adjusted by editing the cron expression in the Schedule column of the table. A live human-readable description of the expression is given in the next column. There are many online resources to creating cron expressions, but a helpful resource is linked at the bottom of the page.</p>"},{"location":"user_guide/series/","title":"Series","text":"<p>Under Construction</p> <p>This documentation is actively being developed.</p> <p>When a Series is clicked on from the home page or the search bar, you will access the \"Series page\" (at <code>/series/{series_id}</code>) where all Series-level options, Title Card customizations, files, and actions can be viewed.</p> <p> </p> <p>This page is separated into two sections - the actions at the top of the page, and the options in the middle/bottom.</p>","tags":["Series"]},{"location":"user_guide/series/#actions","title":"Actions","text":"","tags":["Series"]},{"location":"user_guide/series/#navigation-arrows","title":"Navigation Arrows","text":"<p>On the far left and right of the action bar are arrows ( and ). Clicking either of these will navigate to the previous and next Series alphabetically from the current Series.</p> <p>If you click either arrow and the current page does not change and the arrow becomes greyed out, then there is no next or previous Series to navigate to.</p>","tags":["Series"]},{"location":"user_guide/series/#monitored-status","title":"Monitored Status","text":"<p>Each Series can be monitored and unmonitored. All Series start as monitored unless explicitly unmonitored, which can be done by clicking the green or red button below the Series poster. Unmonitored Series do not do the following actions automatically (all actions can still be done manually):</p> <ul> <li>Refresh Episode data - i.e. check for new Episodes, look for modified Episode titles, etc.</li> <li>Add Episode translations</li> <li>Download missing Source Images</li> </ul> <p>The Tasks in the scheduler that are responsible for the above actions will skip all unmonitored Series.</p>","tags":["Series"]},{"location":"user_guide/series/#create-title-cards","title":"Create Title Cards","text":"<p>Scheduled Action</p> <p>This action occurs automatically as part of the Create Title Cards Task.</p> <p>Create Title Cards can be pressed to prompt TCM to begin updating existing, and create new Title Cards. This action encompasses the following:</p> <ol> <li>Refreshes all Episode data<sup>1</sup>; then</li> <li>Queries any assigned Libraries for updated Episode watched statuses; then</li> <li>Looks for any missing Episode translations; then</li> <li>Download any missing Source Images<sup>2</sup>; and finally</li> <li>Begins Title Card creation</li> </ol> <p>Background Execution</p> <p>Because Title Card creation can take a long time, Card creation is executed in a background thread. This also means that if you start Card creation, make a change which would prompt new Cards, and then restart Card creation; TCM will create, delete, then re-create the Cards.</p>","tags":["Series"]},{"location":"user_guide/series/#library-actions","title":"Library Actions","text":"<p>For every library which the currently selected Series is assigned to, a menu item will appear of the library and Connection name (e.g. <code>TV Shows | Plex</code>). This item can be clicked to view all available actions for that library.</p> <p>New library not visible?</p> <p>If you just added a library to the Series and there is no menu item for it, just reload the page.</p>","tags":["Series"]},{"location":"user_guide/series/#title-card-loading","title":"Title Card Loading","text":"<p>Scheduled Action</p> <p>This action occurs automatically as part of the Load Title Cards Task. Title Cards are never automatically force-reloaded.</p> <p>Selecting Load Cards will load only unloaded Title Cards into the associated Connection and library. This only affects Title Cards which were changed (and not re-loaded), or never loaded in the first place.</p> <p>Selecting Force Reload Cards will reload all Title cards into the associated Connection and library. This is much slower than normal Card loading, but can be used as needed - most commonly when the metadata of a Media Server is reset and previously loaded Title Cards are removed.</p>","tags":["Series"]},{"location":"user_guide/series/#remove-episode-labels","title":"Remove Episode Labels","text":"<p>Plex Servers Only</p> <p>This setting only appears for libraries associate with Plex servers.</p> <p>TitleCardMaker looks for specific labels on Episodes within Plex to determine whether it is able to download Source Images from that Episode. This is done to avoid grabbing a \"Source Image\" which is actually a previously loaded Title Card, or some image with a Kometa (PMM) overlay applied.</p> <p>Alongside each Plex library will be a Remove Episode Labels button. This button can be pressed to remove the labels which TCM uses to track whether an Episode can provide a Source Image. This is applies to all Episodes of this Series within Plex.</p>","tags":["Series"]},{"location":"user_guide/series/#delete-title-cards","title":"Delete Title Cards","text":"<p>All Title Card files can be deleted (and removed from the database) by clicking the Delete Title Cards button on the right-side of the action bar.</p>","tags":["Series"]},{"location":"user_guide/series/#delete-series","title":"Delete Series","text":"<p>The Series itself can be deleted by clicking the Delete Series button on the right-side of the action bar. This will open a prompt asking whether you'd like to delete just the Series, or the Series and all associated Title Card files.</p> <p>If you have toggled the Delete Series Source Images option then this action will also delete all Source Images associated with this Series.</p> <p>This will not delete any associated Templates, Fonts, or Syncs.</p>","tags":["Series"]},{"location":"user_guide/series/#progress-bar","title":"Progress Bar","text":"<p>Underneath the actions bar is a progress bar which displays the total number of currently created and missing Title Cards.</p> <p>This is updated periodically, but clicking the card text will force TCM to refresh that information.</p> Color Accessibility <p>If the default colors are hard to see, these can be changed to higher contrast options by toggling the global  Color Impaired Mode setting.</p> More Cards than libraries? <p>If the listed Card count is higher than the total number of Episodes, then most likely you have enabled Multi-Library Filename Support, and TCM has created a separate Card for each library of the Series.</p>","tags":["Series"]},{"location":"user_guide/series/#poster","title":"Poster","text":"<p>When a Series is added to TitleCardMaker, TCM looks for a poster in your media servers (Plex, Emby, Jellyfin) - if a library has been assigned. If one cannot be found, it searches TMDb, or TVDb.</p> <p>This poster is purely visual and is not used for Title Card creation.</p> Changing the Poster <p>If you would like to change the poster, hover over and click the poster. This will launch a popup where you can either enter a URL which TCM will download the poster from, query TMDb for a poster, or upload a file from your machine. </p> <p>After selecting any of these options, clicking <code>Update</code> will then swap out the currently visible poster for the Series.</p>","tags":["Series"]},{"location":"user_guide/series/#preview-title-card","title":"Preview Title Card","text":"<p>Save your changes</p> <p>Remember that if you make any changes to the Series or Episode Card options, you must click Save for these changes to be come permanent. TCM will not warn you about unsaved changes.</p> <p>On the top right side of the page is a Title Card live preview which can be used to quickly observe changes to Cards.</p> <p>This preview can be refreshed by selecting an Episode from the Preview Episode dropdown (below the Series name), or clicking the preview Title Card itself.</p> <p>The preview will reflect all changes in the Series and Episode except changes to any assigned Templates (due to how these are handled in the underlying database). These changes must be saved.</p>","tags":["Series"]},{"location":"user_guide/series/#options","title":"Options","text":"","tags":["Series"]},{"location":"user_guide/series/#libraries","title":"Libraries","text":"<p>Which libraries this Series can be found in on your Media Servers. This setting is required for a Series' Title Cards to be loaded into the respective server.</p> <p>Any number of libraries can be added to a Series. However, if your effective Episode Data Source is a Media Server, only the first library associated with that Connection will be queried for Episode data.</p> <p>Updating Libraries</p> <p>When adding or removing libraries to a Series, the various library-specific actions can be updated by refreshing the page.</p> <p>Changing Library Names</p> <p>TitleCardMaker stores a lot of data under the specific library name as it appears in your Media Servers. Because of this, changing the names of your libraries in your servers is strongly discouraged if it can be avoided.</p>","tags":["Series"]},{"location":"user_guide/series/#episode-data-source","title":"Episode Data Source","text":"<p>Where to get Episode data from. If left unspecified, this will fall back to the assigned Template(s) or global Episode Data Source value.</p> <p>If this is a Media Server, this Series must have at least one Library associated with that Connection.</p> <ol> <li> <p>During this, TCM queries the effective Episode data source for any new Episodes and adds them to the Series; and updates the titles of all existing Episodes to match what is currently present in the Episode data source if title matching is enabled.\u00a0\u21a9</p> </li> <li> <p>During this, TCM will not replace any existing images, nor will it download any backdrops or logos. TCM will search for images in the order specified in your global image source priority. If the Series does not have any libraries assigned for a given media server Connection (e.g. a Plex Connection being in your source priority, but this Series having no Plex library) then it will be skipped.\u00a0\u21a9</p> </li> </ol>","tags":["Series"]},{"location":"user_guide/setting_priority/","title":"Setting Priority","text":"<p>TitleCardMaker allows for specification of settings in a tiered system of increasing specificity. This means that many settings can be specified in multiple places, and TCM will only choose the highest priority option when actually taking actions.</p> <p>There are two \"levels\" under which settings are evaluated - these are on the Series- and Episode-level. In general these are pretty self explanatory - for example: the Episode Data Source setting is only evaluated per-Series (because an individual Episode cannot have a separate data source); while a Card setting like Font color is evaluated per-Episode.</p> <p>The following priority is listed below in ascending order, meaning elements at the top of the list will always take priority of those below them.</p> <p>Tip to Remember Priority</p> <p>Rather than referring to or remembering the following list, it's easiest to remember that settings are overwritten in increasing specificity. Meaning the more specific a setting, the higher priority.</p> <ol> <li>Episode extras</li> <li>Episode Template extras</li> <li>Series extras</li> <li>Series Template extras</li> <li>Episode settings</li> <li>Episode Named Font settings</li> <li>Episode Template settings<sup>1</sup></li> <li>Series settings</li> <li>Series Named Font settings</li> <li>Series Template settings<sup>1</sup></li> <li>Global Template settings<sup>1</sup></li> <li>Global settings</li> <li>Card-type default settings</li> </ol> <ol> <li> <p>This includes any Named Font assigned to the Template.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"user_guide/settings/","title":"Settings","text":"<p>From the left-hand navigation menu, Global Settings can be accessed and set.</p> <p> </p> <p>Settings listed here are the global defaults for TitleCardMaker, but many can be overwritten within an Episode, Series, or Template. If a specific setting can be overwritten, then some variation of this badge will be displayed next to the Setting (here, not within the UI).</p> <p>Episode, Series, Template</p> <p>With the above meaning it can be overwritten per-Episode, per-Series, and per-Template.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#recommended-settings","title":"Recommended Settings","text":"<p>TitleCardMaker's default settings are typically the recommended settings for a vast majority of users. Specifics about each setting are detailed below.</p> Recommended Settings DockerNon-Docker Setting Recommended Value Card Directory /config/cards/ Source Directory /config/source/ Delete Series Source Images Episode Data Source Sonarr Image Source Priority <code>TMDb</code> <code>Plex</code> <code>Emby</code> <code>Jellyfin</code><sup>2</sup> Enable Specials Delete Missing Episodes Default Card Type Personal Preference Excluded Card Types Personal Preference Watched Episode Style Unique Unwatched Episode Style Personal Preference Default Templates Blank Card Dimensions 3200x1800<sup>3</sup> Card Quality 95 Card Extension .jpg Filename Format {series_full_name} - S{season_number:02}E{episode_number:02} Specials Folder Format Specials Season Folder Format Season Multi-Library File Naming Setting Recommended Value Card Directory ./config/cards/ Source Directory ./config/source/ Delete Series Source Images Episode Data Source Sonarr Image Source Priority <code>TMDb</code> <code>Plex</code> <code>Emby</code> <code>Jellyfin</code><sup>2</sup> Enable Specials Delete Missing Episodes Default Card Type Personal Preference Excluded Card Types Personal Preference Watched Episode Style Unique Unwatched Episode Style Personal Preference Default Templates Blank Card Dimensions 3200x1800<sup>3</sup> Card Quality 95 Card Extension .jpg Filename Format {series_full_name} - S{season_number:02}E{episode_number:02} Specials Folder Format Specials Season Folder Format Season Multi-Library File Naming","tags":["Global Settings"]},{"location":"user_guide/settings/#episode-data","title":"Episode Data","text":"","tags":["Global Settings"]},{"location":"user_guide/settings/#episode-data-source","title":"Episode Data Source","text":"<p>Series, Template</p> <p>So that Episode data (e.g. numbers, titles, airdates, etc.) does not have to be manually entered, TitleCardMaker needs to source Episode data from some external source. Any enabled Connection can be used as an Episode Data source - however, there are some differences between each.</p> Differences in Episode Data Sources Episode Data Source Provides Absolute Episode Numbers Only Provides Data for Downloaded Episodes Relative Speed Emby Average Jellyfin Average Plex Average Sonarr <sup>1</sup> Fast TMDb Fast TVDb Fast <p>The speed of your Media Server and Sonarr as an Episode data source will vary wildy with both the number of Episodes for a given Series, as well as the overall size of your database.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#image-source-priority","title":"Image Source Priority","text":"<p>Similar to the Episode Data Source option, this setting controls where TitleCardMaker should gather images (this includes source images, logos, and posters) from. Unlike the Episode data source, multiple sources can be specified here, and the selected order does matter.</p> <p>TitleCardMaker, while searching for images, will try the listed sources in order until a source image is found.</p> Recommended Setting <p>For a vast majority of users, specifying TMDb and then your Media Servers (so <code>TMDb</code> <code>Plex</code>, etc.) is recommended. This is  because TMDb has a much wider variety of image availability, and is typically much higher quality than the auto-scraped images from your Media Server.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#sync-specials","title":"Sync Specials","text":"<p>Series, Template</p> <p>Whether to ignore Episodes from Season 0 by default.</p> <p>Many Series have \"bonus\" content like behind the scenes, featurettes, shorts, commercials, etc. listed under Season 0 as Specials. If you would like TCM to ignore these when grabbing Episode data from you specified Episode data source, then uncheck this setting.</p> Manually Adding Specials <p>Even if this setting is disabled (so Specials are ignored), Episodes can still be added manually.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#delete-missing-episodes","title":"Delete Missing Episodes","text":"<p>Whether to delete Episodes (from TCM) which are not present in the assigned Episode Data Source. When an Episode is deleted, the associated Title Card file is also deleted.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#title-cards","title":"Title Cards","text":"","tags":["Global Settings"]},{"location":"user_guide/settings/#default-card-type","title":"Default Card Type","text":"<p>Episode, Series, Template</p> <p>The global default card type for all Title Cards. Any instances where the card type is left unspecified will use this card type.</p> Missing Card Types? <p>Excluded card types are not shown in this dropdown.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#excluded-card-types","title":"Excluded Card Types","text":"<p>Any number of card types to exclude from any card type dropdowns. This is purely a cosmetic selector, and is intended to make finding your desired card easier if you find there are specific types you intend to never use.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#watched-and-unwatched-episode-styles","title":"Watched and Unwatched Episode Styles","text":"<p>Episode, Series, Template</p> <p>The default style for all Episodes that are watched or unwatched in their indicated Media Server. For Episodes whose watched statuses cannot be determined (likely the Episode is not available in your Media Server), the unwatched styling is used.</p> <p>For a visual example of each available style, click the  icon next to either dropdown.</p> <p>Relevant User</p> <p>The watched statuses for Emby and Jellyfin can be adjusted in the Connection configuration, but the watched statuses of a Plex Media Server will always come from the server admin.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#imagemagick","title":"ImageMagick","text":"","tags":["Global Settings"]},{"location":"user_guide/settings/#card-dimensions","title":"Card Dimensions","text":"<p>The output dimensions of all created Title Cards. This can be reduced to decrease the filesize (and therefore quality) of your Title Card assets, or increased for the opposite effect.</p> 16:9 Aspect Ratio <p>TCM will not stop you from setting a non-standard (non-16:9) aspect ratio, but your created Title Cards will be cropped when loaded into your Media Server.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#card-quality","title":"Card Quality","text":"<p>Applicability</p> <p>This setting is only applicable when using a Card Extension of <code>jpg</code>, <code>jpeg</code>, or <code>png</code>.</p> <p>The compression level to apply when creating Title Cards. The minimum quality, 1, will result in extremely low quality (highly compressed) Cards; and the highest quality, 100, will result in the best quality (but least-compressed) Cards. The recommended value is between 92 and 95.</p> Advanced Details <p>This setting is not exactly linear in the effective quality or reduced file sizes. This means changing the quality from 90 to 45 will not necessarily result in a 50% reduction in filesize or image quality.</p> <p>For more details, read the applicable ImageMagick documentation.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#imagemagick-executable","title":"ImageMagick Executable","text":"<p>The filepath to the ImageMagick executable (usually <code>magick.exe</code>) which will be used to run all ImageMagick commands. This is required for some Windows users if the <code>convert</code> command is not properly added to your system PATH - this usually manifests as all Title Cards failing to be created.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#root-folders","title":"Root Folders","text":"<p>The root folders listed here serve as the primary asset directories for both Title Card and Source images. If using Docker, it is importan that both of these directories are accessible outside of the Container.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#card-directory","title":"Card Directory","text":"<p>Series</p> <p>The root folder for all Title Cards created by TitleCardMaker. Within this directory, each Series added to TitleCardMaker will have a subfolder created for it, under which cards will be created.</p> Example DockerNon-Docker <p>For Docker setups, the recommended settings for this is <code>/config/cards</code>. In this instance, if the Series <code>Breaking Bad</code> were added to TitleCardMaker, I'd expect to find all associated Title Cards under the <code>/config/cards/Breaking Bad (2008)/</code> directory.</p> <p>When installed locally, this setting can be whatever is most-convenient. It is very common to specify a <code>cards</code> directory within your local installation directory, e.g. <code>./config/cards/</code>. However, this is not required. In this instance, if the Series <code>Breaking Bad</code> were added to TitleCardMaker, I'd expect to find all associated Title Cards under the <code>./config/cards/Breaking Bad (2008)/</code> directory.</p> <p>This directory does not need to align with your Media folders (where your media files are kept), as TCM loads the Title Cards directly into your Media Server, bypassing any \"local media\" matching.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#source-directory","title":"Source Directory","text":"<p>The root folder for all Source Images downloaded and used by TitleCardMaker. Within this directory, each Series added to TitleCardMaker will have a subfolder created for it, under which Source Images (and logos) will be added.</p> What's a Source Image? <p>A Source Images is the (typically) textless input images which text or effects are added on top of (by TCM) to create a Title Card.</p> Example DockerNon-Docker <p>For Docker setups, the recommended settings for this is <code>/config/source</code>. In this instance, if the Series <code>Breaking Bad</code> were added to TitleCardMaker, I'd expect to find all associated source images (and logos) under the <code>/config/source/Breaking Bad (2008)/</code> directory.</p> <p>When installed locally, this setting can be whatever is most- convenient. It is very common to specify a <code>source</code> directory within your local installation directory, e.g. <code>./config/source/</code>. However, this is not required. In this instance, if the Series <code>Breaking Bad</code> were added to TitleCardMaker, I'd expect to find all associated source images (and logos) under the <code>./config/source/ Breaking Bad (2008)/</code> directory.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#source-image-deletion","title":"Source Image Deletion","text":"<p>Whether to delete Source Images when a Series is deleted from TitleCardMaker.</p> <p>If enabled, any Series that are deleted (manually or automatically) will have their entire source directory cleared - including Source Images, posters, logos, and backdrop art.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#file-naming","title":"File Naming","text":"","tags":["Global Settings"]},{"location":"user_guide/settings/#filename-format","title":"Filename Format","text":"<p>Series</p> <p>The format / naming convention of how to name the Title Card files. This is a format, and will be applied to each individual Title Card. This format can contain variable data (wrapped in <code>{}</code> curly braces) that is evaluated for each Title Card.</p> <p>A complete list of the available variables is listed here.</p> Example Formats <pre><code>{series_full_name} - S{season_number:02}E{episode_number:02}\n</code></pre> <p>Will produce files named like <code>Breaking Bad (2008) - S01E01</code>.</p> <pre><code>{series_name} [{series_imdb_id}] - S{season_number}E{episode_number} - {title}\n</code></pre> <p>Will produce files named like <code>Breaking Bad [tt0903747] - S1E1 - Pilot</code>.</p> TRaSH Naming Convention <p>If you follow the TRaSH recommended naming scheme, you can use the following setting:</p> <pre><code>{series_full_name} - S{season_number:02}E{episode_number:02} - {title}\n</code></pre> <p>It is important to note that this can produce extremely long file names - sometimes too long for the operating system - if the Episode titles are exceedingly long. TCM will automatically truncate all file names at 254 characters.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#card-extension","title":"Card Extension","text":"<p>Image extension for all created Title Cards. Below is a table summarizing the differences in each type (with regards to TCM):</p> Image Extension Differences Format Compression Category Supports Transparency Relative Filesize <code>jpg</code> / <code>jpeg</code> Lossy 100% <code>png</code> Lossless 230% <code>tiff</code> Lossless 300% <code>gif</code> Lossless 90% <code>webp</code> Lossless / Lossy 70% <p>Note about Transparency</p> <p>Only a select few card types can take advantage of transparency. These are typically types that allow use of a background color instead of an image - e.g. the Roman Numeral and Logo cards.</p> <p>My personal recommendation is to use the <code>webp</code> image extension because of the file size savings and support for transparency. The reason this is not the default is because of the ubiquity of JPEG images.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#specials-folder-format","title":"Specials Folder Format","text":"<p>The format / naming convention for the subfolder of all Title Cards associated with Specials (season 0). This format can contain variable data, see a complete list of the available variables is listed here.</p> Hidden Season Subfolder <p>If you would like to completely remove the subfolder - i.e. write these Title Cards directory at the Title Card directory for the  Series - then specify the format as:</p> <pre><code>{''}\n</code></pre>","tags":["Global Settings"]},{"location":"user_guide/settings/#season-folder-format","title":"Season Folder Format","text":"<p>The format / naming convention for the subfolder of all Title Cards associated with all non-Specials (anything other than season 0). This format can contain variable data, see a complete list of the available variables is listed here.</p> Hidden Season Subfolder <p>If you would like to completely remove the subfolder - i.e. write these Title Cards directory at the Title Card directory for the  Series - then specify the format as:</p> <pre><code>{''}\n</code></pre>","tags":["Global Settings"]},{"location":"user_guide/settings/#multi-library-file-naming","title":"Multi-Library File Naming","text":"<p>Warning</p> <p>Erroneously enabling this setting can result in TitleCardMaker deleting and remaking duplicates of all your Title Cards. Please read the following descripion and the in-UI help text very thoroughly.</p> <p>Whether to add a unique Library-specific \"identifier\" to the filenames of all Title Cards. This is separate from your Filename Format setting.</p> <p>This setting should only be enabled by users who have more than one Media Server and would like to utilize watched status specific styling.</p> <p>Once enabled, TitleCardMaker will keep separate Title Card files created for each Library assigned to a Series. </p> Example <p>The following example showcases a use of this setting in a Series with three libraries alongside Templates which utilize watched-status Filters to create completely different Title Cards for each library.</p> <p> </p> <p>The first two columns are for libraries in which the Episode is watched, and in the third column that Episode has not been watched.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#web-interface","title":"Web Interface","text":"","tags":["Global Settings"]},{"location":"user_guide/settings/#home-page-size","title":"Home Page Size","text":"<p>How many Series to display on the home screen. Larger values will result in longer load times. Must be between 1 and 250.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#episode-data-table-page-size","title":"Episode Data Table Page Size","text":"<p>How many Episodes per page to display in Episode data tables. These are the tables accessed on a Series page in the Episode Data tab. Must be at least 1.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#source-image-preview-page-dimensions","title":"Source Image Preview Page Dimensions","text":"<p>How many Source Image previews to display per page. These are displayed on a Series page in the Files tab. This is entered as the number of rows and columns - e.g. <code>3x4</code> is 3 rows of 4 columns each. Must be between 1 and 100 items per page.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#title-card-preview-page-dimensions","title":"Title Card Preview Page Dimensions","text":"<p>How many Title Card previews to display per page. These are displayed on a Series page in the Files tab. This is entered as the number of rows and columns - e.g. <code>2x3</code> is 2 rows of 3 columns each. Must be between 1 and 100 items per page.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#home-page-table-display","title":"Home Page Table Display","text":"<p>The home page can be displayed in two ways: as a table, or as a series of posters. The tabular view is recommended because it contains more information, allows you to perform bulk actions on multiple Series at once, easily edit specific Series data, and is generally faster. An example of the two is shown below.</p> Tabular ViewPoster View <p> </p> <p> </p>","tags":["Global Settings"]},{"location":"user_guide/settings/#simplified-episode-data-tables","title":"Simplified Episode Data Tables","text":"<p>Whether to hide Advanced (uncommonly edited) columns from Episode data tables. This is purely a visual toggle inted to make navigation easier, and any existing customizations, whether they were entered beforehand or are imported from a Blueprint are still applied.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#stylize-unmonitored-series-posters","title":"Stylize Unmonitored Series Posters","text":"<p>Whether to apply different styling to the posters of unmonitored Series on the home screen. This is to make differentiating between the two easier when navigating the home screen.</p> <p>Stylized posters have a blurred grayscale effect applied.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#color-impaired-mode","title":"Color Impaired Mode","text":"<p>Accessibility feature to utilize an alternate coloring which makes certain color combinations more distinguishable for those with color impairments.</p> <p>Accessibility Feedback</p> <p>If you have feedback or suggestions on improving the accessibility of the project, please reach out on the Discord or GitHub.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#reduced-animations","title":"Reduced Animations","text":"<p>Whether to disable various animations within the UI. This can be for improved site performance or accessibility.</p> <p>This does not disable all animations, just the more \"egregious\" ones like the home-page Series loading.</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#interactive-title-cards","title":"Interactive Title Cards","text":"<p>Whether to enable the click/right-click functionality of Title Cards in the UI. This only applies to the Card images displayed on the Files tab of the Series page.</p> <p>If enabled, clicking the image will instruct TCM to re-create the Title Card if the card configuration has changed; while right-clicking will instruct TCM to delete and re-create the Title Card (even if no changes occurred).</p>","tags":["Global Settings"]},{"location":"user_guide/settings/#display-live-log-messages","title":"Display Live Log Messages","text":"<p>Whether to display real-time log messages within the UI. If enabled, TCM will open a Websocket which displays real-time log messages in the lower right corner of the UI.</p> <p>The minimum \"level\" of messages which are displayed can be adjusted with the appropriate environment variable.</p> <ol> <li> <p>This can be toggled on/off.\u00a0\u21a9</p> </li> <li> <p>Only include the Connections which you are personally using.\u00a0\u21a9\u21a9</p> </li> <li> <p>Feel free to reduce this to some ratio of 16:9 (e.g. 1600:900) if you want to save storage space (at the minor cost of image fidelity). Increasing this is not recommended.\u00a0\u21a9\u21a9</p> </li> </ol>","tags":["Global Settings"]},{"location":"user_guide/syncs/","title":"Syncs","text":"<p>Under Construction</p> <p>This documentation is actively being developed.</p>"},{"location":"user_guide/system/","title":"System Summary","text":"<p>The System page shows high-level details of TitleCardMaker, provides helpful links to various TCM-resources, and displays all system backups.</p> <p> </p>"},{"location":"user_guide/system/#system-details","title":"System Details","text":""},{"location":"user_guide/system/#current-version","title":"Current Version","text":"<p>What version of TitleCardMaker you are currently running.</p> <p>If you updated and do not see this version number change, verify you have properly shutdown and restarted TitleCardMaker for those changes to take effect.</p>"},{"location":"user_guide/system/#execution-mode","title":"Execution Mode","text":"<p>Whether TCM is being executed in Docker or non-Docker mode.</p>"},{"location":"user_guide/system/#database-schema","title":"Database Schema","text":"<p>The current version of the SQL database being used.</p>"},{"location":"user_guide/system/#uptime","title":"Uptime","text":"<p>How long TCM has been running.</p>"},{"location":"user_guide/system/#links","title":"Links","text":"<p>Relevant links for the TCM project.</p>"},{"location":"user_guide/system/#system-backups","title":"System Backups","text":"<p>TitleCardMaker will periodically take system backups of your SQL database and global settings (see the scheduler), as well as perform a system backup before attempting any SQL database migrations (which might occur when updating TCM). These backups will be kept for 21 days by default, but this can be adjusted with an environment variable.</p> <p>These backups are stored in <code>config/backups</code>, but each backup can be restored- from or deleted via the table.</p> <p>Restoring from a Backup</p> <p>It is generally inadvisable to attempt to restore to a backup whose Database Schema does not match your current version, as these data migrations are often not reversible, and this can result in TCM data loss.</p>"},{"location":"user_guide/templates/","title":"Templates","text":"<p>Under Construction</p> <p>This documentation is actively being developed.</p> <p>A Template is a set of custom settings and Card configurations that can be assigned to multiple Series or Episodes at once. Mutliple Templates can be assigned to a Series or Episode, and, with Filters, can be used to conditionally apply setting changes. Templates can be viewed and edited at the Templates page within TCM (the <code>/card-templates</code> URL).</p> <p>An easy way to view Templates is that they allow you to group Card customizations together so they can be easily edited en-masse without changing each Series individually. The most common use-case is to develop a Template (or a set of Templates) that applies to some subset of your Series - e.g. all anime, or all documentaries - and apply those Templates automatically when Syncing.</p> <p>Standard Example</p> <p>By far the most common example of using a Template is for utilizing different card configurations for anime and non-anime cards. Creating an anime Template which overrides the card type, adds translations, and potentially adds absolute episode numbering allows for easily maintaining two very separate card looks. </p> <p>Some widely used Templates can be found here.</p>","tags":["Templates"]},{"location":"user_guide/templates/#template-priority","title":"Template Priority","text":"<p>One key feature of Templates is the ability to assign more than one to a Series or Episode and implement a priority system using Filters.</p> <p>Whenever a Template is assigned, TCM evaluates whether that Template should be applied to whatever operation it is performing. It does this by looking at the assigned Filters; and the first Template whose Filter conditions are all met will be utilized.</p> <p>Within the UI, Templates are always displayed in order. Meaning the first Template listed in the dropdown of a Sync, Series, or Episode is the highest priority Template.</p>","tags":["Templates"]},{"location":"user_guide/templates/#creating-a-new-template","title":"Creating a New Template","text":"<p>At the top of the Templates page, a new Template can be created by clicking the Create New Template button. This will create a \"blank\" Template.</p> <p>Clicking the accordion will expand the Template, where all customization can be entered.</p>","tags":["Templates"]},{"location":"user_guide/templates/#previews","title":"Previews","text":"<p>On the right-hand side of all Templates are 'live' previews of the current Template. This preview reflects the currently entered settings - not necessarily what is saved - and can be refreshed by clicking the  Refresh Preview button.</p>","tags":["Templates"]},{"location":"user_guide/templates/#customization","title":"Customization","text":"<p>All Templates have the following options which can be adjusted:</p> <ul> <li>...</li> </ul> <p>Each of these is described in greater detail below. All values can be left blank - if blank, TCM will use the next highest priority setting from the Series, Episode, or global setting. Setting priorities are listed here.</p>","tags":["Templates"]},{"location":"user_guide/templates/#name","title":"Name","text":"<p>A Template's name is purely for easier selection within the TCM UI. If you are using Tiered Templates, it is recommended to include the relative priority of the Template in the name - e.g. Tier 1 - Unwatched Anime, or Tier 0 - All Anime.</p> <p>Importing Blueprint Templates</p> <p>The name of a Template is also used to match Templates when importing Blueprints.</p> <p>For example - if you are importing a Blueprint featuring a Template named Anime and have already created a Template named Anime, then TCM will not duplicate the Template and instead just assign the existing Template to the Series.</p> <p>This is relatively uncommon, as Templates are not typically included in Blueprints.</p>","tags":["Templates"]},{"location":"user_guide/templates/#filters","title":"Filters","text":"<p>Filters are a critical component of utilizing different priority Templates for more fine-tuned customization. A Template can have any number of Filters, and all Filters must be true (or unevaluatable) for a Template to be applied.</p> <p>Each condition of a Filter is made up of 3 parts. An Argument, which is the variable pulled from the specific Series or Episode being evaluated; an Operation which is what operation is being applied to the Argument; and a Reference Value which is what the result of the evaluation is compared against. To remove a condition, clear its Operation (the middle column).</p> <p>Example</p> <p>To add a Filter condition which only applies to unwatched pilots (season 1 episode 1 of a Series), you would create the following conditions:</p> Argument Operation Reference Value <code>Season Number</code> <code>equals</code> <code>1</code> <code>Episode Number</code> <code>equals</code> <code>1</code> <code>Episode Watched Status</code> <code>is false</code> <p>Note that there is no reference value for the <code>Episode Watched Status</code> condition, as the <code>is false</code> operation does not need to reference another value.</p> <p>If you enter some invalid condition - like a bad reference value, or a nonsensical operation - then the condition is skipped (which is the same as being true).</p> <p>Optimal Filter Ordering</p> <p>If you'd like to make marginal perfomance improvements, it is best practice to put conditions which are more likely to fail - i.e. the more restrictive conditions - first, as this short-circuits the Filter evaluation logic.</p> <p>For example, putting a condition for <code>Episode Number</code> <code>equals</code> before <code>Season Number</code> <code>equals</code> would be ideal since more failures will occur on the Episode number condition than the season number condition.</p> <p>Below is a summary of all Filter arguments, their valid operations, a description of what this Filter accomplishes, and whether it requires a reference value.</p> <p>All Supported Filter Conditions<sup>1</sup></p> Series NameSeries YearNumber of SeasonsSeries Library NamesSeries LogoReference FileEpisode Watched StatusSeason NumberEpisode NumberAbsolute NumberEpisode TitleEpisode Title LengthEpisode AirdateEpisode Extras Operation Description Reference Value equals Only apply to Series of the given name does not equal Do not apply to Series of the given name starts with Only apply to Series whose name starts with the given text does not start with Do not apply to Series whose name starts with the given text ends with Only apply to Series whose name ends with the given text does not end with Do not apply to Series whose name ends with the given text contains Only apply to Series whose name contains the given text does not contain Do not apply to Series whose name contains the given text matches Only apply to Series whose name matches the given regex does not match Do not apply to Series whose name matches the given regex <p>The <code>is before</code> and <code>is after</code> conditions  cannot be used with a Series Year argument; see the Episode Airdate argument, or use the math operations (less than, greater than, etc.).</p> Operation Description Reference Value equals Only apply to Series whose year is exactly the given number does not equal Do not apply to Series whose year is exactly the given number matches Only apply to Series whose year matches the given regex does not match Do not apply to Series whose year matches the given regex is less than Only apply to Series whose year is less than the given number is less than or equal Only apply to Series whose year is less than or equal to the given number is greater than Only apply to Series whose year is greater than the given number is greater than or equal Only apply to Series whose year is greater than or equal to the given number <p>The Number of Seasons argument only counts Episodes which are in TCM.</p> Operation Description Reference Value equals Only apply to Series with exactly the given number of seasons does not equal Do not apply to Series with exactly the given number of seasons is less than Only apply to Series whose number of seasons is less than the given number is less than or equal Only apply to Series whose number of seasons is less than or equal to the given number is greater than Only apply to Series whose number of seasons is greater than the given number is greater than or equal Only apply to Series whose number of seasons is greater than or equal to the given number <p>Library names are evaluated as a list of all assigned libraries, meaning the full library name must be specified to filter on this argument. For example, if I had a Series assigned to the <code>Anime HD</code> and <code>Anime 4K</code> libraries, the reference value <code>Anime</code> would not match either of these. The entire name, such as <code>Anime HD</code> would be required.</p> Operation Description Reference Value contains Only apply to Series with a library of the given name does not contain Do not apply to Series with a library of the givens name <p>This Filter condition only looks at the default Series logo - e.g. <code>logo.png</code> within the source directory.</p> Operation Description Reference Value file exists Only apply to Series whose logo exists file does not exist Only apply to Series whose logo does not exist <p>This Filter condition can be used with Variables to dynamically apply a Template based on the existence of some file, such as a poster, per-season logo, etc.</p> Operation Description Reference Value file exists Only apply to Series where the indicated file exists file does not exist Only apply to Series where the indicated file does not exist <p>Watched statuses are evaluated per-library (even if Multi-Library mode is disabled).</p> Operation Description Reference Value is true Only apply to Episodes that have been watched is false Do not apply to Episode that have been watched is null Only apply to Episode whose watched status is unknown<sup>2</sup> is not null Only apply to Episode whose watched status is known<sup>2</sup> Operation Description Reference Value is true Only apply to Episodes that are not part of season 0 equals Only apply to Episodes with exactly the given season number does not equal Do not apply to Episodes with exactly the given season number is less than Only apply to Episodes whose season number is less than the given number is less than or equal Only apply to Episodes whose season number is less than or equal to the given number is greater than Only apply to Episodes whose season number is greater than the given number is greater than or equal Only apply to Episodes whose season number is greater than or equal to the given number Operation Description Reference Value equals Only apply to Episodes with exactly the given episode number does not equal Do not apply to Episodes with exactly the given episode number is less than Only apply to Episodes whose episode number is less than the given number is less than or equal Only apply to Episodes whose episode number is less than or equal to the given number is greater than Only apply to Episodes whose episode number is greater than the given number is greater than or equal Only apply to Episodes whose episode number is greater than or equal to the given number <p>Special Variable</p> <p>The variable <code>{absolute_episode_number}</code> can be used in episode text format strings (and other locations) which will use the absolute episode number if available, and the normal episode number, otherwise.</p> Operation Description Reference Value is null Only apply to Episodes with no absolute episode number is not null Only apply to episodes with an absolute episode number equals Only apply to Episodes with exactly the given absolute episode number does not equal Do not apply to Episodes with exactly the given absolute episode number is less than Only apply to Episodes whose absolute episode number is less than the given number is less than or equal Only apply to Episodes whose absolute episode number is less than or equal to the given number is greater than Only apply to Episodes whose absolute episode number is greater than the given number is greater than or equal Only apply to Episodes whose absolute episode number is greater than or equal to the given number Operation Description Reference Value equals Only apply to Episodes whose title is exactly some text does not equal Do not apply to Episodes whose title is exactly some text starts with Only apply to Episodes whose title starts with some text does not start with Do not apply to Episodes whose title starts with some text ends with Only apply to Episodes whose title ends with some text does not end with Do not apply to Episodes whose title ends with some text contains Only apply to Episodes whose title contains some text does not contain Do not apply to Episodes whose title contains some text matches Only apply to Episodes whose title matches some regex does not match Do not apply to Episodes whose title matches some regex <p>All title length evaluations are done on the original title, before any title text formatting or splitting.</p> Operation Description Reference Value equals Only apply to Episodes whose title length is exactly the given number does not equal Do not apply to Episodes whose title length is exactly the given number is less than Only apply to Episodes whose title length is less than the given number is less than or equal Only apply to Episodes whose title length is less than or equal to the given number is greater than Only apply to Episodes whose episode title length is greater than the given number is greater than or equal Only apply to Episodes whose episode title length is greater than or equal to the given number <p>All airdate reference values must be entered as <code>YYYY-MM-DD</code> - e.g. <code>2023-12-30</code>.</p> Operation Description Reference Value is null Only apply to Episodes with no airdate is not null Do not apply to Episodes with airdates is before Only apply to Episodes which aired before the given date is after Only apply to Episodes which aired after the given date Operation Description Reference Value is null Only apply to Episodes with no extras is not null Do not apply to Episodes with any extras contains Only apply to Episodes with extras of the given label does not contain Do not apply to Episodes with extras of the given label","tags":["Templates"]},{"location":"user_guide/templates/#card-type","title":"Card Type","text":"<p>The card type to apply as part of this Template.</p>","tags":["Templates"]},{"location":"user_guide/templates/#font","title":"Font","text":"<p>A Named Font to apply as part of this Template.</p>","tags":["Templates"]},{"location":"user_guide/templates/#watched-and-unwatched-episode-style","title":"Watched and Unwatched Episode Style","text":"<p>How to stylize watched and unwatched Episodes as part of this Template.</p>","tags":["Templates"]},{"location":"user_guide/templates/#hide-season-titles","title":"Hide Season Titles","text":"<p>Whether to hide season titles as part of this Template.</p>","tags":["Templates"]},{"location":"user_guide/templates/#season-titles","title":"Season Titles","text":"<p>...</p> <ol> <li> <p>Argument and operation pairs which are meaningless (but technically valid) - e.g. <code>Series Name</code> <code>is greater than</code> <code>...</code> - are not listed. Many of these are either always true or always false, but hold no real meaning.\u00a0\u21a9</p> </li> <li> <p>An Episode's watched status is unknown if the Episode cannot be found in an associated Media Server within the specified library.\u00a0\u21a9\u21a9</p> </li> </ol>","tags":["Templates"]},{"location":"user_guide/variables/","title":"Available Variables","text":"<p>Throughout TCM, when something is referred to as a \"format\" or \"format string\", this means that any of the internally defined variables can be used, allowing for more fine-tuned customization. Accessing these variables is done by specifying the variable name in curly brackets (<code>{}</code>), such as <code>{episode_number}</code>.</p> <p>This page documents all the available variables.</p>","tags":["Series"]},{"location":"user_guide/variables/#variable-reference","title":"Variable Reference","text":"<p>For reference, each variable example is shown for the same Episode of Breaking Bad with some hypothetical TCM customizations.</p> Inherent MetadataText VariablesCardinal and Ordinal NumbersCalculated MetadataFontsFilesDatabase IDsInternal Data Variable Name Description Example <code>series_name</code> Name of the Series <code>Breaking Bad</code> <code>series_full_name</code> Full name of the Series <code>Breaking Bad (2008)</code> <code>year</code> Series Release year <code>2008</code> <code>season_number</code> Season number <code>2</code> <code>episode_number</code> Episode number <code>6</code> <code>absolute_number</code> Absolute episode number <code>13</code> <code>absolute_episode_number</code> The absolute number (if available), otherwise the episode number <code>13</code> <code>airdate</code> Episode airdate<sup>3</sup> <code>2009-04-12</code> <code>watched</code> Whether the Episode is watched or not <code>true</code> Variable Name Description Example <code>title</code> Original title of the Episode <code>Peekaboo</code> <code>title_text</code> Formatted title text of the Card<sup>1</sup> <code>PEEKABOO</code> <code>hide_season_text</code> Whether to hide season text <code>false</code> <code>hide_episode_text</code> Whether to hide episode text <code>false</code> <code>season_text</code> The season text of the Card <code>Season 2</code> <code>episode_text</code> The episode text of the Card <code>Episode 6</code> <p>Deprecated Variables</p> <p>Previously, cardinal and ordinal spelling of numbers (e.g. <code>Two</code>, <code>Second</code>) were available as direct variables (<code>season_number_cardinal</code>). These are now accessed by the <code>to_cardinal()</code> and <code>to_ordinal()</code> functions. See here.</p> Variable Name Description Example <code>season_episode_count</code> Number of Episodes in the season <code>13</code> <code>season_episode_max</code> Maximum episode number in the season <code>13</code> <code>season_absolute_max</code> Maximum absolute episode number in the season <code>20</code> <code>series_episode_count</code> Total number of Episodes in the Series <code>62</code> <code>series_episode_max</code> Maximum episode number in the Series <code>16</code> <code>series_absolute_max</code> Maximum absolute episode number in the Series <code>62</code> <p>How do these differ?</p> <p>At first glance, the maximum and count variables (like <code>season_episode_count</code> and <code>season_episode_max</code>) might appear the same (and in most cases they are), but for Series where Episodes are missing these two would differ.</p> <p>For example, if I had Episodes 3-10 of Breaking Bad in TCM, <code>season_episode_count</code> would be <code>8</code>, while <code>season_episode_max</code> would be 10.</p> <p>The same logic is true for their absolute-number equivalents.</p> Variable Name Description Example <code>font_color</code> Font color <code>yellow</code> <code>font_file</code> File path to the font file <code>/config/assets/fonts/0/Breaking Bad.ttf</code> <code>font_size</code> Font size <code>1.2</code> <code>font_kerning</code> Font kerning <code>2.3</code> <code>font_stroke_width</code> Font stroke width <code>1.0</code> <code>font_interline_spacing</code> Font interline spacing <code>0</code> <code>font_interword_spacing</code> Font interword spacing <code>20</code> <code>font_vertical_shift</code> Font vertical shift <code>20</code> Variable Name Description Example <code>source_file</code> File path to the Source Image <code>/config/source/Breaking Bad (2008)/s2e6.jpg</code> <code>card_file</code> File path to the Title Card <code>/config/cards/Breaking Bad (2008)/Season 2/Breaking Bad (2008) - S02E06.jpg</code> <code>source_directory</code> Path to the Series' source directory <code>/config/source/Breaking Bad (2008)/</code> Variable Name Description Example <code>series_emby_id</code> Emby ID of the Series <code>0:TV Shows:abcdef</code> <code>series_imdb_id</code> IMDb ID of the Series <code>tt0903747</code> <code>series_jellyfin_id</code> Jellyfin ID of the Series <code>1:TV:def0123</code> <code>series_sonarr_id</code> Sonarr ID of the Series <code>3:25</code> <code>series_tmdb_id</code> TMDb ID of the Series <code>1396</code> <code>series_tvdb_id</code> TVDb ID of the Series <code>81189</code> <code>series_tvrage_id</code> TV Rage ID of the Series <code>18164</code> <code>episode_emby_id</code> Emby ID of the Episode <code>0:TV Shows:993981</code> <code>episode_imdb_id</code> IMDb ID of the Episode <code>tt1232253</code> <code>episode_jellyfin_id</code> Emby ID of the Episode <code>1:TV:9d9da</code> <code>episode_tmdb_id</code> TMDb ID of the Episode <code>62097</code> <code>episode_tvdb_id</code> TVDb ID of the Episode <code>438917</code> <code>episode_tvrage_id</code> TV Rage ID of the Episode <code>710919</code> <p>Emby, Jellyfin, and Sonarr IDs</p> <p>The IDs of Emby, Jellyfin, and Sonarr are all unique to your server(s) and libraries.</p> Variable Name Description Example <code>extras</code> Any assigned extras See below <code>NEWLINE</code> A character to move text to a new line <code>\\n</code> <p>Any assigned extras are added as their variable name. For example, if I specify the \"Episode Text Color\" extra for the Series, then the variable <code>episode_text_color</code> would provided. This can be used to add arbitrary extra data to a Card.</p>","tags":["Series"]},{"location":"user_guide/variables/#function-reference","title":"Function Reference","text":"<p>In addition to defining many variables which can be used, TCM also implements many functions which allow for more customization. Each is described below.</p> Function Name Description Example Format String Example Output <code>titlecase()</code> Write the number in \"titlecase\" - e.g. \"Season\" <code>{titlecase(to_cardinal(season_number))}</code> <code>Two</code> <code>to_cardinal()</code> Convert the given number to its cardinal spelling <code>{to_cardinal(episode_number)}</code> <code>two</code> <code>to_cardinal()</code> See above, but in another language<sup>2</sup> <code>{to_cardinal(episode_number, 'fr')}</code> <code>deux</code> <code>to_ordinal()</code> Convert the given number to its ordinal spelling <code>{to_ordinal(episode_number)}</code> <code>sixth</code> <code>to_ordinal()</code> See above, but in another language<sup>2</sup> <code>{to_cardinal(episode_number, 'es')}</code> <code>sexto</code> <code>to_short_ordinal()</code> Convert the given number to a shorthand ordinal spelling <code>{to_short_ordinal(season_number)}</code> <code>2nd</code> <code>to_short_ordinal()</code> See above, but in another language<sup>2</sup> <code>{to_short_ordinal(season_number, 'ja')}</code> <code>13\u756a\u76ee</code> <code>to_roman_numeral()</code> Convert the given number to a roman numeral<sup>4</sup> <code>{to_roman_numeral(episode_number)}</code> <code>VI</code> <code>format_date()</code> Write the given date in some specific format<sup>3</sup> <code>{format_date(airdate, 'Week %-U of 52')}</code> <code>Week 02 of 52</code> Support Language Codes Code Language <code>am</code> Amharic <code>ar</code> Arabic <code>cz</code> Czech <code>da</code> Danish <code>de</code> German <code>en</code> English (the default) <code>eo</code> Esperanto <code>es</code> Spanish <code>fa</code> Farsi <code>fi</code> Finnish <code>fr</code> French <code>fr_BE</code> French (Belgium) <code>fr_CH</code> French (Switzerland) <code>he</code> Hebrew <code>hu</code> Hungarian <code>id</code> Indonesian <code>it</code> Italian <code>ja</code> Japanese <code>kn</code> Kannada <code>ko</code> Korean <code>kz</code> Kazakh <code>lt</code> Lithuanian <code>lv</code> Latvian <code>nl</code> Dutch <code>no</code> Norwegian <code>pl</code> Polish <code>pt</code> Portuguese <code>pt_BR</code> Portuguese (Brazil) <code>ro</code> Romanian <code>ru</code> Russian <code>sl</code> Slovenian <code>sr</code> Serbian <code>sv</code> Swedish <code>te</code> Telugu <code>tg</code> Tajik <code>th</code> Thai <code>tr</code> Turkish <code>uk</code> Ukrainian <code>vi</code> Vietnamese <p>Cardinal vs. Ordinal Mnemonic</p> <p>An easy way to remember whether you want the cardinal or ordinal text is that Cardinal starts with a C like Count - so one, two, three, etc.; while Oordinal starts with O like Order - so first, second, third, etc.</p>","tags":["Series"]},{"location":"user_guide/variables/#built-in-functions","title":"Built-in Functions","text":"<p>Beyond the TCM-defined functions, all methods of built-in Python types - e.g. strings, lists, datetime, etc. - can also be used. See the Python docs for a complete reference; you can also ask on the Discord, or use an \"AI\" bot like ChatGPT.</p> <ol> <li> <p>This is after any Font replacements, font case functions, and line splitting.\u00a0\u21a9</p> </li> <li> <p>The second argument to the function is the language code. Not all languages support cardinal and ordinal numbering. These will raise an error during Card creation.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>To write the airdate in any format other than the default, the <code>format_date</code> function must be used. A reference of all date variables is available here.\u00a0\u21a9\u21a9</p> </li> <li> <p>Roman numerals are not defined for values greater than <code>3999</code> (blame the Romans). These will raise an error during Card creation.\u00a0\u21a9</p> </li> </ol>","tags":["Series"]},{"location":"v1/","title":"Version 1 Documentation","text":"<p>This documentation is dedicated to \"Version 1\" (v1) of TCM - i.e. the YAML (non-UI) tool.</p> <p>If you are using the UI, then this documentation is irrelevant and should be ignored.</p>"},{"location":"v1/sync/","title":"Syncing","text":""},{"location":"v1/sync/#background","title":"Background","text":"<p>This is an optional subsection of the <code>emby</code>, <code>jellyfin</code>, <code>plex</code>, or <code>sonarr</code> sections of your global preferences file (<code>preferences.yml</code>). The TitleCardMaker can automatically create/update series YAML files so that cards can be created for series within Emby, Jellyfin, Plex, or Sonarr automatically, without the need to add all your series manually. This behavior is disabled by default.</p> <p>Note</p> <p>It can be useful to just run the sync functionality of TCM while you first set it up. To do this without starting the main TCM loop, use <code>--sync</code> in your <code>main.py</code> command - this is described here.</p>"},{"location":"v1/sync/#recommended-setup","title":"Recommended Setup","text":"<p>Syncing can be specified for Emby, Jellyfin, Plex, and/or Sonarr, with the only differences being speed (Emby, Jellyfin, and Plex being much slower than Sonarr), and that Sonarr has more flexibility for syncing/excluding series type. The basic functionality is otherwise identical, and all of them can even be set up at once.</p> <p>Below are recommended setups that work for 99% of users if you change the paths and library names to match your setup.</p> DockerNon-Docker EmbyJellyfinPlexSonarr preferences.yml<pre><code>options:\n  source: /config/source/\n  series: # (4)!\n    - /config/sync_anime.yml\n    - /config/sync_tv.yml\n\nemby:\n  url: # (1)!\n  api_key: # (2)!\n  username: # (3)!\n  sync:\n    - card_directory: /config/cards\n    - file: /config/sync_anime.yml\n        libraries:\n        - Anime\n    - file: /config/sync_tv.yml\n        libraries:\n        - TV\n</code></pre> <ol> <li>Replace with your URL</li> <li>Replace with your API key</li> <li>Replace with your username</li> <li>Notice how the files listed here match the file names listed in the <code>sync</code> section.</li> </ol> preferences.yml<pre><code>options:\n  source: /config/source/\n  series: # (4)!\n    - /config/sync_anime.yml\n    - /config/sync_tv.yml\n\njellyfin:\n  url: # (1)!\n  api_key: # (2)!\n  username: # (3)!\n  sync:\n    - card_directory: /config/cards\n    - file: /config/sync_anime.yml\n        libraries:\n        - Anime\n    - file: /config/sync_tv.yml\n        libraries:\n        - TV\n</code></pre> <ol> <li>Replace with your URL</li> <li>Replace with your API key</li> <li>Replace with your username</li> <li>Notice how the files listed here match the file names listed in the <code>sync</code> section.</li> </ol> preferences.yml<pre><code>options:\n  source: /config/source/\n  series: # (3)!\n    - /config/sync_anime.yml\n    - /config/sync_tv.yml\n\nplex:\n  url: # (1)!\n  token: # (2)!\n  sync:\n    - card_directory: /config/cards\n    - file: /config/sync_anime.yml\n        libraries:\n        - Anime\n    - file: /config/sync_tv.yml\n        libraries:\n        - TV\n</code></pre> <ol> <li>Replace with your URL</li> <li>Replace with your X-Plex-Token</li> <li>Notice how the files listed here match the file names listed in the <code>sync</code> section.</li> </ol> preferences.yml<pre><code>options:\n  source: ./config/source/\n  series: # (4)!\n    - ./config/sync_anime.yml\n    - ./config/sync_tv.yml\n\nsonarr:\n  url: # (1)!\n  api_key: # (2)!\n  sync:\n    - card_directory: /config/cards/\n        downloaded_only: true\n        monitored_only: true\n        plex_libraries: # (3)!\n          /media/tv: TV\n          /media/anime: Anime\n    - file: /config/sync_anime.yml\n        series_type: anime\n    - file: /config/sync_tv.yml\n        series_type: standard\n</code></pre> <ol> <li>Replace with your URL</li> <li>Replace with your API key</li> <li>Replace with your root Sonarr library paths</li> <li>Notice how the files listed here match the file names listed in the <code>sync</code> section.</li> </ol> <p>Window Paths</p> <p>All paths shown below use the Unix-type pathing (e.g. forward slashes <code>/</code>). I strongly recommend Windows users use this type of path specification instead of the Windows style back slashes (<code>\\</code>).</p> EmbyJellyfinPlexSonarr preferences.yml<pre><code>options:\n  source: ./config/source/\n  series: # (4)!\n    - ./config/sync_anime.yml\n    - ./config/sync_tv.yml\n\nemby:\n  url: # (1)!\n  api_key: # (2)!\n  username: # (3)!\n  sync:\n    - card_directory: ./config/cards\n    - file: ./config/sync_anime.yml\n        libraries:\n        - Anime\n    - file: ./config/sync_tv.yml\n        libraries:\n        - TV\n</code></pre> <ol> <li>Replace with your URL</li> <li>Replace with your API key</li> <li>Replace with your username</li> <li>Notice how the files listed here match the file names listed in the <code>sync</code> section.</li> </ol> preferences.yml<pre><code>options:\n  source: ./config/source/\n  series: # (4)!\n    - ./config/sync_anime.yml\n    - ./config/sync_tv.yml\n\njellyfin:\n  url: # (1)!\n  api_key: # (2)!\n  username: # (3)!\n  sync:\n    - card_directory: ./config/cards\n    - file: ./config/sync_anime.yml\n        libraries:\n        - Anime\n    - file: ./config/sync_tv.yml\n        libraries:\n        - TV\n</code></pre> <ol> <li>Replace with your URL</li> <li>Replace with your API key</li> <li>Replace with your username</li> <li>Notice how the files listed here match the file names listed in the <code>sync</code> section.</li> </ol> preferences.yml<pre><code>options:\n  source: ./config/source/\n  series: # (3)!\n    - ./config/sync_anime.yml\n    - ./config/sync_tv.yml\n\nplex:\n  url: # (1)!\n  token: # (2)!\n  sync:\n    - card_directory: ./config/cards\n    - file: ./config/sync_anime.yml\n      libraries:\n        - Anime\n    - file: ./config/sync_tv.yml\n      libraries:\n        - TV\n</code></pre> <ol> <li>Replace with your URL</li> <li>Replace with your X-Plex-Token</li> <li>Notice how the files listed here match the file names listed in the <code>sync</code> section.</li> </ol> preferences.yml<pre><code>options:\n  source: ./config/source/\n  series: # (4)!\n    - ./config/sync_anime.yml\n    - ./config/sync_tv.yml\n\nsonarr:\n  url: # (1)!\n  api_key: # (2)!\n  sync:\n    - card_directory: ./config/cards/\n        downloaded_only: true\n        monitored_only: true\n        plex_libraries: # (3)!\n          /media/tv: TV\n          /media/anime: Anime\n    - file: ./config/sync_anime.yml\n      series_type: anime\n    - file: ./config/sync_tv.yml\n      series_type: standard\n</code></pre> <ol> <li>Replace with your URL</li> <li>Replace with your API key</li> <li>Replace with your root Sonarr library paths</li> <li>Notice how the files listed here match the file names listed in the <code>sync</code> section.</li> </ol>"},{"location":"v1/sync/#syncing-multiple-files","title":"Syncing Multiple Files","text":"<p>Multiple series YAML files can be synced at once. To enable this, the sync must be specified as a list. If done, the item specified first will apply to all subsequent syncs. This is implemented to avoid having to repeatedly specify anything.</p> <p>Example</p> <pre><code>options:\n  source: ./config/source/\n  series:\n    - ./config/sync_file_1.yaml\n    - ./config/sync_file_2.yaml\n\nsync:\n  - mode: append # (1)!\n    volumes:\n      /docker/tv/: /tcm/tv/\n\n  - file: ./config/sync_file_1.yaml\n    add_template: template_1\n\n  - file: ./config/sync_file_2.yaml\n    exclusions:\n  - series: Breaking Bad (2008)\n    mode: sync\n</code></pre> <ol> <li>Since there is no <code>file</code> specified, this will not result in any syncing. Since this is the first item in the list, <code>mode</code> and <code>volumes</code> will be carried over to the following syncs.</li> </ol>"},{"location":"v1/sync/#attributes","title":"Attributes","text":"<p>Note</p> <p>The Emby, Jellyfin, Plex, and Sonarr columns indicate whether that option can be specified for that interface. No options are required.</p> Name YAML Allowed Values Default Emby, Jellyfin, Plex Sonarr YAML File <code>file</code> Any valid file - Sync Mode <code>mode</code> <code>append</code> or <code>match</code> <code>append</code> Compact Mode <code>compact_mode</code> <code>true</code> or <code>false</code> <code>true</code> Card Directory <code>card_directory</code> Any valid path - Template <code>add_template</code> Any template name - Filter Downloaded Only <code>downloaded_only</code> <code>true</code> or <code>false</code> <code>false</code> Filter Monitored Only <code>monitored_only</code> <code>true</code> or <code>false</code> <code>false</code> Required Tags <code>required_tags</code> A list of any tags - Filter Libraries <code>libraries</code> A list of any library names - Series Type <code>series_type</code> <code>anime</code>, <code>daily</code>, or <code>standard</code> - Docker Volumes <code>volumes</code> See below - Plex Libraries <code>plex_libraries</code> See below - Exclusions <code>exclusions</code> A list of any excluded entries - <p>Each of these options is explained in greater detail below.</p>"},{"location":"v1/sync/#file-file","title":"File (<code>file</code>)","text":"<p>The filepath that the Maker should create/modify with series YAML.</p> <p>File is not automatically read</p> <p>Specifying a file here does not mean that TCM will create title cards for it - the file must also be listed as a YAML file in the <code>options</code> <code>series</code> setting.</p>"},{"location":"v1/sync/#mode-mode","title":"Mode (<code>mode</code>)","text":"<p>The mode in which the Maker should write/update the specified YAML file. <code>append</code> mode will look at the file and skip and not modify any series/libraries that are already defined; while <code>match</code> mode will also remove series that are not present in the synced interface/filter (see below for details).</p> Example <p>If syncing to Plex and <code>mode: match</code> mode is indicated, if a series is deleted from Plex, the entry in the synced file will also be removed. The same will happen if syncing to Sonarr, and a series is removed from Sonarr, untagged, or otherwise changed to no longer be in the sync.</p>"},{"location":"v1/sync/#compact-mode-compact_mode","title":"Compact Mode (<code>compact_mode</code>)","text":"<p>Whether the Maker should write the series YAML in \"compact\" mode or not. This is entirely an aesthetic option, but can make scrolling through very long files (if you have a lot of series being synced) much easier.</p> Example <p>If <code>compact_mode: false</code> is specified, the YAML file will be formatted like this:</p> <pre><code>libraries:\n  TV:\n    path: /media/TV\nseries:\n  11.22.63 (2016):\n    library: TV\n  30 Rock (2006):\n    library: TV\n  American Vandal (2017):\n    year: 2017\n  Breaking Bad (2008):\n    library: TV\n</code></pre> <p>If <code>compact_mode: true</code> is specified, these same series would be written as:</p> <pre><code>libraries:\n  TV:\n    path: /media/TV\nseries:\n  11.22.63 (2016): {library: TV}\n  30 Rock (2006): {library: TV}\n  American Vandal (2017): {library: TV}\n  Breaking Bad (2008): {library: TV}\n  # ...\n</code></pre>"},{"location":"v1/sync/#card-directory-card_directory","title":"Card Directory (<code>card_directory</code>)","text":"<p>Directory to put all title cards inside. This overrides any paths returned by the source, and is much easier if your folder structure is somewhat complicated.</p> <p>TCM can still load the cards into your server as long as you have set up your library detection/assignment set up correctly. Storing the cards alongside the media is not required.</p>"},{"location":"v1/sync/#template-name-add_template","title":"Template Name (<code>add_template</code>)","text":"<p>Optional template name to add to all synced series. This does not define or pass any arguments to the template, just specifies its name for the series. See the example for more details.</p> Example <p>The following example specifies <code>my_template</code> for each synced series:</p> <pre><code>sonarr: \n  url: ...\n  api_key: ...\n  sync:\n    file: ./yml/plex_sync.yml\n    add_template: my_template\n</code></pre> <p>Which, would result in <code>./yml/plex_sync.yml</code> (hypothetically) looking like:</p> <pre><code>templates: # Created by you, the user, NOT the sync\n  my_template:\n    card_type: roman\n    archive: false\nseries:\n  11.22.63 (2016): {library: TV, template: my_template}\n  30 Rock (2006): {library: TV, template: my_template}\n  # ...\n</code></pre> <p>Where the definition of <code>my_template</code> was added manually by the user.</p>"},{"location":"v1/sync/#filter-downloaded-only-downloaded_only","title":"Filter Downloaded Only (<code>downloaded_only</code>)","text":"<p>Sonarr Syncs Only</p> <p>This is only applicable to <code>sonarr</code> syncs.</p> <p>Whether to only sync series that have any downloaded episodes within Sonarr. If enabled (<code>downloaded_only: true</code>), series with no episodes will be rejected.</p>"},{"location":"v1/sync/#filter-monitored-only-monitored_only","title":"Filter Monitored Only (<code>monitored_only</code>)","text":"<p>Sonarr Syncs Only</p> <p>This is only applicable to <code>sonarr</code> syncs.</p> <p>Whether to only sync series that are Monitored within Sonarr. If enabled (<code>monitored_only: true</code>), unmonitored series will be rejected.</p>"},{"location":"v1/sync/#required-tags-required_tags","title":"Required Tags (<code>required_tags</code>)","text":"<p>List of tags to filter the synced series by. If specified, only series that have all of the provided tags will be synced. This must be specified as a list, like so:</p> <pre><code>required_tags:\n- tag1\n- tag2\n</code></pre> <p>Within Emby, Jellyfin, or Sonarr, these are \"tags\", and within Plex they are called \"Sharing labels\".</p> Example <p>This will only sync series to the specified file that are tagged with both <code>dolby-vision</code> and <code>ongoing</code> will be written:</p> <pre><code>sonarr:\n  url: ...\n  api_key: ...\n  sync:\n    file: ./yaml/sonarr_sync.yml\n    required_tags:\n    - dolby-vision\n    - ongoing\n</code></pre>"},{"location":"v1/sync/#filter-libraries-libraries","title":"Filter Libraries (<code>libraries</code>)","text":"<p>Emby, Jellyfin, and Plex Syncs Only</p> <p>This is only applicable to <code>emby</code>, <code>jellyfin</code>, or <code>plex</code> syncs.</p> <p>Libraries within Emby/Jellyfin/Plex to filter the synced series by. If specified, only series that are within any of the listed libraries will be synced. Otherwise, all series from all TV libraries will be synced.</p> <p>This must be specified like a list, like so:</p> <pre><code>libraries:\n- TV\n- TV 4K\n</code></pre>"},{"location":"v1/sync/#series-type-series_type","title":"Series Type (<code>series_type</code>)","text":"<p>Sonarr Syncs Only</p> <p>This is only applicable to <code>sonarr</code> syncs.</p> <p>The series type to filter the sync by. If specified, only series that match this type will be synced. Otherwise, all series types will be synced. These are the types assigned to a series within Sonarr.</p> <p>The only accepted values are <code>anime</code>, <code>daily</code>, and <code>standard</code>.</p>"},{"location":"v1/sync/#docker-volumes","title":"Docker Volumes","text":"<p>Not Recommended</p> <p>This setting is fairly complicated and rarely needed. As such it is not recommended for most users.</p> <p>If your instances of Emby/Jellyfin/Plex/Sonarr are running in a Docker container, the reported media paths might not match TitleCardMaker. To accommodate this, you can define the volumes you've mounted to the containers and the Maker will substitute these paths to their Maker-equivalents. These should be specified as <code>server_path: tcm_path</code>, see the example for details.</p> <p>Windows Paths</p> <p>Windows users should specify their filepaths with forward-slashes, e.g. <code>C:\\\\Users\\Documents\\</code> should be written as <code>C:/Users/Documents</code>.</p> Example  If I have mounted `/documents/Media/` on my machine to `/media/` within the Plex docker container, and have then mounted `/documents/Media/` to `/libraries/media/` within the TitleCardMaker docker container, then the following would be a suitable volume specification:  <pre><code>sonarr:\n  url: ...\n  api_key: ...\n  sync:\n    file: ./yaml/sonarr_sync.yml\n    volumes:\n      /documents/Media/: /libraries/Media/\n</code></pre>"},{"location":"v1/sync/#plex-libraries","title":"Plex Libraries","text":"<p>Sonarr Syncs Only</p> <p>This is only applicable to <code>sonarr</code> syncs.</p> <p>If you've grouped your libraries by sub-folder, this section can define what paths within TCM should be assigned to which libraries. This needs to be specified as <code>{path}: {library name}</code>. This setting can be confusing if both Sonarr and TitleCardMaker are in Docker containers, see Example 2 for details.</p> <p>These paths should be specified before any replacements done by specifying any docker volumes.</p> Example 1  If Sonarr puts my `TV` library at `/media/TV/`, and `Anime` library at `/media/Anime/`, then I want to define those two libraries here, like so:  <pre><code>sonarr:\n  url: ...\n  api_key: ...\n  sync:\n    file: ./yaml/sonarr_sync.yml\n    plex_libraries:\n      /media/TV/: TV\n      /media/Anime/: Anime\n</code></pre>  This means when Sonarr reports to TCM that a given series, such as Breaking Bad, is located at `/media/TV/Breaking Bad (2008)/` then TCM will be able to assign this series to the `TV` library automatically.    Example 2  If Sonarr is in a Docker container and puts Media for the `TV` library at `/sonarr/media/TV/` and the `Anime` library at `/sonarr/media/Anime/`, and I've mounted these paths at `/maker/media/TV` and `/maker/media/Anime` in my TitleCardMaker container, then my `volumes` and `plex_libraries` specification should look like this:  <pre><code>sonarr:\n  url: ...\n  api_key: ...\n  sync:\n    file: ./yaml/sonarr_sync.yml\n    volumes:\n      /sonarr/media/: /maker/media/\n    plex_libraries:\n      /sonarr/media/TV/: TV\n      /sonarr/media/Anime/: Anime\n</code></pre>  This means that Sonarr reports a path like `/sonarr/media/TV/Breaking Bad (2008)/` to TCM. TCM then converts the `/sonarr/media/` portion of that path to with `/maker/media/`, becoming `/maker/media/TV/Breaking Bad (2008)/`. Finally, TCM looks at the specified libraries and matches `/sonarr/media/TV/` to the `TV` library, meaning this series will be assigned to the `TV` library. It then writes the _converted_ path into the sync file."},{"location":"v1/sync/#exclusions","title":"Exclusions","text":"<p>A list of exclusions to not sync to the specified file. This can be useful if there are series you either don't want cards for, or have custom cards specified in another file. All series titles are excluded case insensitively.</p> <p>There are three types of exclusions, all are listed below:</p> Exclusion Name Description Example <code>series</code> Full name of a series <code>series: Breaking Bad (2008)</code> <code>tag</code> Tag <code>tag: ignore_tag</code> <code>yaml</code> Series YAML file to exclude all entries of<sup>1</sup> <code>yaml: ./path/to/yaml_file.yml</code> <p><sup>1</sup>This can be useful if you have many series to exclude, or you have a YAML file of customized cards that you don't want the sync to override. All entries in the given file's <code>series</code> will be ignored.</p> <p>This must be given as a list, like so:</p> <pre><code>exclusions:\n- series: ...\n- tag: ...\n- yaml: ...\n</code></pre> Example of an excluded YAML file  If there are a lot of series you want to exclude - the most efficient way to do this is to create an excluded YAML file, and add it to your sync. An example of how this file might looks is:  <pre><code>series:\n  Beastars (2019): {}\n  Dark (2017): {}\n  \"The Lord of the Rings: The\u00a0Rings\u00a0of\u00a0Power (2022)\": {}\n  # etc.\n</code></pre>  Each 'entry' in the file must be under the `series` key (like a normal series YAML file), but there is no need to specify any actual \"content\" (e.g. custom fonts, card types, etc.) as TCM will just look at the _name_ of the series."},{"location":"v1/card_types/","title":"Custom Card Types","text":""},{"location":"v1/card_types/#background","title":"Background","text":"<p>The TitleCardMaker has been designed to permit the creation of any style/type of Title Card, and the card type can then be specified globally or per-show. How to specify the global card type is described here.</p> <p>In addition to customizing individual parts of a Title Card like the text, styling, and font, TitleCardMaker is designed to support multiple different types of Title Cards. These different types vary in more fundamental ways such as layout, text placement, and additional features.</p> <p>There are three different types of card types:</p> Built-in <p>Card types developed by yours truly and shipped as part of TitleCardMaker. These types are typically the most thoroughly tested and support all the features of TitleCardMaker.</p> User-made <p>Cards developed by users of TCM who have taken the effort to make these available for others. These cards are not officially maintained, and so are not guaranteed to support all features. These are downloaded while TCM is running from the card types repository.</p> Local <p>Cards as Python files that exist on your local machine and are only available to yourself. These are read and loaded dynamically when TCM launches (and periodically after that). These can be used to test cards as they are being developed, but do require a little but of Python knowledge.</p> <p>These are all specified via the <code>card_type</code> attribute for a specific series, library, template, or globally. An example of each is shown below.</p> <p>Example</p> Built-inUser Created (Remote)Local File <pre><code>card_type: tinted frame\n</code></pre> <pre><code>card_type: Beedman/GradientLogoTitleCard\n</code></pre> <pre><code>card_type: ./path/to/Card.py\n</code></pre>"},{"location":"v1/card_types/#built-in-types","title":"Built-in Types","text":"<p>TitleCardMaker currently has the following built-in card types:</p> Card Type <code>card_type</code> Value Preview Anime <code>anime</code> Banner <code>banner</code> Calligraphy <code>calligraphy</code> Comic Book <code>comic book</code> Cutout <code>cutout</code> or <code>phendrena</code> Divider <code>divider</code> Fade <code>fade</code> or <code>4x3</code> Formula 1 <code>formula 1</code> or <code>f1</code> Frame <code>frame</code> or <code>photo</code> Graph <code>graph</code> Inset <code>inset</code> Landscape <code>landscape</code> Logo <code>logo</code> or <code>reality tv</code> Marvel <code>marvel</code> Music <code>music</code> or <code>spotify</code> Notification <code>notification</code> Olivier <code>olivier</code> or <code>ishalioh</code> Overline <code>overline</code> Poster <code>poster</code> or <code>gundam</code> Roman Numeral <code>roman</code> or <code>roman numeral</code> Shape <code>shape</code> Standard <code>standard</code>, <code>generic</code>, or <code>polymath</code> Star Wars <code>star wars</code> Striped <code>striped</code> Textless <code>textless</code> Tinted Frame <code>tinted frame</code> or <code>blurred border</code> Tinted Glass <code>tinted glass</code> or <code>sherlock</code> White Border <code>white border</code> or <code>musikmann</code>"},{"location":"v1/card_types/#user-submitted-types","title":"User-Submitted Types","text":"<p>There is a companion repository for user-submitted custom card types, located here. TCM allows for these types to be specified anywhere, and then downloaded and used at runtime.</p> <p>Below is a showcase of all the user-submitted types available:</p> Creator <code>card_type</code> Value Example azuravian <code>azuravian/TitleColorMatch</code> KHthe8th <code>KHthe8th/TintedFramePlusTitleCard</code> lyonza <code>lyonza/WhiteTextBroadcast</code> Wdvh <code>Wdvh/StarWarsTitleOnly</code> Wdvh <code>Wdvh/WhiteTextStandard</code> Wdvh <code>Wdvh/WhiteTextAbsolute</code> Wdvh <code>Wdvh/WhiteTextTitleOnly</code> Yozora <code>Yozora/RetroTitleCard</code> Yozora <code>Yozora/SlimTitleCard</code>"},{"location":"v1/card_types/#local-cards","title":"Local Cards","text":"<p>Whether for development of a custom card type, or just for your own personal use, a local file can also be used as a series/library card type. This is done by specifying the filepath to the card, such as:</p> <pre><code>card_type: ./config/card_types/TestingCard.py\n</code></pre> <p>Note</p> <p>The creation of custom cards types does require a moderate level of technical/programming know-how</p> <p>For those with at least a basic understanding  of - or willingness to learn - Python and ImageMagick, creating new types of cards is quite simple. The process can be simplified to the following:</p> <ol> <li> <p>Identify the look of the desired card - this is less programming and more graphic design.</p> </li> <li> <p>If you're playing around with ideas, I recommend getting a basic outline    completed in a GUI-based editing program (so not ImageMagick) such as    Photopea, Photoshop, GIMP, etc., as the visual feedback is immediate and less    tedious than making small adjustments in ImageMagick.</p> </li> <li> <p>With a basic layout finalized, identify which elements of the card you'd like customizable by each series/show. Think about such questions as:</p> </li> <li> <p>Does the card's style only really work with a fixed font/color/size, or do    you want to allow for customization?</p> </li> <li> <p>If there are season titles on the image, do you use custom season titles?</p> </li> <li> <p>What \"data\" does the card use? For example, all title cards probably use    the episode title itself, but does your design also use the show title? Or    perhaps the air-date? </p> </li> <li> <p>Develop the set of ImageMagick commands necessary for creating your title card. This can involve a lot of searching \"how to...\", but looking through existing card classes might help.</p> </li> <li> <p>Try and create the cards in steps (that will eventually become methods in    the <code>CardType</code> class) such as \"resize the source image\" then \"add _ overlay\"    and finally \"add some title text\"</p> </li> <li> <p>I usually have a \"reference\" card created in a GUI-editor that I am pull up    alongside my \"working\" card created by ImageMagick, viewing them side-by-side    can help make the minor text size and positioning modifications a lot easier.</p> </li> <li> <p>Create the Python class that implements these identified features. This class must be a subclass of <code>CardType</code>, and as such must implement the properties and methods described in that class:</p> </li> <li> <p><code>TITLE_CHARACTERISTICS</code>: Dictionary with keys <code>max_line_width</code>,    <code>max_line_count</code>, and <code>top_heavy</code></p> </li> <li><code>ARCHIVE_NAME</code>: String to append to all archives associated with this type</li> <li><code>TITLE_FONT</code>: String that is the default font to use for episode title text</li> <li><code>TITLE_COLOR</code>: String that is the    ImageMagick color to use for    episode title text</li> <li><code>FONT_REPLACEMENTS</code>: Dictionary of characters to substitute if the default    font is used</li> <li><code>USES_SEASON_TITLE</code>: Whether season titles are used in this title card</li> <li><code>is_custom_font()</code>: Method to determine whether a custom font has been used</li> <li><code>is_custom_season_titles()</code>: Method to determine whether custom season    titles/text has been used</li> <li> <p><code>create()</code>: Method for creating the title card object defined by the class</p> </li> <li> <p>Make the modifications outlined on the companion repository here.</p> </li> <li> <p>Follow the contribution process described here.</p> </li> </ol>"},{"location":"v1/card_types/anime/","title":"Anime Card Type","text":"<p>This style of title card is based off Reddit user /u/Recker_Man's style. Although it is referred to as the \"anime\" card style, there is nothing preventing you from using it for any series. The only thing about this card that indicates its anime design is the ability to add kanji text above the episode title.</p> <p>This card type is used whenever <code>card_type</code> is specified as <code>anime</code>.</p>"},{"location":"v1/card_types/anime/#examples","title":"Examples","text":""},{"location":"v1/card_types/anime/#valid-extras","title":"Valid <code>extras</code>","text":"<p>Below is a table of all valid series extras parsed by this card. These are described in greater detail below.</p> Label Default Value Description <code>kanji</code> - Optional kanji (Japanese) text to place above the title - should be a translation <code>require_kanji</code> <code>false</code> Whether to require <code>kanji</code> to be provided before a card is created <code>kanji_color</code> <code>white</code> Color of the kanji text <code>kanji_font_size</code> <code>1.0</code> Scalar for the size of the kanji text <code>kanji_stroke_color</code> <code>black</code> Color of the stroke for the kanji text <code>kanji_stroke_width</code> <code>1.0</code> Stroke width of the kanji text <code>kanji_vertical_shift</code> <code>0</code> Additional vertical offset to apply to the kanji text <code>stroke_color</code> <code>black</code> Custom color to use for the stroke on the title and kanji text <code>episode_text_color</code> <code>#CFCFCF</code> Color to utilize for the episode text <code>episode_stroke_color</code> <code>black</code> Color of the stroke for the episode text <code>omit_gradient</code> <code>false</code> Whether to omit the gradient overlay from the card <code>separator</code> <code>\u00b7</code> Character to separate season and episode text"},{"location":"v1/card_types/anime/#customization","title":"Customization","text":""},{"location":"v1/card_types/anime/#adding-kanji","title":"Adding Kanji","text":"<p>This card type looks for data under the <code>kanji</code> key within a series' datafile. If present, the text is added above the episode title. This text can be automatically added by the Maker (with some configuration).</p> <p>If TMDb is enabled, then these can be queried from TMDb automatically by utilizing the title translation feature of the Maker. The ISO code for Japanese is <code>ja</code>, and these titles should be stored under the <code>kanji</code> key, so the YAML must would look something like this:</p> tv.yml<pre><code>series:\n  \"Demon Slayer: Kimetsu no Yaiba (2019)\":\n    card_type: anime\n    translation:\n      language: ja\n      key: kanji\n</code></pre> How do you add kanji manually? <p>If TMDb is not globally enabled, then this data must be entered manually. Within a given datafile, add the kanji text like so (for the given example):</p> data.yml<pre><code>data:\n  Season 3:\n    10:\n      kanji: \u7d76\u5bfe\u8ae6\u3081\u306a\u3044\n      title: Never Give Up\n</code></pre>"},{"location":"v1/card_types/anime/#recommended-template","title":"Recommended Template","text":"<p>To save repeating this translation syntax for every anime you want Kanji added to, it's recommended to use a template. An example of which is shown below -  but feel free to modify for your needs.</p> tv.yml<pre><code>templates:\n  anime_with_kanji:\n    card_type: anime\n    library: Anime # Change to your library name, or delete completely\n    translation:\n      language: ja\n      key: kanji\n</code></pre> <p>This can then be used like so:</p> tv.yml<pre><code>templates:\n  anime_with_kanji:\n    card_type: anime\n    library: Anime # Change to your library name, or delete completely\n    translation:\n      language: ja\n      key: kanji\n\nseries:\n  \"Demon Slayer: Kimetsu no Yaiba (2019)\":\n    template: anime_with_kanji\n</code></pre> <p>TCM will then automatically look for kanji translations for all series which use this template.</p>"},{"location":"v1/card_types/anime/#customization_1","title":"Customization","text":""},{"location":"v1/card_types/anime/#kanji","title":"Kanji","text":""},{"location":"v1/card_types/anime/#color-kanji_color","title":"Color (<code>kanji_color</code>)","text":"<p>The color of the kanji text can be adjusted with the <code>kanji_color</code> extra. This defaults to <code>white</code> (to match the default font color of the title text).</p> Example tv.yml<pre><code>series:\n  Pok\u00e9mon (1997):\n    card_type: anime\n    font:\n      case: source\n      color: rgb(247,205,70)\n    extras:\n      kanji_color: rgb(247,205,70)\n</code></pre>"},{"location":"v1/card_types/anime/#requiring-kanji-require_kanji","title":"Requiring Kanji (<code>require_kanji</code>)","text":"<p>By default, if a kanji translation cannot be found or is not present for a given card, the title card will still be created. This might not be desired behavior, so the <code>require_kanji</code> extra can be specified to skip a card if there is no Kanji present. This defaults to <code>false</code>.</p> Example tv.yml<pre><code>series:\n  \"Demon Slayer: Kimetsu no Yaiba (2019)\":\n    card_type: anime\n    translation:\n      language: ja\n      key: kanji\n    extras:\n      require_kanji: true\n</code></pre> <p>If this is present for a given series, then an error will be printed and the card will be skipped until Kanji has been identified from TMDb, or entered manually into the datafile.</p>"},{"location":"v1/card_types/anime/#size-kanji_font_size","title":"Size (<code>kanji_font_size</code>)","text":"<p>The size of the kanji text can be adjusted with the <code>kanji_font_size</code> extra. This defaults to <code>1.0</code> (meaning no adjustment). Values above <code>1.0</code> will increase the size, values below <code>1.0</code> will decrease it.</p> Example <p>The following would reduce the size of the kanji text by 20% (to 80%).</p> tv.yml<pre><code>series:\n  \"Demon Slayer: Kimetsu no Yaiba (2019)\":\n    card_type: anime\n    translation:\n      language: ja\n      key: kanji\n    extras:\n      kanji_font_size: 0.8\n</code></pre>"},{"location":"v1/card_types/anime/#stroke-color-kanji_stroke_color","title":"Stroke Color (<code>kanji_stroke_color</code>)","text":"<p>The stroke of the color for the kanji text can be adjusted with the <code>kanji_stroke_color</code> extra. This defaults to <code>black</code>.</p> Example tv.yml<pre><code>series:\n  \"Demon Slayer: Kimetsu no Yaiba (2019)\":\n    card_type: anime\n    translation:\n      language: ja\n      key: kanji\n    extras:\n      kanji_stroke_color: red\n</code></pre>"},{"location":"v1/card_types/anime/#vertical-shift-kanji_vertical_shift","title":"Vertical Shift (<code>kanji_vertical_shift</code>)","text":"<p>If kanji text is added, the Kanji text might appear either too high or low (especially if using a custom font). To fix this, this can be adjusted via the <code>kanji_vertical_shift</code> extra. Positive values move the kanji up, and negative ones move it down.</p> Example tv.yml<pre><code>series:\n  \"Demon Slayer: Kimetsu no Yaiba (2019)\":\n    card_type: anime\n    translation:\n      language: ja\n      key: kanji\n    extras:\n      kanji_vertical_shift: -10 # This would shift the kanji DOWN 10 pixels\n</code></pre>"},{"location":"v1/card_types/anime/#episode-text","title":"Episode Text","text":""},{"location":"v1/card_types/anime/#color-episode_text_color","title":"Color (<code>episode_text_color</code>)","text":"<p>The color of the episode text can be adjusted with the <code>episode_text_color</code> extra. This defaults to <code>#CFCFCF</code>.</p> Example tv.yml<pre><code>series:\n  \"Mushoku Tensei: Jobless Reincarnation (2021)\":\n    card_type: anime\n    extras:\n      episode_text_color: rgb(203, 132, 11)\n</code></pre>"},{"location":"v1/card_types/anime/#stroke-color-episode_stroke_color","title":"Stroke Color (<code>episode_stroke_color</code>)","text":"<p>The color of the stroke outline on the episode text can be changed with the <code>episode_stroke_color</code> extra. This defaults to <code>black</code>.</p>"},{"location":"v1/card_types/anime/#gradient-overlay-omit_gradient","title":"Gradient Overlay (<code>omit_gradient</code>)","text":"<p>By default, this card type applys a gradient on top of the source image so that the text is more legible on the card. This can be disabled by setting the <code>omit_gradient</code> extra to <code>false</code>.</p> Example tv.yml<pre><code>series:\n  \"Mushoku Tensei: Jobless Reincarnation (2021)\":\n    card_type: anime\n    extras:\n      omit_gradient: false\n</code></pre>"},{"location":"v1/card_types/anime/#separator-character-separator","title":"Separator Character (<code>separator</code>)","text":"<p>The character between the season and episode text (a.k.a. the separator) can be customized with the <code>separator</code> extra. By default, a <code>\u00b7</code> character is used.</p> Example tv.yml<pre><code>series:\n  \"Mushoku Tensei: Jobless Reincarnation (2021)\":\n    card_type: anime\n    extras:\n      separator: \"/\"\n</code></pre>"},{"location":"v1/card_types/anime/#stroke-color-stroke_color","title":"Stroke Color (<code>stroke_color</code>)","text":"<p>The color of the stroke used for the title text can be adjusted with the <code>stroke_color</code> extra. This defaults to <code>black</code> (like all other stroke colors).</p> Example tv.yml<pre><code>series:\n  Pok\u00e9mon (1997):\n    card_type: anime\n    font:\n      case: source\n      color: rgb(247,205,70)\n      file: ./fonts/Pokemon Solid.ttf\n      kerning: 50%\n      size: 110%\n      stroke_width: 500%\n    extras:\n      stroke_color: rgb(64,107,175)\n</code></pre> <p>This will produce the following cards:</p> <p> </p>"},{"location":"v1/card_types/formula_1/","title":"Formula 1 Card Type (v1)","text":""},{"location":"v1/card_types/formula_1/#formula-1-card-type","title":"Formula 1 Card Type","text":"<p>Applicability</p> <p>This card type is generally not applicable to non-F1 Series.</p> <p>Title Card designed for displaying race details for Formula 1. The original design was created by Reddit User /u/heeisenbeerg. Sponsor isaacolsen94 requested its implementation into TCM as a Sponsor Reward, which was then created by CollinHeist.</p> <p>This card type is used whenever <code>card_type</code> is specified as <code>f1</code> or <code>formula 1</code>.</p>"},{"location":"v1/card_types/formula_1/#example","title":"Example","text":""},{"location":"v1/card_types/formula_1/#valid-extras","title":"Valid <code>extras</code>","text":"<p>Below is a table of all valid series extras parsed by this card. These are described in greater detail below.</p> Label Default Value Description <code>country</code> Parsed from the season title Which country flag to use <code>episode_text_color</code> <code>white</code> Color of the episode text <code>episode_text_font_size</code> <code>1.0</code> Scalar of the size of the episode text <code>flag</code> Parsed from <code>country</code> Flag file to use on the left frame of the card <code>frame_year</code> Airdate of the episode, or <code>2024</code> Which frame year to utilize <code>race</code> <code>Grand Prix</code> Name of the race to display on the Card"},{"location":"v1/card_types/formula_1/#customization","title":"Customization","text":"<p>From top to bottom, the elements on this card are:</p> <ul> <li>The episode text (<code>ROUND 16</code> in the example Card)</li> <li>The season text (<code>JAPANESE</code> in the example Card)</li> <li>The <code>race</code> (<code>GRAND PRIX</code> in the example Card)</li> <li>The title text (<code>QUALIFYING</code> in the example Card)</li> </ul>"},{"location":"v1/card_types/formula_1/#country-country","title":"Country (<code>country</code>)","text":"<p>This Card comes with various flags of many of the supported countries which can be used in the surrounding \"frame\" containing the text.</p> <p>The full list of supported values is below:</p> Supported <code>country</code> values <p>This must be one of:</p> <ul> <li><code>Abu Dhabi</code></li> <li><code>Australian</code></li> <li><code>Austrian</code></li> <li><code>Azerbaijan</code></li> <li><code>Bahrain</code></li> <li><code>Belgian</code></li> <li><code>British</code></li> <li><code>Canadian</code></li> <li><code>Chinese</code></li> <li><code>Dutch</code></li> <li><code>Hungarian</code></li> <li><code>Italian</code></li> <li><code>Japanese</code></li> <li><code>Las Vegas</code></li> <li><code>Mexican</code></li> <li><code>Miami</code></li> <li><code>Monaco</code></li> <li><code>Qatar</code></li> <li><code>Sao Paulo</code></li> <li><code>Saudi Arabian</code></li> <li><code>Singapore</code></li> <li><code>Spanish</code></li> <li><code>United Arab Emirates</code></li> <li><code>United States</code></li> </ul>"},{"location":"v1/card_types/formula_1/#default-behavior","title":"Default Behavior","text":"<p>By default, the value of <code>country</code> is parsed from the season title. This is done so that the value can change for different seasons (i.e. different F1 locations).</p> Example <p>The following example would </p> tv.yml<pre><code>series:\n  F1 (2020):\n    card_type: formula 1\n    seasons:\n      1: Australian\n      2: Chinese\n      3: Las Vegas\n      4: Qatar\n</code></pre> <p>This will not happen if <code>country</code> is explicitly specified.</p>"},{"location":"v1/card_types/formula_1/#race-race","title":"Race (<code>race</code>)","text":"<p>The \"race text\" can be adjusted with the <code>race</code> extra. The default value is <code>Grand Prix</code>.</p> Example <p>The following with use the default race text of \"Grand Prix\"</p> tv.yml<pre><code>series:\n  F1 (2020):\n    card_type: formula 1\n    extras:\n      country: Japanese\n      race: Grand Prix\n</code></pre>"},{"location":"v1/card_types/formula_1/#episode-text","title":"Episode Text","text":""},{"location":"v1/card_types/formula_1/#color-episode_text_color","title":"Color (<code>episode_text_color</code>)","text":"<p>The color of the episode text (the top two lines of text on the Card) can be adjusted with the <code>episode_text_color</code> extra. The default is <code>white</code>.</p> Example <p>The following will set the color of the episode text to red.</p> tv.yml<pre><code>series:\n  F1 (2020):\n    card_type: formula 1\n    extras:\n      country: Japanese\n      episode_text_color: red\n</code></pre>"},{"location":"v1/card_types/formula_1/#size-episode_text_font_size","title":"Size (<code>episode_text_font_size</code>)","text":"<p>The size of the episode text can also be adjusted. The default is <code>1.0</code> means no adjustment. Values below <code>1.0</code> will reduce the size of the text, and values above <code>1.0</code> will increase the size.</p> Example <p>The following will result in a 10% increase in the size of the text.</p> tv.yml<pre><code>series:\n  F1 (2020):\n    card_type: formula 1\n    extras:\n      country: Japanese\n      episode_text_font_size: 1.1\n</code></pre>"},{"location":"v1/card_types/formula_1/#flag-flag","title":"Flag (<code>flag</code>)","text":"<p>The left side of the frame can be changed to various flags via the <code>flag</code> extra. If this extra is not specified then the flag is parsed from the <code>country</code> extra.</p> <p>This extra is only required if you wish to use a custom flag file.</p> Example <p>This will use the British flag, even though the default flag would be the Japanese one.</p> tv.yml<pre><code>series:\n  F1 (2020):\n    card_type: formula 1\n    extras:\n      country: Japanese\n      flag: ./modules/ref/formula/british.webp\n</code></pre>"},{"location":"v1/card_types/formula_1/#year-frame_year","title":"Year (<code>frame_year</code>)","text":"<p>At the bottom of the card is the year in which the race took place. By default, this is parsed from the airdate of the Card's episode, but if that info is not available then this can be set with the <code>frame_year</code> extra (if you want a value other than <code>2024</code>).</p> Example <p>The following will set the frame year to <code>2023</code> only if there is no airdate available for the episode.</p> tv.yml<pre><code>series:\n  F1 (2020):\n    card_type: formula 1\n    extras:\n      country: Japanese\n      frame_year: \"2023\"\n</code></pre>"},{"location":"v1/card_types/graph/","title":"Graph Card Type (v1)","text":""},{"location":"v1/card_types/graph/#graph-card-type","title":"Graph Card Type","text":"<p>This card type features a bar graph progress bar which can be used to indicate the total series progress. This \"progress\" is parsed from the episode text, which should be entered as a fraction - for example:</p> <pre><code>episode_text_format: \"{season_number} / {season_episode_max}\"\n</code></pre> <p>Will update the \"progress\" of the graph from 0% to 100% for all episodes in a season (e.g. the first episode is near 0%, the last episode 100%). This is the default behavior.</p> <p>This card type is used whenever <code>card_type</code> is specified as <code>graph</code>.</p>"},{"location":"v1/card_types/graph/#example","title":"Example","text":""},{"location":"v1/card_types/graph/#valid-extras","title":"Valid <code>extras</code>","text":"<p>Below is a table of all valid series extras parsed by this card. These are described in greater detail below.</p> Label Default Value Description <code>graph_background_color</code> <code>rgba(140,140,140,0.5)</code> Background color of the graph <code>graph_color</code> <code>rgb(99,184,255)</code> Color of the filled-in portion of the graph coloring <code>graph_inset</code> <code>75</code> How far to inset the graph from the edges <code>graph_radius</code> <code>175</code> Radius of the graph <code>graph_text_font_size</code> <code>1.0</code> Size adjustment for the graph text <code>graph_width</code> <code>25</code> The width of the graph <code>fill_scale</code> <code>0.6</code> Scale for how wide the filled graph should appear <code>omit_gradient</code> <code>false</code> Whether to omit the gradient overlay <code>percentage</code> - Manual fill percentage of the graph <code>text_position</code> <code>lower left</code> Where on the image to position the graph and text"},{"location":"v1/card_types/graph/#customization","title":"Customization","text":""},{"location":"v1/card_types/graph/#graph","title":"Graph","text":""},{"location":"v1/card_types/graph/#background-color-graph_background_color","title":"Background Color (<code>graph_background_color</code>)","text":"<p>The background color of the graph can be adjusted with the <code>graph_background_color</code> extra. This color can transparency so that part of the image behind the graph can be seen. This defaults to <code>rgba(140,140,140,0.5)</code> (a neutral gray with 50% opacity).</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      graph_background_color: \"rgba(232,232,232,0.2)\"\n</code></pre> <p> </p>"},{"location":"v1/card_types/graph/#fill-color-graph_color","title":"Fill Color (<code>graph_color</code>)","text":"<p>The filled portion of the graph (as well as the color of the inside numerator and denominator) can be adjusted with the <code>graph_color</code> extra. This defaults to <code>rgb(99,184,255)</code> (which is a light blue).</p> <p>This color is also used for the numerator (the top part of the fraction), and the line/denominator (the bottom part of the fraction) if the filled percentage is 100% (see the example below).</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      graph_color: SpringGreen1\n</code></pre> <p> </p> <p> </p>"},{"location":"v1/card_types/graph/#fill-percentage-percentage","title":"Fill Percentage (<code>percentage</code>)","text":"<p>This card determines how \"filled\" to make the graph by parsing the episode text. This means that by default, the progress of the graph will be based on the episode number and how many episodes are in that season.</p> <p>If you'd like to set the percentage to a fixed number (e.g. something that does not change), then the <code>percentage</code> extra can be specified. This must be a number (intepreted as a percentage) between <code>0.0</code> and <code>1.0</code>.</p> <p>This can be specified for the entire series, or per-episode in the data file.</p> Example Per-SeriesPer-Episode tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      percentage: 0.3 # (1)!\n</code></pre> <ol> <li>This indicates 30% filled</li> </ol> data.yml<pre><code>data:\n  Season 1:\n    1:\n      title: Welcome to Margrave\n      percentage: 0.125 # (1)!\n    2:\n      title: First Dance\n      percentage: 0.250 # (2)!\n</code></pre> <ol> <li>12.5% filled</li> <li>25.0% filled</li> </ol>"},{"location":"v1/card_types/graph/#fill-scale-fill_scale","title":"Fill Scale (<code>fill_scale</code>)","text":"<p>How full relative to the background of the graph that the filled portion of the graph appears can be adjusted with the <code>fill_scale</code> extra. This defaults to <code>0.6</code>, meaning 60% of the width of the graph will be colored. This can be any value between <code>0.0</code> (no fill at all) and <code>1.0</code> (completely filled).</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      fill_scale: 0.2\n</code></pre> <p> </p>"},{"location":"v1/card_types/graph/#font-size-graph_text_font_size","title":"Font Size (<code>graph_text_font_size</code>)","text":"<p>Title Text Size</p> <p>The font size of the title text is separately controlled with the normal <code>font</code> <code>size</code> value.</p> <p>The font size of the fractional text inside the graph can be adjusted with the <code>graph_text_font_size</code> extra. This is a scalar value greater than <code>0.0</code>, and indicates how much to decrease or increase the size of the font from the default.</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      graph_text_font_size: 1.35\n</code></pre> <p> </p>"},{"location":"v1/card_types/graph/#inset-graph_inset","title":"Inset (<code>graph_inset</code>)","text":"<p>How far from the edge of the image the shape is drawn can be adjusted with the <code>graph_inset</code> Extra. This affects the vertical and horizontal spacing of the graph.</p> <p>The default value is <code>75</code>, but can be any value between 0 and 1800. This is a unit in pixels.</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      graph_inset: 30\n</code></pre> <p> </p>"},{"location":"v1/card_types/graph/#radius-graph_radius","title":"Radius (<code>graph_radius</code>)","text":"<p>The radius of the graph can be adjusted with the <code>graph_radius</code>. The default value is <code>175</code>, but can be any value between <code>50</code> and <code>900</code>. This is a unit in pixels.</p> <p>Note</p> <p>Adjusting this value will also scale the size of the graph text unless the <code>graph_text_font_size</code> is manually set.</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      graph_radius: 125\n</code></pre> <p> </p>"},{"location":"v1/card_types/graph/#width-graph_width","title":"Width (<code>graph_width</code>)","text":"<p>The width of the graph can be adjusted with the <code>graph_width</code> extra. This is different than the <code>fill_scale</code> extra because this affects how wide all parts of the graph appear, instead of just the filled-in portions.</p> <p>The default value is <code>25</code>. This can be any non-negative value.</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      graph_width: 40\n</code></pre> <p> </p>"},{"location":"v1/card_types/graph/#gradient-overlay-omit_gradient","title":"Gradient Overlay (<code>omit_gradient</code>)","text":"<p>By default, TCM adds a subtle gradient overlay on the outer edge of the image in the orientation of the indicated <code>text_position</code>. This can be disabled by setting <code>omit_gradient: true</code>.</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      omit_gradient: true\n</code></pre> <p> </p>"},{"location":"v1/card_types/graph/#position-text_position","title":"Position (<code>text_position</code>)","text":"<p>Where to position the graph and text can be controlled with the <code>text_position</code> extra. This defaults to <code>lower left</code>, but can be <code>upper left</code>, <code>upper right</code>, <code>left</code>, <code>right</code>, <code>lower left</code> or <code>lower right</code>.</p> <p>The position will also adjust the orientation of the gradient overlay, if not disabled.</p> Example tv.yml<pre><code>series:\n  Reacher (2022):\n    card_type: graph\n    extras:\n      text_position: right\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/","title":"Music Card Type (v1)","text":""},{"location":"v1/card_types/music/#music-card-type","title":"Music Card Type","text":"<p>These cards feature a fully adjustable music timeline, media control buttons, and artwork. This is one of the more complex card types, featuring more than  twenty available extra customizations.</p> <p>This card type is used whenever <code>card_type</code> is specified as <code>music</code> or <code>spotify</code>.</p>"},{"location":"v1/card_types/music/#example","title":"Example","text":"Labeled Card Elements"},{"location":"v1/card_types/music/#valid-extras","title":"Valid <code>extras</code>","text":"Label Default Value Description <code>add_controls</code> <code>false</code> Whether to display the media controls <code>album_cover</code> - File to use for the album image <code>album_size</code> <code>1.0</code> Scalar for how much to scale the size of the album image <code>control_colors</code> <code>white white white white white</code> Color of the media control elements <code>draw_heart</code> <code>false</code> Whether to draw the heart <code>episode_text_color</code> Matches the font Color to utilize for the episode text <code>heart_color</code> <code>transparent</code> Color to fill the heart with <code>heart_stroke_color</code> <code>white</code> Color to use for the outline of the heart <code>pause_or_play</code> <code>play</code> Which icon to display in the media controls <code>percentage</code> <code>random</code> Filled percentage of the timeline <code>player_color</code> <code>rgba(0,0,0,0.50)</code> Background of the player <code>player_inset</code> <code>75</code> How far to inset the player from the edges <code>player_position</code> <code>left</code> Where to position the player on the image <code>player_style</code> <code>logo</code> Which style of the player to display <code>player_width</code> <code>900</code> Width of the player <code>round_corners</code> <code>true</code> Whether to round the corners of the album image <code>subtitle</code> - Text to display below the title <code>timeline_color</code> <code>rgb(29,185,84)</code> Color of the filled timeline"},{"location":"v1/card_types/music/#customization","title":"Customization","text":""},{"location":"v1/card_types/music/#album-cover-album_cover","title":"Album Cover (<code>album_cover</code>)","text":"<p>If the card's Player Style is anything other than <code>basic</code>, then the image to display above title text should be specified with the <code>album_cover</code> extra.</p> <p>This can be a file name - e.g. <code>logo.png</code> - in which case TCM will automatically search alongside the specified source image for a file of that name.</p> <p>Example</p> tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      album_cover: logo.png\n      player_style: logo\n</code></pre> <p>This can also be a fully specified file path.</p> <p>Example</p> tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      album_cover: ./backdrop.jpg\n      player_style: artwork\n</code></pre>"},{"location":"v1/card_types/music/#player-style-player_style","title":"Player Style (<code>player_style</code>)","text":"<p>Above the title text, various kinds of \"album art\" can be added to the Card by adjusting the <code>player_style</code> extra. This can be <code>basic</code>, <code>artwork</code>, <code>logo</code>, or <code>poster</code>. The default value is <code>logo</code>.</p> <p>Automatically Downloading Artwork</p> <p>If the style is set to <code>artwork</code>, backdrops will not be automatically downloaded. You will need to download these manually for the Series.</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      player_style: artwork\n</code></pre> <p> </p> <p> </p>"},{"location":"v1/card_types/music/#controls","title":"Controls","text":""},{"location":"v1/card_types/music/#enabling-add_controls","title":"Enabling (<code>add_controls</code>)","text":"<p>Stylized music control icons / buttons can be added to the Card, if desired, by setting the <code>add_controls: true</code> extra.</p> Examples tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      add_controls: true\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#coloring-control_colors","title":"Coloring (<code>control_colors</code>)","text":"<p>If the music controls are enabled, then each individual control icon can be recolored (or omitted completely) with the <code>control_colors</code> extra.</p> <p>This must be a set of five space-separated colors, where each color will be used on the controls in order. The default value is <code>white white white white white</code>.</p> <p>Colors with Spaces</p> <p>No specified colors can have spaces. For example, write <code>rgb(1, 1, 1)</code> as <code>rgb(1,1,1)</code>.</p> <p>If a color is given as <code>transparent</code> or <code>none</code>, that control icon will be removed.</p> Examples tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      control_colors: rgb(29,185,84) none white none rgb(29,185,84)\n</code></pre> <p> </p> <p> </p>"},{"location":"v1/card_types/music/#pause-or-play-icon-pause_or_play","title":"Pause or Play Icon (<code>pause_or_play</code>)","text":"<p>The middle icon on the controls can be toggled between a pause and play icon with the <code>pause_or_play</code> extra. This can be <code>pause</code>, <code>play</code>, or <code>watched</code>.</p> <p>If set to <code>watched</code>, then the icon will match the watched status of the Episode.</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      pause_or_play: play\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#heart-icon","title":"Heart Icon","text":"<p>A small heart / like icon can also be added to the top right of the player. This icon can be toggled and recolored with extras.</p> <p>Icon Overlap</p> <p>TCM does not implement any logic to prevent the heart icon from overlapping album artwork or title text.</p>"},{"location":"v1/card_types/music/#enabling-draw_heart","title":"Enabling (<code>draw_heart</code>)","text":"<p>The heart icon is disabled by default, but can be enabled by setting <code>draw_heart: true</code>.</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      draw_heart: true\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#coloring-heart_color-and-heart_stroke_color","title":"Coloring (<code>heart_color</code> and <code>heart_stroke_color</code>)","text":"<p>The heart icon can be recolored in two ways. The edge / stroke of the icon with the <code>heart_stroke_color</code> extra, and the inside / fill of the icon with the <code>heart_fill_color</code> extra. These are separated so that the heart can be visible while not appearing \"selected.\"</p> Examples tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      heart_stroke_color: rgb(29,185,84)\n</code></pre> <p> </p> tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      heart_color: \"#FF2733\"\n      heart_stroke_color: \"#FF2733\"\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#timeline","title":"Timeline","text":""},{"location":"v1/card_types/music/#coloring-timeline_color","title":"Coloring (<code>timeline_color</code>)","text":"<p>The color of the filled portion of the timeline can be adjusted with the <code>timeline_color</code> extra. This only applies to the filled portion - e.g. the percentage - and the \"bubble\".</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      timeline_color: skyblue\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#filled-percentage-percentage","title":"Filled Percentage (<code>percentage</code>)","text":"<p>The filled logic for the timeline is customizable with the <code>percentage</code> extra.</p> <p>If this is set to an explicit number - such as <code>0.3</code> - then the timeline will always be that percent filled. The number will be interpreted as a percentage between <code>0.0</code> and <code>1.0</code>.</p> <p>If this is specified as <code>random</code> (or left as the default) then each Card will utilize a random fill percentage.</p>"},{"location":"v1/card_types/music/#player-position","title":"Player Position","text":""},{"location":"v1/card_types/music/#overall-position-player_position","title":"Overall Position (<code>player_position</code>)","text":"<p>The position of the player can be adjusted by setting <code>player_position</code> to either <code>left</code>, <code>middle</code> or <code>right</code>. The default value is <code>left</code>.</p> Example <p> </p>"},{"location":"v1/card_types/music/#inset-player_inset","title":"Inset (<code>player_inset</code>)","text":"<p>The <code>player_inset</code> extra allows more fine-tuned control of how far from the edge of the image to place the player. This is applied to both the horizontal and vertical spacing. The defalut value is <code>75</code>, but can be any value between <code>0</code> and <code>1200</code>.</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      player_inset: 150\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#player-width-player_width","title":"Player Width (<code>player_width</code>)","text":"<p>The width of the player can also be adjusted with the <code>player_width</code> extra. All elements within the player - notably the timeline and any album artwork - are dynamically resized with the specified width. The default value is <code>900</code>, but can be any value between <code>400</code> and <code>3000</code>.</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      player_with: 1200\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#player-color-player_color","title":"Player Color (<code>player_color</code>)","text":"<p>The background color of the player can be adjusted with the <code>player_color</code> extra. The default value is <code>rgba(0,0,0,0.50)</code>.</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      player_color: rgba(120,120,120,0.5)\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#subtitle-text-subtitle","title":"Subtitle Text (<code>subtitle</code>)","text":"<p>The text below the title is referred to as the subtitle. This text can be edited via the <code>subtitle</code> extra.</p> <p>If omitted, then the subtitle will not be displayed at all, or it can be included in a template to dynamically add to each series.</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      subtitle: Atlanta (2016)\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#album-image-corner-rounding-round_corners","title":"Album Image Corner Rounding (<code>round_corners</code>)","text":"<p>To add to the \"album art\" aesthetic, the corners of images are rounded when the Player Style is set to <code>artwork</code> or <code>poster</code>.</p> <p>This can be disabled by setting <code>round_corners: false</code>.</p> Example tv.yml<pre><code>series:\n  Atlanta (2016):\n    card_type: music\n    extras:\n      round_corners: false\n</code></pre> <p> </p>"},{"location":"v1/card_types/music/#mask-images","title":"Mask Images","text":"<p>This card also natively supports mask images. Like all mask images, TCM will automatically search for alongside the input Source Image in the Series' source directory, and apply this atop all other Card effects.</p> <p>Example</p> <p> </p>"},{"location":"v1/card_types/notification/","title":"Notification Card Type (v1)","text":""},{"location":"v1/card_types/notification/#notification-card-type","title":"Notification Card Type","text":"<p>This card type features two compact rectangular frames, styled to resemble a notification prompt. These \"notifications\" can be resized, positioned, and colored with extras.</p> <p>This card type is used whenever <code>card_type</code> is specified as <code>notification</code>.</p>"},{"location":"v1/card_types/notification/#example","title":"Example","text":""},{"location":"v1/card_types/notification/#valid-extras","title":"Valid <code>extras</code>","text":"<p>Below is a table of all valid series extras parsed by this card. These are described in greater detail below.</p> Label Default Value Description <code>edge_color</code> Matches the font Color of the edge of each notification box <code>edge_width</code> <code>5</code> How wide to make the edge coloring <code>episode_text_color</code> Matches the font Color of the index text <code>episode_text_font_size</code> <code>1.0</code> Size adjustment for the index text <code>episode_text_vertical_shift</code> <code>0</code> Additional vertical shift to index text <code>glass_color</code> <code>rgba(0,0,0,0.50)</code> Background color of both text boxes <code>position</code> <code>right</code> Where to position the notifications <code>box_adjustments</code> <code>0 0 0 0</code> Adjustments to the bounds of the notification boxes <code>separator</code> <code>-</code> Character that separates the season and episode text"},{"location":"v1/card_types/notification/#customization","title":"Customization","text":""},{"location":"v1/card_types/notification/#edge","title":"Edge","text":""},{"location":"v1/card_types/notification/#color-edge_color","title":"Color (<code>edge_color</code>)","text":"<p>The color of each notification's edge can be adjusted with the <code>edge_color</code> extra. This matches the font color by default.</p> Example tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      edge_color: crimson\n</code></pre> <p> </p>"},{"location":"v1/card_types/notification/#width-edge_width","title":"Width (<code>edge_width</code>)","text":"<p>The width of each notification's edge can be adjusted with the <code>edge_width</code> extra. This defaults to <code>5</code>, and is in pixels.</p> Example tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      edge_width: 15\n</code></pre> <p> </p>"},{"location":"v1/card_types/notification/#episode-text","title":"Episode Text","text":""},{"location":"v1/card_types/notification/#color-episode_text_color","title":"Color (<code>episode_text_color</code>)","text":"<p>The color of the episode text can be adjusted with the <code>episode_text_color</code> extra. This matches the font color by default.</p> Example tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      episode_text_color: crimson\n</code></pre> <p> </p>"},{"location":"v1/card_types/notification/#size-episode_text_font_size","title":"Size (<code>episode_text_font_size</code>)","text":"<p>The size of the episode text can be adjusted with the <code>episode_text_font_size</code> extra. This defaults to <code>1.0</code>.</p> Example tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      episode_text_font_size: 1.5\n</code></pre> <p> </p>"},{"location":"v1/card_types/notification/#vertical-shift-episode_text_vertical_shift","title":"Vertical Shift (<code>episode_text_vertical_shift</code>)","text":"<p>The vertical positioning of the index text (and the matching notification box) can be adjusted with the <code>episode_text_vertical_shift</code> extra. Positive values shift the box (and text) up, negative values down.</p> Example tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      episode_text_vertical_shift: -30\n</code></pre> <p> </p>"},{"location":"v1/card_types/notification/#notification","title":"Notification","text":""},{"location":"v1/card_types/notification/#adjustments-box_adjustments","title":"Adjustments (<code>box_adjustments</code>)","text":"<p>If you'd like to adjust the dimensions of the title text's notification box to either appear further/closer to your title text (especially when using a custom font), then the <code>box_adjustments</code> extra can be used to individually adjust the boundaries of each of the box's faces.</p> <p>This is specified in clockwise order, like so <code>{top} {right} {bottom} {left}</code>, with positive values moving the face in, negative out. The default is <code>0 0 0 0</code>, meaning no adjustments are made.</p> Example <p>The following will move the bounds of the title text box in 20 pixels on the top, 10 pixels out on the right, 5 pixels in on the botton, and make no adjustment on the left.</p> tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      box_adjustments: -20 10 -5 0\n</code></pre>"},{"location":"v1/card_types/notification/#color-glass_color","title":"Color (<code>glass_color</code>)","text":"<p>The background color of both notification boxes can be adjusted with the <code>glass_color</code> extra. This defaults to <code>rgba(0,0,0,0.50)</code> - which corresponds to black at 50% opacity. A transparent color can be specified.</p> Example tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      glass_color: rgba(5, 122, 246, 0.5)\n</code></pre> <p> </p>"},{"location":"v1/card_types/notification/#position-position","title":"Position (<code>position</code>)","text":"<p>The position of both notification boxes can be adjusted with the <code>position</code> extra. This can be either <code>left</code> or <code>right</code>, and defaults to <code>right</code>.</p> Example tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      position: right\n</code></pre> <p> </p>"},{"location":"v1/card_types/notification/#separator-character-separator","title":"Separator Character (<code>separator</code>)","text":"<p>If both the season and episode text are displayed on the Card, then a separator character is added between them. This character can be adjusted with the <code>separator</code> extra.</p> Example tv.yml<pre><code>series:\n  Succession (2018):\n    card_type: notification\n    extras:\n      separator: \"||\"\n</code></pre> <p> </p>"},{"location":"v1/card_types/notification/#mask-images","title":"Mask Images","text":"<p>This card also natively supports mask images. Like all mask images, TCM will automatically search for alongside the input Source Image in the Series' source directory, and apply this atop all other Card effects.</p> <p>Example</p> <p> </p>"},{"location":"v1/card_types/striped/","title":"Striped Card Type (v1)","text":""},{"location":"v1/card_types/striped/#striped-card-type","title":"Striped Card Type","text":"<p>These cards feature a solid color overlay with stripes of rectangles \"cut\" out to expose the underlying Source Image. By default the stripes are randomly placed and sized, but this can be adjusted with an extra. The position of the text can also be adjusted to any of the four corners.</p> <p>This card type is used whenever <code>card_type</code> is specified as <code>striped</code>.</p>"},{"location":"v1/card_types/striped/#example","title":"Example","text":"Labeled Card Elements"},{"location":"v1/card_types/striped/#valid-extras","title":"Valid <code>extras</code>","text":"Label Default Value Description <code>angle</code> <code>79.5</code> Angle of the stripes <code>episode_text_color</code> <code>crimson</code> Color to utilize for the episode text <code>episode_text_font_size</code> <code>1.0</code> Size adjustment for the season and episode text <code>inset</code> <code>50</code> How far to inset the start and end of the stripes <code>inter_stripe_spacing</code> <code>8</code> Spacing between stripes <code>overlay_color</code> <code>white</code> Color of the overlay <code>polygons</code> <code>random[ssmmmlll]</code> Format for the size and order of the stripes <code>separator</code> <code>-</code> Character that separates the season and episode text <code>text_position</code> <code>lower left</code> Position of the text on the image"},{"location":"v1/card_types/striped/#customization","title":"Customization","text":""},{"location":"v1/card_types/striped/#stripe-adjustments","title":"Stripe Adjustments","text":""},{"location":"v1/card_types/striped/#angle-angle","title":"Angle (<code>angle</code>)","text":"<p>The angle of the stripes can also be adjusted with the <code>angle</code> extra. A value of 90 degrees will result in the stripes being perfectly vertical, and the \"orientation\" of the stripes can be reversed by specifying angles larger than 90.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      angle: 85\n</code></pre> <p> </p>"},{"location":"v1/card_types/striped/#definition-polygons","title":"Definition (<code>polygons</code>)","text":"<p>Advanced Setting</p> <p>This setting is fairly complicated relative to the other available extras.</p> <p>The specific order, width, and level of randomization of the stripes can be fine-tuned with the <code>polygons</code> extra.</p> <p>By default, this card selects a random size and then a random width of that size - repeating the process until the card is \"full\" (i.e. no more horizontal space). These pre-defined sizes are \"small\", \"medium\", and \"large\" and have been abbreviated as <code>s</code>, <code>m</code>, and <code>l</code>.</p> <p>This extra supports six different \"kinds\" of unique patterns to control how the stripes are drawn.</p>"},{"location":"v1/card_types/striped/#random-order-random-sizes","title":"Random Order, Random Sizes","text":"<p>Specifying a definition like <code>random[sml]</code> will instruct TCM to randomly select a stripe of the listed sizes in the specified ratio. This means that repeating sizes - e.g. <code>random[sssssml]</code> - will result in those appearing with increased frequency. For example <code>sml</code> will mean all sizes are equally likely, while <code>ssml</code> will mean small stripes are twice as likely as medium or large. The width of each stripe will use the builtin size ranges.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      polygons: random[smllllll]\n</code></pre> <p>Notice how the right-image has a much higher frequency of large (<code>l</code>) stripes.</p> <p> </p> <p>This pattern will always fill the width of the card.</p>"},{"location":"v1/card_types/striped/#random-order-fixed-sizes","title":"Random Order, Fixed Sizes","text":"<p>Specifying a definition like <code>random[100,200]</code> will instruct TCM to randomly select stripes of the listed width in the specified ratio. For example, <code>random[100,200]</code> will result in random stripes of either 100 or 200 pixels wide. Repition is allowed. These must be comma-separated positive values.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      polygons: random[100,200]\n</code></pre> <p> </p> <p>This pattern will always fill the width of the card.</p>"},{"location":"v1/card_types/striped/#random-order-random-size-ranges","title":"Random Order, Random Size Ranges","text":"<p>Specifying a definition like <code>random[10-20,200-250]</code> will instruct TCM to randomly select stripes of random widths from the specified ranges in the specified ratios. For example: <code>random[10-20,200-250]</code> will result in random stripes of widths between 10 and 20 pixels or 200 and 250 pixels (in equal likelihood). Repition is allowed. These must be comma-separated positive values in which the second value is equal to or greater than the first.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      polygons: random[10-20,200-250]\n</code></pre> <p> </p> <p>This pattern will always fill the width of the card.</p>"},{"location":"v1/card_types/striped/#fixed-order-random-sizes","title":"Fixed Order, Random Sizes","text":"<p>Specifying a definition like <code>sml</code> will instruct TCM to generate stripes in the specified order of random widths. For example: <code>sml</code> will always generate a small, medium, and large stripe (repeated if a <code>+</code> is specified). The width of each stripe will use the builtin size ranges.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      polygons: sml+\n</code></pre> <p> </p> <p>This pattern will not repeat unless it ends with <code>+</code> - e.g. <code>sml+</code>.</p>"},{"location":"v1/card_types/striped/#fixed-order-fixed-sizes","title":"Fixed Order, Fixed Sizes","text":"<p>Specifying a definition like <code>10,100,400</code> will instruct TCM to generate stripes in the specified order of the specified widths. For example: <code>10,100,400</code> will generate stripes that are 10, 100, and 400 pixels wide (repeated if a <code>+</code> is specified). These must be comma-separated positive values.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      polygons: 10,100,400+\n</code></pre> <p> </p> <p>This pattern will not repeat unless it ends with <code>+</code> - e.g. <code>10,100,400+</code>.</p>"},{"location":"v1/card_types/striped/#fixed-order-random-size-ranges","title":"Fixed Order, Random Size Ranges","text":"<p>Specifying a pattern like <code>10-50,400-800</code> will instruct TCM to generate stripes in the specified order of random widths from the specified ranges. For example: <code>10-50,400-800</code> will result in a stripe between 10 and 50 pixels wide, and another between 400 and 800 pixels wide (repeated if a <code>+</code> is specified). These must be comma-separated positive values.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      polygons: 10-50,400-800+\n</code></pre> <p> </p> <p>This pattern will not repeat unless it ends with <code>+</code> - e.g. <code>10-50,400-800+</code>.</p>"},{"location":"v1/card_types/striped/#inter-stripe-spacing-inter_stripe_spacing","title":"Inter-Stripe Spacing (<code>inter_stripe_spacing</code>)","text":"<p>The spacing between sequential stripes can be adjusted with the <code>inter_stripe_spacing</code> extra.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      inter_stripe_spacing: 10\n</code></pre> <p> </p>"},{"location":"v1/card_types/striped/#episode-text-adjustments","title":"Episode Text Adjustments","text":"<p>For adjustments, the \"episode text\" refers to the combined season and episode text.</p>"},{"location":"v1/card_types/striped/#color-episode_text_color","title":"Color (<code>episode_text_color</code>)","text":"<p>The color of the episode text can be adjusted with the <code>episode_text_color</code> extra.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      episode_text_color: black\n</code></pre> <p> </p>"},{"location":"v1/card_types/striped/#size-episode_text_font_size","title":"Size (<code>episode_text_font_size</code>)","text":"<p>The size of the episode text can be adjusted with the <code>episode_text_font_size</code> extra. The boundaries for the stripe height are dynamically adjusted to prevent the stripes from overlapping the episode text.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      episode_text_font_size: 1.2\n</code></pre> <p> </p>"},{"location":"v1/card_types/striped/#overlay-color-overlay_color","title":"Overlay Color (<code>overlay_color</code>)","text":"<p>The color of the solid overlay can be adjusted with the <code>overlay_color</code> extra. This extra does support transparency.</p> Examples tv.yml<pre><code>series:\n  The Rookie (2018):\n    card_type: striped\n    extras:\n      overlay_color: azure\n</code></pre> <p> </p>"},{"location":"v1/card_types/striped/#separator-character-separator","title":"Separator Character (<code>separator</code>)","text":"<p>If both the season and episode text are displayed on the Card, then a separator character is added between them. This character can be adjusted with the Separator Character extra.</p>"},{"location":"v1/card_types/striped/#mask-images","title":"Mask Images","text":"<p>This card also natively supports mask images. Like all mask images, TCM will automatically search for alongside the input Source Image in the Series' source directory, and apply this atop all other Card effects.</p> <p>Example</p> <p> </p>"}]}