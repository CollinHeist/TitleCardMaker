name: multi-build-docker
on: 
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
    secrets:
      CYPRESS_RECORD_KEY:
        required: true
      # DOCKER_HUB_USERNAME:
      #   required: true
      # DOCKER_HUB_ACCESS_TOKEN:
      #   required: true
      GH_TOKEN:
        required: true

jobs:

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Login to Dockerhub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set up QEMU for ARM emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: python3 build cache for docker
        uses: actions/cache@v4
        with:
          path: python-build-cache
          key: ${{ runner.os }}-python-build-cache-${{ hashFiles('Pipfile.lock') }}

      - name: inject python-build-cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3 # v2.1.4
        with:
          cache-map: | 
            { 
              "python-build-cache" : "/root/.cache"
            }

      # Build container
      - name: Build Container
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          tags: titlecardmaker:${{ inputs.tag }}-test

      # Set up Cypress test environment
      - name: Install Cypress Dependencies
        run: >
          sudo apt-get update &&
          sudo apt-get install -y --no-install-recommends
          libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev
          libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # Launch container
      - name: Launch Container
        run: |
          mkdir config
          docker run -itd -p 4242:4242 -e TCM_TESTING=TRUE -v "./config":"/config" "titlecardmaker:${{ inputs.tag }}-test"

      # Install npm and run Cypress tests
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v6
        continue-on-error: true
        with:
          start: npm run cy:run:report
          wait-on: http://localhost:4242
          # Records to Cypress Cloud
          # https://docs.cypress.io/guides/cloud/projects#Set-up-a-project-to-record
          record: true
          parallel: false # Runs test in parallel using settings above
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      # Parse testing pass percentage
      - name: Parse Test Results
        id: pass-percentage
        if: always()
        run: |
          npx mochawesome-merge ./cypress/results/*.json > ./cypress/results/output.json
          echo $(jq '.stats.passPercent' './cypress/results/output.json')
          echo "PASS_PERCENTAGE=$(jq '.stats.passPercent' './cypress/results/output.json')" >> $GITHUB_OUTPUT

      - name: Push Docker container if enough test passed
        if: ${{ always() && fromJSON(steps.pass-percentage.outputs.PASS_PERCENTAGE) > 85 }}
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          # tags: ${{ secrets.DOCKER_HUB_USERNAME }}/titlecardmaker:${{ inputs.tag }},ghcr.io/titlecardmaker/titlecardmaker-webui:${{ inputs.tag }},ghcr.io/titlecardmaker/titlecardmaker:${{ inputs.tag }}
          tags: ghcr.io/titlecardmaker/titlecardmaker-webui:${{ inputs.tag }},ghcr.io/titlecardmaker/titlecardmaker:${{ inputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
