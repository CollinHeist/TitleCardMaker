name: multi-build-docker
on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      addl_tag:
        required: false
        type: string
    secrets:
      CYPRESS_RECORD_KEY:
        required: true
      # DOCKER_HUB_USERNAME:
      #   required: true
      # DOCKER_HUB_ACCESS_TOKEN:
      #   required: true
      GH_TOKEN:
        required: true
env:
  DOCKER_IMGNAME: ghcr.io/titlecardmaker/titlecardmaker-webui

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - linux/amd64
          - linux/arm/v7
          - linux/arm64
    # set dockerfile to .armv7 if arch is armv7
    env:
      DOCKERFILE: ${{ matrix.arch == 'linux/arm/v7' && 'Dockerfile.armv7' || 'Dockerfile' }}
      IMAGE_NAME: ''
    steps:
      # pre-setup
      - name: Set IMAGE_NAME
        run: echo "IMAGE_NAME=$(echo ${{ matrix.arch }} | cut -b 7- | tr -d '/')" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker build environment
      - name: Set up QEMU for ARM emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: python3 build cache for docker
        uses: actions/cache@v4
        with:
          path: python-build-cache
          key: ${{ matrix.arch }}-python-build-cache

      - name: inject python-build-cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3
        with:
          cache-map: |
            {
              "python-build-cache" : "/root/.cache"
            }

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.arch }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ matrix.arch }}-buildx-

      # Build container
      - name: Build Container
        uses: docker/build-push-action@v5
        with:
          file: ${{ env.DOCKERFILE }}
          platforms: ${{ matrix.arch }}
          push: false
          tags: ${{ env.DOCKER_IMGNAME }}:${{ inputs.tag }}-${{ env.IMAGE_NAME }}
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - # Build cache temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Upload artifacts for later steps
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-image
          path: /tmp/${{ env.IMAGE_NAME }}.tar

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # Set up Cypress test environment
      - name: Install Cypress Dependencies
        run: >
          sudo apt-get update &&
          sudo apt-get install -y --no-install-recommends
          libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev
          libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Download amd64-image
        uses: actions/download-artifact@v4
        with:
          name: amd64-image
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/amd64.tar
          docker image ls -a

      - name: Launch Container
        run: |
          mkdir config
          docker run -itd -p 4242:4242 -e TCM_TESTING=TRUE -v "./config":"/config" "${{ env.DOCKER_IMGNAME }}:${{ inputs.tag }}-amd64"

      # Install npm and run Cypress tests
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v6
        continue-on-error: true
        with:
          start: npm run cy:run:report
          wait-on: http://localhost:4242
          # Records to Cypress Cloud
          # https://docs.cypress.io/guides/cloud/projects#Set-up-a-project-to-record
          record: true
          parallel: false # Runs test in parallel using settings above
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      # Parse testing pass percentage
      - name: Parse Test Results
        id: pass-percentage
        run: |
          npx mochawesome-merge ./cypress/results/*.json > ./cypress/results/output.json
          echo $(jq '.stats.passPercent' './cypress/results/output.json')
          echo "PASS_PERCENTAGE=$(jq '.stats.passPercent' './cypress/results/output.json')" >> $GITHUB_OUTPUT

      - name: Error if not enough tests passed
        if: ${{ fromJSON(steps.pass-percentage.outputs.PASS_PERCENTAGE) <= 85 }}
        run: exit 1

  push:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Download images
        uses: actions/download-artifact@v4
        with:
          pattern: "*-image"
          merge-multiple: true
          path: /tmp

      - name: Docker image tag updates
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMGNAME }}
          tags: |
            ${{ inputs.tag }}

      - name: Load docker images
        run: |
          docker load --input /tmp/amd64.tar
          docker load --input /tmp/arm64.tar
          docker load --input /tmp/armv7.tar
          docker image ls -a

      # - name: Login to Dockerhub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      # push images to add to manifest, then to be deleted with regctl
      - name: Push imported images
        run: |
          docker push ${{ steps.meta.outputs.tags }}-amd64
          docker push ${{ steps.meta.outputs.tags }}-arm64
          docker push ${{ steps.meta.outputs.tags }}-armv7
      # create mutli-arch manifest https://docs.docker.com/reference/cli/docker/manifest/
      - name: Create manifest list and push
        run: |
          docker manifest create ${{ steps.meta.outputs.tags }} \
          ${{ steps.meta.outputs.tags }}-amd64 \
          ${{ steps.meta.outputs.tags }}-arm64 \
          ${{ steps.meta.outputs.tags }}-armv7
          docker manifest push ${{ steps.meta.outputs.tags }}

      # add regctl to copy to new tag, delete temporary tags
      - uses: sigstore/cosign-installer@v3.5.0
        if: ${{ inputs.addl_tag }}
      - name: Install regctl
        if: ${{ inputs.addl_tag }}
        uses: iarekylew00t/regctl-installer@61b6298c354562a692195ea71441e58508e667b0
      # regctl operations
      - name: regctl login
        if: ${{ inputs.addl_tag }}
        run: regctl registry login ghcr.io -u ${{ github.repository_owner }} -p ${{ secrets.GH_TOKEN }}
      # copy to new tag
      - name: regctl copy to new tag
        if: ${{ inputs.addl_tag }}
        run: regctl image copy ${{ steps.meta.outputs.tags }} ${{ env.DOCKER_IMGNAME }}:${{ inputs.addl_tag }}
      # delete temporary images
      - uses: chipkent/action-cleanup-package@1316a66015b82d745b57acbb6c570f2bb1d108f9
        with:
          package-name: titlecardmaker-webui 
          tag: ${{ inputs.tag }}-amd64
          github-token: ${{ secrets.GH_TOKEN }}
      - uses: chipkent/action-cleanup-package@1316a66015b82d745b57acbb6c570f2bb1d108f9
        with:
          package-name: titlecardmaker-webui 
          tag: ${{ inputs.tag }}-arm64
          github-token: ${{ secrets.GH_TOKEN }}
      # PRESERVE ARMv7 tag for now
      # - uses: chipkent/action-cleanup-package@1316a66015b82d745b57acbb6c570f2bb1d108f9
      #   with:
      #     package-name: titlecardmaker-webui 
      #     tag: ${{ inputs.tag }}-armv7
      #     github-token: ${{ secrets.GH_TOKEN }}
      # Clean up untagged images
      - uses: quartx-analytics/ghcr-cleaner@v1
        with:
          owner-type: org # org or user
          token: ${{ secrets.GH_TOKEN }}
          repository_owner: ${{ github.repository_owner }}
          package-name: titlecardmaker-webui
          delete-untagged: true